
tht_U6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002554  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000072  00800060  00002554  000025e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000080  008000d2  008000d2  0000265a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000265a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000026b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  000026f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002acd  00000000  00000000  00002908  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b36  00000000  00000000  000053d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017e9  00000000  00000000  00005f0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b0  00000000  00000000  000076f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000070d  00000000  00000000  00007ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000179b  00000000  00000000  000082b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00009a4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 25 02 	jmp	0x44a	; 0x44a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 3d       	cpi	r26, 0xD2	; 210
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a2 ed       	ldi	r26, 0xD2	; 210
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 35       	cpi	r26, 0x52	; 82
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4c 0c 	call	0x1898	; 0x1898 <main>
      8a:	0c 94 a8 12 	jmp	0x2550	; 0x2550 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Command>:
	LCD_Char('.'); // '.'

	LCD_Char((value / 10) % 10 + 48); //'8'

	LCD_Char((value) % 10 + 48); //'5'
}
      92:	85 bb       	out	0x15, r24	; 21
      94:	82 b3       	in	r24, 0x12	; 18
      96:	8f 7b       	andi	r24, 0xBF	; 191
      98:	82 bb       	out	0x12, r24	; 18
      9a:	82 b3       	in	r24, 0x12	; 18
      9c:	80 68       	ori	r24, 0x80	; 128
      9e:	82 bb       	out	0x12, r24	; 18
      a0:	85 e0       	ldi	r24, 0x05	; 5
      a2:	8a 95       	dec	r24
      a4:	f1 f7       	brne	.-4      	; 0xa2 <LCD_Command+0x10>
      a6:	00 00       	nop
      a8:	82 b3       	in	r24, 0x12	; 18
      aa:	8f 77       	andi	r24, 0x7F	; 127
      ac:	82 bb       	out	0x12, r24	; 18
      ae:	8f ed       	ldi	r24, 0xDF	; 223
      b0:	9e e2       	ldi	r25, 0x2E	; 46
      b2:	01 97       	sbiw	r24, 0x01	; 1
      b4:	f1 f7       	brne	.-4      	; 0xb2 <LCD_Command+0x20>
      b6:	00 c0       	rjmp	.+0      	; 0xb8 <LCD_Command+0x26>
      b8:	00 00       	nop
      ba:	08 95       	ret

000000bc <LCD_Char>:
      bc:	85 bb       	out	0x15, r24	; 21
      be:	82 b3       	in	r24, 0x12	; 18
      c0:	80 64       	ori	r24, 0x40	; 64
      c2:	82 bb       	out	0x12, r24	; 18
      c4:	82 b3       	in	r24, 0x12	; 18
      c6:	80 68       	ori	r24, 0x80	; 128
      c8:	82 bb       	out	0x12, r24	; 18
      ca:	85 e0       	ldi	r24, 0x05	; 5
      cc:	8a 95       	dec	r24
      ce:	f1 f7       	brne	.-4      	; 0xcc <LCD_Char+0x10>
      d0:	00 00       	nop
      d2:	82 b3       	in	r24, 0x12	; 18
      d4:	8f 77       	andi	r24, 0x7F	; 127
      d6:	82 bb       	out	0x12, r24	; 18
      d8:	8f e9       	ldi	r24, 0x9F	; 159
      da:	9f e0       	ldi	r25, 0x0F	; 15
      dc:	01 97       	sbiw	r24, 0x01	; 1
      de:	f1 f7       	brne	.-4      	; 0xdc <LCD_Char+0x20>
      e0:	00 c0       	rjmp	.+0      	; 0xe2 <LCD_Char+0x26>
      e2:	00 00       	nop
      e4:	08 95       	ret

000000e6 <LCD_write>:
      e6:	85 bb       	out	0x15, r24	; 21
      e8:	82 b3       	in	r24, 0x12	; 18
      ea:	80 64       	ori	r24, 0x40	; 64
      ec:	82 bb       	out	0x12, r24	; 18
      ee:	82 b3       	in	r24, 0x12	; 18
      f0:	80 68       	ori	r24, 0x80	; 128
      f2:	82 bb       	out	0x12, r24	; 18
      f4:	85 e0       	ldi	r24, 0x05	; 5
      f6:	8a 95       	dec	r24
      f8:	f1 f7       	brne	.-4      	; 0xf6 <LCD_write+0x10>
      fa:	00 00       	nop
      fc:	82 b3       	in	r24, 0x12	; 18
      fe:	8f 77       	andi	r24, 0x7F	; 127
     100:	82 bb       	out	0x12, r24	; 18
     102:	8f e9       	ldi	r24, 0x9F	; 159
     104:	9f e0       	ldi	r25, 0x0F	; 15
     106:	01 97       	sbiw	r24, 0x01	; 1
     108:	f1 f7       	brne	.-4      	; 0x106 <LCD_write+0x20>
     10a:	00 c0       	rjmp	.+0      	; 0x10c <LCD_write+0x26>
     10c:	00 00       	nop
     10e:	08 95       	ret

00000110 <LCD_Init>:
     110:	81 b3       	in	r24, 0x11	; 17
     112:	80 6c       	ori	r24, 0xC0	; 192
     114:	81 bb       	out	0x11, r24	; 17
     116:	8f ef       	ldi	r24, 0xFF	; 255
     118:	84 bb       	out	0x14, r24	; 20
     11a:	2f ef       	ldi	r18, 0xFF	; 255
     11c:	89 ef       	ldi	r24, 0xF9	; 249
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	21 50       	subi	r18, 0x01	; 1
     122:	80 40       	sbci	r24, 0x00	; 0
     124:	90 40       	sbci	r25, 0x00	; 0
     126:	e1 f7       	brne	.-8      	; 0x120 <LCD_Init+0x10>
     128:	00 c0       	rjmp	.+0      	; 0x12a <LCD_Init+0x1a>
     12a:	00 00       	nop
     12c:	88 e3       	ldi	r24, 0x38	; 56
     12e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     132:	25 e0       	ldi	r18, 0x05	; 5
     134:	2a 95       	dec	r18
     136:	f1 f7       	brne	.-4      	; 0x134 <LCD_Init+0x24>
     138:	00 00       	nop
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     140:	85 e0       	ldi	r24, 0x05	; 5
     142:	8a 95       	dec	r24
     144:	f1 f7       	brne	.-4      	; 0x142 <LCD_Init+0x32>
     146:	00 00       	nop
     148:	8e e0       	ldi	r24, 0x0E	; 14
     14a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     14e:	95 e0       	ldi	r25, 0x05	; 5
     150:	9a 95       	dec	r25
     152:	f1 f7       	brne	.-4      	; 0x150 <LCD_Init+0x40>
     154:	00 00       	nop
     156:	80 e8       	ldi	r24, 0x80	; 128
     158:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     15c:	87 ec       	ldi	r24, 0xC7	; 199
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	01 97       	sbiw	r24, 0x01	; 1
     162:	f1 f7       	brne	.-4      	; 0x160 <LCD_Init+0x50>
     164:	00 c0       	rjmp	.+0      	; 0x166 <LCD_Init+0x56>
     166:	00 00       	nop
     168:	08 95       	ret

0000016a <LCD_write_string>:
     16a:	0f 93       	push	r16
     16c:	1f 93       	push	r17
     16e:	cf 93       	push	r28
     170:	df 93       	push	r29
     172:	8c 01       	movw	r16, r24
     174:	c0 e0       	ldi	r28, 0x00	; 0
     176:	d0 e0       	ldi	r29, 0x00	; 0
     178:	03 c0       	rjmp	.+6      	; 0x180 <LCD_write_string+0x16>
     17a:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
     17e:	21 96       	adiw	r28, 0x01	; 1
     180:	f8 01       	movw	r30, r16
     182:	ec 0f       	add	r30, r28
     184:	fd 1f       	adc	r31, r29
     186:	80 81       	ld	r24, Z
     188:	81 11       	cpse	r24, r1
     18a:	f7 cf       	rjmp	.-18     	; 0x17a <LCD_write_string+0x10>
     18c:	df 91       	pop	r29
     18e:	cf 91       	pop	r28
     190:	1f 91       	pop	r17
     192:	0f 91       	pop	r16
     194:	08 95       	ret

00000196 <LCD_location>:
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	00 d0       	rcall	.+0      	; 0x19c <LCD_location+0x6>
     19c:	00 d0       	rcall	.+0      	; 0x19e <LCD_location+0x8>
     19e:	cd b7       	in	r28, 0x3d	; 61
     1a0:	de b7       	in	r29, 0x3e	; 62
     1a2:	90 e8       	ldi	r25, 0x80	; 128
     1a4:	99 83       	std	Y+1, r25	; 0x01
     1a6:	90 ec       	ldi	r25, 0xC0	; 192
     1a8:	9a 83       	std	Y+2, r25	; 0x02
     1aa:	94 e9       	ldi	r25, 0x94	; 148
     1ac:	9b 83       	std	Y+3, r25	; 0x03
     1ae:	94 ed       	ldi	r25, 0xD4	; 212
     1b0:	9c 83       	std	Y+4, r25	; 0x04
     1b2:	e8 2f       	mov	r30, r24
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	31 97       	sbiw	r30, 0x01	; 1
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	8c 0f       	add	r24, r28
     1be:	9d 1f       	adc	r25, r29
     1c0:	e8 0f       	add	r30, r24
     1c2:	f9 1f       	adc	r31, r25
     1c4:	80 81       	ld	r24, Z
     1c6:	86 0f       	add	r24, r22
     1c8:	81 50       	subi	r24, 0x01	; 1
     1ca:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     1ce:	8f e3       	ldi	r24, 0x3F	; 63
     1d0:	9c e9       	ldi	r25, 0x9C	; 156
     1d2:	01 97       	sbiw	r24, 0x01	; 1
     1d4:	f1 f7       	brne	.-4      	; 0x1d2 <LCD_location+0x3c>
     1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <LCD_location+0x42>
     1d8:	00 00       	nop
     1da:	0f 90       	pop	r0
     1dc:	0f 90       	pop	r0
     1de:	0f 90       	pop	r0
     1e0:	0f 90       	pop	r0
     1e2:	df 91       	pop	r29
     1e4:	cf 91       	pop	r28
     1e6:	08 95       	ret

000001e8 <LCD_Clear>:
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     1ee:	80 e8       	ldi	r24, 0x80	; 128
     1f0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     1f4:	08 95       	ret

000001f6 <LCD_showvalue>:

void LCD_showvalue(uint16_t data)
{
     1f6:	0f 93       	push	r16
     1f8:	1f 93       	push	r17
     1fa:	cf 93       	push	r28
     1fc:	df 93       	push	r29
     1fe:	8c 01       	movw	r16, r24
	LCD_write(((data / 100) % 10) + 0x30);
     200:	9c 01       	movw	r18, r24
     202:	36 95       	lsr	r19
     204:	27 95       	ror	r18
     206:	36 95       	lsr	r19
     208:	27 95       	ror	r18
     20a:	ab e7       	ldi	r26, 0x7B	; 123
     20c:	b4 e1       	ldi	r27, 0x14	; 20
     20e:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__umulhisi3>
     212:	ac 01       	movw	r20, r24
     214:	56 95       	lsr	r21
     216:	47 95       	ror	r20
     218:	9a 01       	movw	r18, r20
     21a:	ad ec       	ldi	r26, 0xCD	; 205
     21c:	bc ec       	ldi	r27, 0xCC	; 204
     21e:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__umulhisi3>
     222:	96 95       	lsr	r25
     224:	87 95       	ror	r24
     226:	96 95       	lsr	r25
     228:	87 95       	ror	r24
     22a:	96 95       	lsr	r25
     22c:	87 95       	ror	r24
     22e:	9c 01       	movw	r18, r24
     230:	22 0f       	add	r18, r18
     232:	33 1f       	adc	r19, r19
     234:	88 0f       	add	r24, r24
     236:	99 1f       	adc	r25, r25
     238:	88 0f       	add	r24, r24
     23a:	99 1f       	adc	r25, r25
     23c:	88 0f       	add	r24, r24
     23e:	99 1f       	adc	r25, r25
     240:	82 0f       	add	r24, r18
     242:	93 1f       	adc	r25, r19
     244:	9a 01       	movw	r18, r20
     246:	28 1b       	sub	r18, r24
     248:	39 0b       	sbc	r19, r25
     24a:	c9 01       	movw	r24, r18
     24c:	80 5d       	subi	r24, 0xD0	; 208
     24e:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
	LCD_write(((data / 10) % 10) + 0x30);
     252:	98 01       	movw	r18, r16
     254:	ad ec       	ldi	r26, 0xCD	; 205
     256:	bc ec       	ldi	r27, 0xCC	; 204
     258:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__umulhisi3>
     25c:	ec 01       	movw	r28, r24
     25e:	d6 95       	lsr	r29
     260:	c7 95       	ror	r28
     262:	d6 95       	lsr	r29
     264:	c7 95       	ror	r28
     266:	d6 95       	lsr	r29
     268:	c7 95       	ror	r28
     26a:	9e 01       	movw	r18, r28
     26c:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__umulhisi3>
     270:	96 95       	lsr	r25
     272:	87 95       	ror	r24
     274:	96 95       	lsr	r25
     276:	87 95       	ror	r24
     278:	96 95       	lsr	r25
     27a:	87 95       	ror	r24
     27c:	9c 01       	movw	r18, r24
     27e:	22 0f       	add	r18, r18
     280:	33 1f       	adc	r19, r19
     282:	88 0f       	add	r24, r24
     284:	99 1f       	adc	r25, r25
     286:	88 0f       	add	r24, r24
     288:	99 1f       	adc	r25, r25
     28a:	88 0f       	add	r24, r24
     28c:	99 1f       	adc	r25, r25
     28e:	82 0f       	add	r24, r18
     290:	93 1f       	adc	r25, r19
     292:	9e 01       	movw	r18, r28
     294:	28 1b       	sub	r18, r24
     296:	39 0b       	sbc	r19, r25
     298:	c9 01       	movw	r24, r18
     29a:	80 5d       	subi	r24, 0xD0	; 208
     29c:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
	LCD_Char('.');
     2a0:	8e e2       	ldi	r24, 0x2E	; 46
     2a2:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_Char>
	LCD_write(((data / 1) % 10) + 0x30);
     2a6:	ce 01       	movw	r24, r28
     2a8:	88 0f       	add	r24, r24
     2aa:	99 1f       	adc	r25, r25
     2ac:	cc 0f       	add	r28, r28
     2ae:	dd 1f       	adc	r29, r29
     2b0:	cc 0f       	add	r28, r28
     2b2:	dd 1f       	adc	r29, r29
     2b4:	cc 0f       	add	r28, r28
     2b6:	dd 1f       	adc	r29, r29
     2b8:	c8 0f       	add	r28, r24
     2ba:	d9 1f       	adc	r29, r25
     2bc:	c8 01       	movw	r24, r16
     2be:	8c 1b       	sub	r24, r28
     2c0:	9d 0b       	sbc	r25, r29
     2c2:	80 5d       	subi	r24, 0xD0	; 208
     2c4:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	1f 91       	pop	r17
     2ce:	0f 91       	pop	r16
     2d0:	08 95       	ret

000002d2 <timer0_init>:
{
	/* Clear OC0 on compare match, set OC0 at BOTTOM, (non-inverting mode) */
	TCCR0 &= (~((1<<COM1A0) | (1<<COM1A1)));
	
	/* make pwm as input */
	DDRD &= (~(1<<5));
     2d2:	87 b3       	in	r24, 0x17	; 23
     2d4:	88 60       	ori	r24, 0x08	; 8
     2d6:	87 bb       	out	0x17, r24	; 23
     2d8:	83 b7       	in	r24, 0x33	; 51
     2da:	8b 64       	ori	r24, 0x4B	; 75
     2dc:	83 bf       	out	0x33, r24	; 51
     2de:	12 be       	out	0x32, r1	; 50
     2e0:	78 94       	sei
     2e2:	08 95       	ret

000002e4 <timer0_start>:
     2e4:	83 b7       	in	r24, 0x33	; 51
     2e6:	80 62       	ori	r24, 0x20	; 32
     2e8:	83 bf       	out	0x33, r24	; 51
     2ea:	12 be       	out	0x32, r1	; 50
     2ec:	08 95       	ret

000002ee <timer0_stop>:
     2ee:	83 b7       	in	r24, 0x33	; 51
     2f0:	8f 7c       	andi	r24, 0xCF	; 207
     2f2:	83 bf       	out	0x33, r24	; 51
     2f4:	88 b3       	in	r24, 0x18	; 24
     2f6:	87 7f       	andi	r24, 0xF7	; 247
     2f8:	88 bb       	out	0x18, r24	; 24
     2fa:	08 95       	ret

000002fc <timer1_init>:
     2fc:	81 b3       	in	r24, 0x11	; 17
     2fe:	80 62       	ori	r24, 0x20	; 32
     300:	81 bb       	out	0x11, r24	; 17
     302:	8f ef       	ldi	r24, 0xFF	; 255
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	97 bd       	out	0x27, r25	; 39
     308:	86 bd       	out	0x26, r24	; 38
     30a:	8f b5       	in	r24, 0x2f	; 47
     30c:	8e 73       	andi	r24, 0x3E	; 62
     30e:	8f bd       	out	0x2f, r24	; 47
     310:	8e b5       	in	r24, 0x2e	; 46
     312:	8b 7f       	andi	r24, 0xFB	; 251
     314:	8e bd       	out	0x2e, r24	; 46
     316:	8f b5       	in	r24, 0x2f	; 47
     318:	82 60       	ori	r24, 0x02	; 2
     31a:	8f bd       	out	0x2f, r24	; 47
     31c:	8e b5       	in	r24, 0x2e	; 46
     31e:	8b 61       	ori	r24, 0x1B	; 27
     320:	8e bd       	out	0x2e, r24	; 46
     322:	1b bc       	out	0x2b, r1	; 43
     324:	1a bc       	out	0x2a, r1	; 42
     326:	1d bc       	out	0x2d, r1	; 45
     328:	1c bc       	out	0x2c, r1	; 44
     32a:	78 94       	sei
     32c:	08 95       	ret

0000032e <timer1_start>:
     32e:	8f b5       	in	r24, 0x2f	; 47
     330:	80 68       	ori	r24, 0x80	; 128
     332:	8f bd       	out	0x2f, r24	; 47
     334:	1d bc       	out	0x2d, r1	; 45
     336:	1c bc       	out	0x2c, r1	; 44
     338:	08 95       	ret

0000033a <timer1_stop>:
     33a:	8f b5       	in	r24, 0x2f	; 47
     33c:	8f 73       	andi	r24, 0x3F	; 63
     33e:	8f bd       	out	0x2f, r24	; 47
     340:	82 b3       	in	r24, 0x12	; 18
     342:	8f 7d       	andi	r24, 0xDF	; 223
     344:	82 bb       	out	0x12, r24	; 18
     346:	08 95       	ret

00000348 <timer2_init>:
     348:	85 b5       	in	r24, 0x25	; 37
     34a:	8d 60       	ori	r24, 0x0D	; 13
     34c:	85 bd       	out	0x25, r24	; 37
     34e:	8c e7       	ldi	r24, 0x7C	; 124
     350:	83 bd       	out	0x23, r24	; 35
     352:	89 b7       	in	r24, 0x39	; 57
     354:	80 68       	ori	r24, 0x80	; 128
     356:	89 bf       	out	0x39, r24	; 57
     358:	14 bc       	out	0x24, r1	; 36
     35a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <fcnt_millis>
     35e:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <fcnt_millis+0x1>
     362:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <fcnt_millis+0x2>
     366:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <fcnt_millis+0x3>
     36a:	78 94       	sei
     36c:	08 95       	ret

0000036e <__vector_3>:
}

ISR(TIMER2_COMP_vect)
{
     36e:	1f 92       	push	r1
     370:	0f 92       	push	r0
     372:	0f b6       	in	r0, 0x3f	; 63
     374:	0f 92       	push	r0
     376:	11 24       	eor	r1, r1
     378:	2f 93       	push	r18
     37a:	3f 93       	push	r19
     37c:	4f 93       	push	r20
     37e:	5f 93       	push	r21
     380:	6f 93       	push	r22
     382:	7f 93       	push	r23
     384:	8f 93       	push	r24
     386:	9f 93       	push	r25
     388:	af 93       	push	r26
     38a:	bf 93       	push	r27
     38c:	ef 93       	push	r30
     38e:	ff 93       	push	r31
	fcnt_millis++;
     390:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <fcnt_millis>
     394:	90 91 ea 00 	lds	r25, 0x00EA	; 0x8000ea <fcnt_millis+0x1>
     398:	a0 91 eb 00 	lds	r26, 0x00EB	; 0x8000eb <fcnt_millis+0x2>
     39c:	b0 91 ec 00 	lds	r27, 0x00EC	; 0x8000ec <fcnt_millis+0x3>
     3a0:	01 96       	adiw	r24, 0x01	; 1
     3a2:	a1 1d       	adc	r26, r1
     3a4:	b1 1d       	adc	r27, r1
     3a6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <fcnt_millis>
     3aa:	90 93 ea 00 	sts	0x00EA, r25	; 0x8000ea <fcnt_millis+0x1>
     3ae:	a0 93 eb 00 	sts	0x00EB, r26	; 0x8000eb <fcnt_millis+0x2>
     3b2:	b0 93 ec 00 	sts	0x00EC, r27	; 0x8000ec <fcnt_millis+0x3>
	callback();
     3b6:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <callback>
}
     3ba:	ff 91       	pop	r31
     3bc:	ef 91       	pop	r30
     3be:	bf 91       	pop	r27
     3c0:	af 91       	pop	r26
     3c2:	9f 91       	pop	r25
     3c4:	8f 91       	pop	r24
     3c6:	7f 91       	pop	r23
     3c8:	6f 91       	pop	r22
     3ca:	5f 91       	pop	r21
     3cc:	4f 91       	pop	r20
     3ce:	3f 91       	pop	r19
     3d0:	2f 91       	pop	r18
     3d2:	0f 90       	pop	r0
     3d4:	0f be       	out	0x3f, r0	; 63
     3d6:	0f 90       	pop	r0
     3d8:	1f 90       	pop	r1
     3da:	18 95       	reti

000003dc <milli>:
long milli(void)
{
	return fcnt_millis;
     3dc:	60 91 e9 00 	lds	r22, 0x00E9	; 0x8000e9 <fcnt_millis>
     3e0:	70 91 ea 00 	lds	r23, 0x00EA	; 0x8000ea <fcnt_millis+0x1>
     3e4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <fcnt_millis+0x2>
     3e8:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <fcnt_millis+0x3>
	
}
     3ec:	08 95       	ret

000003ee <USART_init>:
	{
		UWriteData(str[i]);
		i++;
	}
	
}
     3ee:	2f ef       	ldi	r18, 0xFF	; 255
     3f0:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <UQEnd>
     3f4:	20 93 ef 00 	sts	0x00EF, r18	; 0x8000ef <UQFront>
     3f8:	dc 01       	movw	r26, r24
     3fa:	cb 01       	movw	r24, r22
     3fc:	88 0f       	add	r24, r24
     3fe:	99 1f       	adc	r25, r25
     400:	aa 1f       	adc	r26, r26
     402:	bb 1f       	adc	r27, r27
     404:	88 0f       	add	r24, r24
     406:	99 1f       	adc	r25, r25
     408:	aa 1f       	adc	r26, r26
     40a:	bb 1f       	adc	r27, r27
     40c:	9c 01       	movw	r18, r24
     40e:	ad 01       	movw	r20, r26
     410:	22 0f       	add	r18, r18
     412:	33 1f       	adc	r19, r19
     414:	44 1f       	adc	r20, r20
     416:	55 1f       	adc	r21, r21
     418:	60 e0       	ldi	r22, 0x00	; 0
     41a:	74 e2       	ldi	r23, 0x24	; 36
     41c:	84 ef       	ldi	r24, 0xF4	; 244
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	0e 94 65 0f 	call	0x1eca	; 0x1eca <__udivmodsi4>
     424:	21 50       	subi	r18, 0x01	; 1
     426:	31 09       	sbc	r19, r1
     428:	71 f0       	breq	.+28     	; 0x446 <__DATA_REGION_LENGTH__+0x46>
     42a:	8a b1       	in	r24, 0x0a	; 10
     42c:	88 69       	ori	r24, 0x98	; 152
     42e:	8a b9       	out	0x0a, r24	; 10
     430:	80 b5       	in	r24, 0x20	; 32
     432:	86 68       	ori	r24, 0x86	; 134
     434:	80 bd       	out	0x20, r24	; 32
     436:	8b b1       	in	r24, 0x0b	; 11
     438:	82 60       	ori	r24, 0x02	; 2
     43a:	8b b9       	out	0x0b, r24	; 11
     43c:	29 b9       	out	0x09, r18	; 9
     43e:	30 bd       	out	0x20, r19	; 32
     440:	78 94       	sei
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	08 95       	ret
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	08 95       	ret

0000044a <__vector_11>:

ISR(USART_RXC_vect)
{
     44a:	1f 92       	push	r1
     44c:	0f 92       	push	r0
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	0f 92       	push	r0
     452:	11 24       	eor	r1, r1
     454:	2f 93       	push	r18
     456:	3f 93       	push	r19
     458:	4f 93       	push	r20
     45a:	8f 93       	push	r24
     45c:	9f 93       	push	r25
     45e:	ef 93       	push	r30
     460:	ff 93       	push	r31
	char data = UDR;
     462:	4c b1       	in	r20, 0x0c	; 12
	
	if(((UQEnd == (RECEIVE_BUFFER_SIZE - 1)) && (UQFront == 0)) || ((UQEnd+1)==UQFront))
     464:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <UQEnd>
     468:	89 35       	cpi	r24, 0x59	; 89
     46a:	21 f4       	brne	.+8      	; 0x474 <__stack+0x15>
     46c:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <UQFront>
     470:	88 23       	and	r24, r24
     472:	71 f0       	breq	.+28     	; 0x490 <__stack+0x31>
     474:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <UQEnd>
     478:	08 2e       	mov	r0, r24
     47a:	00 0c       	add	r0, r0
     47c:	99 0b       	sbc	r25, r25
     47e:	01 96       	adiw	r24, 0x01	; 1
     480:	20 91 ef 00 	lds	r18, 0x00EF	; 0x8000ef <UQFront>
     484:	02 2e       	mov	r0, r18
     486:	00 0c       	add	r0, r0
     488:	33 0b       	sbc	r19, r19
     48a:	82 17       	cp	r24, r18
     48c:	93 07       	cpc	r25, r19
     48e:	59 f4       	brne	.+22     	; 0x4a6 <__stack+0x47>
	{
		UQFront++;
     490:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <UQFront>
     494:	8f 5f       	subi	r24, 0xFF	; 255
     496:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <UQFront>
		
		if(UQFront==RECEIVE_BUFFER_SIZE) UQFront = 0;
     49a:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <UQFront>
     49e:	8a 35       	cpi	r24, 0x5A	; 90
     4a0:	11 f4       	brne	.+4      	; 0x4a6 <__stack+0x47>
     4a2:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <UQFront>
	}
	
	if(UQEnd==(RECEIVE_BUFFER_SIZE-1)) UQEnd = 0;
     4a6:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <UQEnd>
     4aa:	89 35       	cpi	r24, 0x59	; 89
     4ac:	19 f4       	brne	.+6      	; 0x4b4 <__stack+0x55>
     4ae:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <UQEnd>
     4b2:	05 c0       	rjmp	.+10     	; 0x4be <__stack+0x5f>
	
	else
	UQEnd++;
     4b4:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <UQEnd>
     4b8:	8f 5f       	subi	r24, 0xFF	; 255
     4ba:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <UQEnd>
	
	URbuff[UQEnd] = data;
     4be:	e0 91 f0 00 	lds	r30, 0x00F0	; 0x8000f0 <UQEnd>
     4c2:	0e 2e       	mov	r0, r30
     4c4:	00 0c       	add	r0, r0
     4c6:	ff 0b       	sbc	r31, r31
     4c8:	ef 50       	subi	r30, 0x0F	; 15
     4ca:	ff 4f       	sbci	r31, 0xFF	; 255
     4cc:	40 83       	st	Z, r20
	
	if(UQFront == -1) UQFront = 0;
     4ce:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <UQFront>
     4d2:	8f 3f       	cpi	r24, 0xFF	; 255
     4d4:	11 f4       	brne	.+4      	; 0x4da <__stack+0x7b>
     4d6:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <UQFront>
	
}
     4da:	ff 91       	pop	r31
     4dc:	ef 91       	pop	r30
     4de:	9f 91       	pop	r25
     4e0:	8f 91       	pop	r24
     4e2:	4f 91       	pop	r20
     4e4:	3f 91       	pop	r19
     4e6:	2f 91       	pop	r18
     4e8:	0f 90       	pop	r0
     4ea:	0f be       	out	0x3f, r0	; 63
     4ec:	0f 90       	pop	r0
     4ee:	1f 90       	pop	r1
     4f0:	18 95       	reti

000004f2 <UReadData>:

char UReadData(void)
{
	char data;
	
	if(UQFront == -1)
     4f2:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <UQFront>
     4f6:	8f 3f       	cpi	r24, 0xFF	; 255
     4f8:	11 f4       	brne	.+4      	; 0x4fe <UReadData+0xc>
	UQFront = 0;
     4fa:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <UQFront>
	
	data = URbuff[UQFront];
     4fe:	e0 91 ef 00 	lds	r30, 0x00EF	; 0x8000ef <UQFront>
     502:	0e 2e       	mov	r0, r30
     504:	00 0c       	add	r0, r0
     506:	ff 0b       	sbc	r31, r31
     508:	ef 50       	subi	r30, 0x0F	; 15
     50a:	ff 4f       	sbci	r31, 0xFF	; 255
     50c:	80 81       	ld	r24, Z
	
	if(UQFront == UQEnd)
     50e:	20 91 ef 00 	lds	r18, 0x00EF	; 0x8000ef <UQFront>
     512:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <UQEnd>
     516:	29 13       	cpse	r18, r25
     518:	06 c0       	rjmp	.+12     	; 0x526 <UReadData+0x34>
	UQFront = UQEnd = -1;
     51a:	9f ef       	ldi	r25, 0xFF	; 255
     51c:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <UQEnd>
     520:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <UQFront>
     524:	08 95       	ret
	
	else
	{
		UQFront++;
     526:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <UQFront>
     52a:	9f 5f       	subi	r25, 0xFF	; 255
     52c:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <UQFront>
		
		if(UQFront == RECEIVE_BUFFER_SIZE)
     530:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <UQFront>
     534:	9a 35       	cpi	r25, 0x5A	; 90
     536:	11 f4       	brne	.+4      	; 0x53c <UReadData+0x4a>
		UQFront = 0;
     538:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <UQFront>
	}
	return data;	
}
     53c:	08 95       	ret

0000053e <UAvailableData>:

uint8_t UAvailableData(void)
{
	if(UQFront == -1) return 0;
     53e:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <UQFront>
     542:	8f 3f       	cpi	r24, 0xFF	; 255
     544:	d1 f0       	breq	.+52     	; 0x57a <UAvailableData+0x3c>
	if(UQFront < UQEnd) return (UQEnd - UQFront + 1);
     546:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <UQFront>
     54a:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <UQEnd>
     54e:	98 17       	cp	r25, r24
     550:	3c f4       	brge	.+14     	; 0x560 <UAvailableData+0x22>
     552:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <UQEnd>
     556:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <UQFront>
     55a:	89 1b       	sub	r24, r25
     55c:	8f 5f       	subi	r24, 0xFF	; 255
     55e:	08 95       	ret
	else if (UQFront > UQEnd) return (RECEIVE_BUFFER_SIZE - UQFront + UQEnd + 1);
     560:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <UQFront>
     564:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <UQEnd>
     568:	89 17       	cp	r24, r25
     56a:	4c f4       	brge	.+18     	; 0x57e <UAvailableData+0x40>
     56c:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <UQEnd>
     570:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <UQFront>
     574:	89 1b       	sub	r24, r25
     576:	85 5a       	subi	r24, 0xA5	; 165
     578:	08 95       	ret
	return data;	
}

uint8_t UAvailableData(void)
{
	if(UQFront == -1) return 0;
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	08 95       	ret
	if(UQFront < UQEnd) return (UQEnd - UQFront + 1);
	else if (UQFront > UQEnd) return (RECEIVE_BUFFER_SIZE - UQFront + UQEnd + 1);
	else return 1;
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	08 95       	ret

00000582 <displayDebugInfo>:
		pid_Controller(((float) (setTemp/10)), ((float) (currTemp/10)), ((float) (setKp/10)), ((float) (setKi/10)), ((float) (setKd/10)));
	}

} 
void displayDebugInfo(float data)
{
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	cd b7       	in	r28, 0x3d	; 61
     58c:	de b7       	in	r29, 0x3e	; 62
     58e:	2a 97       	sbiw	r28, 0x0a	; 10
     590:	0f b6       	in	r0, 0x3f	; 63
     592:	f8 94       	cli
     594:	de bf       	out	0x3e, r29	; 62
     596:	0f be       	out	0x3f, r0	; 63
     598:	cd bf       	out	0x3d, r28	; 61
	LCD_location(1,1);
     59a:	61 e0       	ldi	r22, 0x01	; 1
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
	
	if((operationStatus == 1) || (operationStatus == 3))
     5a2:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <operationStatus>
     5a6:	81 30       	cpi	r24, 0x01	; 1
     5a8:	11 f0       	breq	.+4      	; 0x5ae <displayDebugInfo+0x2c>
     5aa:	83 30       	cpi	r24, 0x03	; 3
     5ac:	91 f5       	brne	.+100    	; 0x612 <displayDebugInfo+0x90>
	{
		LCD_write((OCR0 / 100) % 10 + 0x30);
     5ae:	8c b7       	in	r24, 0x3c	; 60
     5b0:	99 e2       	ldi	r25, 0x29	; 41
     5b2:	89 9f       	mul	r24, r25
     5b4:	81 2d       	mov	r24, r1
     5b6:	11 24       	eor	r1, r1
     5b8:	1d ec       	ldi	r17, 0xCD	; 205
     5ba:	82 95       	swap	r24
     5bc:	8f 70       	andi	r24, 0x0F	; 15
     5be:	80 5d       	subi	r24, 0xD0	; 208
     5c0:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
		LCD_write((OCR0 / 10) % 10 + 0x30);
     5c4:	8c b7       	in	r24, 0x3c	; 60
     5c6:	81 9f       	mul	r24, r17
     5c8:	81 2d       	mov	r24, r1
     5ca:	11 24       	eor	r1, r1
     5cc:	86 95       	lsr	r24
     5ce:	86 95       	lsr	r24
     5d0:	86 95       	lsr	r24
     5d2:	81 9f       	mul	r24, r17
     5d4:	91 2d       	mov	r25, r1
     5d6:	11 24       	eor	r1, r1
     5d8:	96 95       	lsr	r25
     5da:	96 95       	lsr	r25
     5dc:	96 95       	lsr	r25
     5de:	99 0f       	add	r25, r25
     5e0:	29 2f       	mov	r18, r25
     5e2:	22 0f       	add	r18, r18
     5e4:	22 0f       	add	r18, r18
     5e6:	92 0f       	add	r25, r18
     5e8:	89 1b       	sub	r24, r25
     5ea:	80 5d       	subi	r24, 0xD0	; 208
     5ec:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
		LCD_write((OCR0 / 1) % 10 + 0x30);
     5f0:	8c b7       	in	r24, 0x3c	; 60
     5f2:	81 9f       	mul	r24, r17
     5f4:	11 2d       	mov	r17, r1
     5f6:	11 24       	eor	r1, r1
     5f8:	16 95       	lsr	r17
     5fa:	16 95       	lsr	r17
     5fc:	16 95       	lsr	r17
     5fe:	11 0f       	add	r17, r17
     600:	91 2f       	mov	r25, r17
     602:	99 0f       	add	r25, r25
     604:	99 0f       	add	r25, r25
     606:	19 0f       	add	r17, r25
     608:	81 1b       	sub	r24, r17
     60a:	80 5d       	subi	r24, 0xD0	; 208
     60c:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
     610:	71 c0       	rjmp	.+226    	; 0x6f4 <displayDebugInfo+0x172>
	}
	else
	{
		LCD_write((OCR1A / 100) % 10 + 0x30);
     612:	2a b5       	in	r18, 0x2a	; 42
     614:	3b b5       	in	r19, 0x2b	; 43
     616:	36 95       	lsr	r19
     618:	27 95       	ror	r18
     61a:	36 95       	lsr	r19
     61c:	27 95       	ror	r18
     61e:	ab e7       	ldi	r26, 0x7B	; 123
     620:	b4 e1       	ldi	r27, 0x14	; 20
     622:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__umulhisi3>
     626:	ac 01       	movw	r20, r24
     628:	56 95       	lsr	r21
     62a:	47 95       	ror	r20
     62c:	9a 01       	movw	r18, r20
     62e:	ad ec       	ldi	r26, 0xCD	; 205
     630:	bc ec       	ldi	r27, 0xCC	; 204
     632:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__umulhisi3>
     636:	96 95       	lsr	r25
     638:	87 95       	ror	r24
     63a:	96 95       	lsr	r25
     63c:	87 95       	ror	r24
     63e:	96 95       	lsr	r25
     640:	87 95       	ror	r24
     642:	9c 01       	movw	r18, r24
     644:	22 0f       	add	r18, r18
     646:	33 1f       	adc	r19, r19
     648:	88 0f       	add	r24, r24
     64a:	99 1f       	adc	r25, r25
     64c:	88 0f       	add	r24, r24
     64e:	99 1f       	adc	r25, r25
     650:	88 0f       	add	r24, r24
     652:	99 1f       	adc	r25, r25
     654:	82 0f       	add	r24, r18
     656:	93 1f       	adc	r25, r19
     658:	9a 01       	movw	r18, r20
     65a:	28 1b       	sub	r18, r24
     65c:	39 0b       	sbc	r19, r25
     65e:	c9 01       	movw	r24, r18
     660:	80 5d       	subi	r24, 0xD0	; 208
     662:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
		LCD_write((OCR1A / 10) % 10 + 0x30);
     666:	2a b5       	in	r18, 0x2a	; 42
     668:	3b b5       	in	r19, 0x2b	; 43
     66a:	ad ec       	ldi	r26, 0xCD	; 205
     66c:	bc ec       	ldi	r27, 0xCC	; 204
     66e:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__umulhisi3>
     672:	ac 01       	movw	r20, r24
     674:	56 95       	lsr	r21
     676:	47 95       	ror	r20
     678:	56 95       	lsr	r21
     67a:	47 95       	ror	r20
     67c:	56 95       	lsr	r21
     67e:	47 95       	ror	r20
     680:	9a 01       	movw	r18, r20
     682:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__umulhisi3>
     686:	96 95       	lsr	r25
     688:	87 95       	ror	r24
     68a:	96 95       	lsr	r25
     68c:	87 95       	ror	r24
     68e:	96 95       	lsr	r25
     690:	87 95       	ror	r24
     692:	9c 01       	movw	r18, r24
     694:	22 0f       	add	r18, r18
     696:	33 1f       	adc	r19, r19
     698:	88 0f       	add	r24, r24
     69a:	99 1f       	adc	r25, r25
     69c:	88 0f       	add	r24, r24
     69e:	99 1f       	adc	r25, r25
     6a0:	88 0f       	add	r24, r24
     6a2:	99 1f       	adc	r25, r25
     6a4:	82 0f       	add	r24, r18
     6a6:	93 1f       	adc	r25, r19
     6a8:	9a 01       	movw	r18, r20
     6aa:	28 1b       	sub	r18, r24
     6ac:	39 0b       	sbc	r19, r25
     6ae:	c9 01       	movw	r24, r18
     6b0:	80 5d       	subi	r24, 0xD0	; 208
     6b2:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
		LCD_write((OCR1A / 1) % 10 + 0x30);
     6b6:	4a b5       	in	r20, 0x2a	; 42
     6b8:	5b b5       	in	r21, 0x2b	; 43
     6ba:	9a 01       	movw	r18, r20
     6bc:	ad ec       	ldi	r26, 0xCD	; 205
     6be:	bc ec       	ldi	r27, 0xCC	; 204
     6c0:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__umulhisi3>
     6c4:	96 95       	lsr	r25
     6c6:	87 95       	ror	r24
     6c8:	96 95       	lsr	r25
     6ca:	87 95       	ror	r24
     6cc:	96 95       	lsr	r25
     6ce:	87 95       	ror	r24
     6d0:	9c 01       	movw	r18, r24
     6d2:	22 0f       	add	r18, r18
     6d4:	33 1f       	adc	r19, r19
     6d6:	88 0f       	add	r24, r24
     6d8:	99 1f       	adc	r25, r25
     6da:	88 0f       	add	r24, r24
     6dc:	99 1f       	adc	r25, r25
     6de:	88 0f       	add	r24, r24
     6e0:	99 1f       	adc	r25, r25
     6e2:	82 0f       	add	r24, r18
     6e4:	93 1f       	adc	r25, r19
     6e6:	9a 01       	movw	r18, r20
     6e8:	28 1b       	sub	r18, r24
     6ea:	39 0b       	sbc	r19, r25
     6ec:	c9 01       	movw	r24, r18
     6ee:	80 5d       	subi	r24, 0xD0	; 208
     6f0:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
	}
	
	LCD_write(',');
     6f4:	8c e2       	ldi	r24, 0x2C	; 44
     6f6:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
	LCD_location(1,6);
     6fa:	66 e0       	ldi	r22, 0x06	; 6
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
	LCD_write('>');
     702:	8e e3       	ldi	r24, 0x3E	; 62
     704:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
	
	if(operationStatus == 1)
     708:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <operationStatus>
     70c:	81 30       	cpi	r24, 0x01	; 1
     70e:	39 f4       	brne	.+14     	; 0x71e <displayDebugInfo+0x19c>
	{
		LCD_write('F');
     710:	86 e4       	ldi	r24, 0x46	; 70
     712:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
		LCD_write('C');
     716:	83 e4       	ldi	r24, 0x43	; 67
     718:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
     71c:	23 c0       	rjmp	.+70     	; 0x764 <displayDebugInfo+0x1e2>
	}
	
	else if(operationStatus == 2)
     71e:	82 30       	cpi	r24, 0x02	; 2
     720:	39 f4       	brne	.+14     	; 0x730 <displayDebugInfo+0x1ae>
	{
		LCD_write('F');
     722:	86 e4       	ldi	r24, 0x46	; 70
     724:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
		LCD_write('H');
     728:	88 e4       	ldi	r24, 0x48	; 72
     72a:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
     72e:	1a c0       	rjmp	.+52     	; 0x764 <displayDebugInfo+0x1e2>
	}
	
	else if(operationStatus == 3)
     730:	83 30       	cpi	r24, 0x03	; 3
     732:	39 f4       	brne	.+14     	; 0x742 <displayDebugInfo+0x1c0>
	{
		LCD_write('P');
     734:	80 e5       	ldi	r24, 0x50	; 80
     736:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
		LCD_write('C');
     73a:	83 e4       	ldi	r24, 0x43	; 67
     73c:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
     740:	11 c0       	rjmp	.+34     	; 0x764 <displayDebugInfo+0x1e2>
	}
	
	else if(operationStatus == 4)
     742:	84 30       	cpi	r24, 0x04	; 4
     744:	39 f4       	brne	.+14     	; 0x754 <displayDebugInfo+0x1d2>
	{
		LCD_write('P');
     746:	80 e5       	ldi	r24, 0x50	; 80
     748:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
		LCD_write('H');
     74c:	88 e4       	ldi	r24, 0x48	; 72
     74e:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
     752:	08 c0       	rjmp	.+16     	; 0x764 <displayDebugInfo+0x1e2>
	}
	
	else if(operationStatus == 5)
     754:	85 30       	cpi	r24, 0x05	; 5
     756:	31 f4       	brne	.+12     	; 0x764 <displayDebugInfo+0x1e2>
	{
		LCD_write(' ');
     758:	80 e2       	ldi	r24, 0x20	; 32
     75a:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
		LCD_write('S');
     75e:	83 e5       	ldi	r24, 0x53	; 83
     760:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
	}
	
	LCD_location(2,1);
     764:	61 e0       	ldi	r22, 0x01	; 1
     766:	82 e0       	ldi	r24, 0x02	; 2
     768:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
	char tempError[10];
	sprintf(tempError, "%3.4f", (double) sumError);
     76c:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <sumError+0x3>
     770:	8f 93       	push	r24
     772:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <sumError+0x2>
     776:	8f 93       	push	r24
     778:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <sumError+0x1>
     77c:	8f 93       	push	r24
     77e:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <sumError>
     782:	8f 93       	push	r24
     784:	86 e6       	ldi	r24, 0x66	; 102
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	9f 93       	push	r25
     78a:	8f 93       	push	r24
     78c:	8e 01       	movw	r16, r28
     78e:	0f 5f       	subi	r16, 0xFF	; 255
     790:	1f 4f       	sbci	r17, 0xFF	; 255
     792:	1f 93       	push	r17
     794:	0f 93       	push	r16
     796:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <sprintf>
	LCD_write_string(tempError);
     79a:	c8 01       	movw	r24, r16
     79c:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>

}
     7a0:	0f b6       	in	r0, 0x3f	; 63
     7a2:	f8 94       	cli
     7a4:	de bf       	out	0x3e, r29	; 62
     7a6:	0f be       	out	0x3f, r0	; 63
     7a8:	cd bf       	out	0x3d, r28	; 61
     7aa:	2a 96       	adiw	r28, 0x0a	; 10
     7ac:	0f b6       	in	r0, 0x3f	; 63
     7ae:	f8 94       	cli
     7b0:	de bf       	out	0x3e, r29	; 62
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	cd bf       	out	0x3d, r28	; 61
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	1f 91       	pop	r17
     7bc:	0f 91       	pop	r16
     7be:	08 95       	ret

000007c0 <pid_Controller>:
float pid_Controller(float setPoint, float currentPoint, float Kp, float Ki, float Kd)
{
     7c0:	4f 92       	push	r4
     7c2:	5f 92       	push	r5
     7c4:	6f 92       	push	r6
     7c6:	7f 92       	push	r7
     7c8:	8f 92       	push	r8
     7ca:	9f 92       	push	r9
     7cc:	af 92       	push	r10
     7ce:	bf 92       	push	r11
     7d0:	cf 92       	push	r12
     7d2:	df 92       	push	r13
     7d4:	ef 92       	push	r14
     7d6:	ff 92       	push	r15
     7d8:	0f 93       	push	r16
     7da:	1f 93       	push	r17
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
     7e0:	cd b7       	in	r28, 0x3d	; 61
     7e2:	de b7       	in	r29, 0x3e	; 62
     7e4:	60 97       	sbiw	r28, 0x10	; 16
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	f8 94       	cli
     7ea:	de bf       	out	0x3e, r29	; 62
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	cd bf       	out	0x3d, r28	; 61
     7f0:	6d 83       	std	Y+5, r22	; 0x05
     7f2:	7e 83       	std	Y+6, r23	; 0x06
     7f4:	8f 83       	std	Y+7, r24	; 0x07
     7f6:	98 87       	std	Y+8, r25	; 0x08
     7f8:	29 01       	movw	r4, r18
     7fa:	3a 01       	movw	r6, r20
     7fc:	e9 82       	std	Y+1, r14	; 0x01
     7fe:	fa 82       	std	Y+2, r15	; 0x02
     800:	0b 83       	std	Y+3, r16	; 0x03
     802:	1c 83       	std	Y+4, r17	; 0x04
     804:	c6 01       	movw	r24, r12
     806:	b5 01       	movw	r22, r10
	float error = 0;

	Ki = Ki * (PID_UPDATE_TIME/1000);
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	a9 01       	movw	r20, r18
     80e:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__mulsf3>
     812:	69 87       	std	Y+9, r22	; 0x09
     814:	7a 87       	std	Y+10, r23	; 0x0a
     816:	8b 87       	std	Y+11, r24	; 0x0b
     818:	9c 87       	std	Y+12, r25	; 0x0c
	Kd = Kd / (PID_UPDATE_TIME/1000);

	error = ((float)(setPoint - currentPoint));
     81a:	a3 01       	movw	r20, r6
     81c:	92 01       	movw	r18, r4
     81e:	6d 81       	ldd	r22, Y+5	; 0x05
     820:	7e 81       	ldd	r23, Y+6	; 0x06
     822:	8f 81       	ldd	r24, Y+7	; 0x07
     824:	98 85       	ldd	r25, Y+8	; 0x08
     826:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__subsf3>
     82a:	6b 01       	movw	r12, r22
     82c:	7c 01       	movw	r14, r24

	if((error < ((float)Interlock_Temp_Range)) && (error > ((float)(-Interlock_Temp_Range))))
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	40 e8       	ldi	r20, 0x80	; 128
     834:	5f e3       	ldi	r21, 0x3F	; 63
     836:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__cmpsf2>
     83a:	88 23       	and	r24, r24
     83c:	a4 f4       	brge	.+40     	; 0x866 <pid_Controller+0xa6>
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	40 e8       	ldi	r20, 0x80	; 128
     844:	5f eb       	ldi	r21, 0xBF	; 191
     846:	c7 01       	movw	r24, r14
     848:	b6 01       	movw	r22, r12
     84a:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__gesf2>
     84e:	18 16       	cp	r1, r24
     850:	54 f4       	brge	.+20     	; 0x866 <pid_Controller+0xa6>
	{
		SET_INTERLOCK_KEY;
     852:	88 b3       	in	r24, 0x18	; 24
     854:	81 60       	ori	r24, 0x01	; 1
     856:	88 bb       	out	0x18, r24	; 24
		RED_LED_OFF;
     858:	88 b3       	in	r24, 0x18	; 24
     85a:	8d 7f       	andi	r24, 0xFD	; 253
     85c:	88 bb       	out	0x18, r24	; 24
		GREEN_LED_ON;
     85e:	88 b3       	in	r24, 0x18	; 24
     860:	84 60       	ori	r24, 0x04	; 4
     862:	88 bb       	out	0x18, r24	; 24
     864:	09 c0       	rjmp	.+18     	; 0x878 <pid_Controller+0xb8>
	}

	else
	{
		RESET_INTERLOCK_KEY;
     866:	88 b3       	in	r24, 0x18	; 24
     868:	8e 7f       	andi	r24, 0xFE	; 254
     86a:	88 bb       	out	0x18, r24	; 24
		RED_LED_ON;
     86c:	88 b3       	in	r24, 0x18	; 24
     86e:	82 60       	ori	r24, 0x02	; 2
     870:	88 bb       	out	0x18, r24	; 24
		GREEN_LED_OFF;
     872:	88 b3       	in	r24, 0x18	; 24
     874:	8b 7f       	andi	r24, 0xFB	; 251
     876:	88 bb       	out	0x18, r24	; 24
	}

	if(error < (-1))
     878:	20 e0       	ldi	r18, 0x00	; 0
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	40 e8       	ldi	r20, 0x80	; 128
     87e:	5f eb       	ldi	r21, 0xBF	; 191
     880:	c7 01       	movw	r24, r14
     882:	b6 01       	movw	r22, r12
     884:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__cmpsf2>
     888:	88 23       	and	r24, r24
     88a:	a4 f4       	brge	.+40     	; 0x8b4 <pid_Controller+0xf4>
	{
		timer1_stop();
     88c:	0e 94 9d 01 	call	0x33a	; 0x33a <timer1_stop>
		OCR_value_2 = 255;
     890:	8f ef       	ldi	r24, 0xFF	; 255
     892:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <OCR_value_2>
		OCR0 = OCR_value_2;
     896:	8c bf       	out	0x3c, r24	; 60
		sumError = 0;
     898:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <sumError>
     89c:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <sumError+0x1>
     8a0:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <sumError+0x2>
     8a4:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <sumError+0x3>
		timer0_start();
     8a8:	0e 94 72 01 	call	0x2e4	; 0x2e4 <timer0_start>
		operationStatus = 1;
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <operationStatus>
     8b2:	57 c1       	rjmp	.+686    	; 0xb62 <pid_Controller+0x3a2>
	}

	else if(error > 1)
     8b4:	20 e0       	ldi	r18, 0x00	; 0
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	40 e8       	ldi	r20, 0x80	; 128
     8ba:	5f e3       	ldi	r21, 0x3F	; 63
     8bc:	c7 01       	movw	r24, r14
     8be:	b6 01       	movw	r22, r12
     8c0:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__gesf2>
     8c4:	18 16       	cp	r1, r24
     8c6:	c4 f4       	brge	.+48     	; 0x8f8 <pid_Controller+0x138>
	{
		timer0_stop();
     8c8:	0e 94 77 01 	call	0x2ee	; 0x2ee <timer0_stop>
		OCR_value_1 = 255;
     8cc:	8f ef       	ldi	r24, 0xFF	; 255
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <OCR_value_1+0x1>
     8d4:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <OCR_value_1>
		OCR1A = OCR_value_1;
     8d8:	9b bd       	out	0x2b, r25	; 43
     8da:	8a bd       	out	0x2a, r24	; 42
		sumError = 0;
     8dc:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <sumError>
     8e0:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <sumError+0x1>
     8e4:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <sumError+0x2>
     8e8:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <sumError+0x3>
		timer1_start();
     8ec:	0e 94 97 01 	call	0x32e	; 0x32e <timer1_start>
		operationStatus = 2;
     8f0:	82 e0       	ldi	r24, 0x02	; 2
     8f2:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <operationStatus>
     8f6:	35 c1       	rjmp	.+618    	; 0xb62 <pid_Controller+0x3a2>

	}
	else
	{
		float absError = error;
		if (absError < 0)
     8f8:	20 e0       	ldi	r18, 0x00	; 0
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	a9 01       	movw	r20, r18
     8fe:	c7 01       	movw	r24, r14
     900:	b6 01       	movw	r22, r12
     902:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__cmpsf2>
     906:	88 23       	and	r24, r24
     908:	44 f4       	brge	.+16     	; 0x91a <pid_Controller+0x15a>
		absError *= -1;
     90a:	d7 01       	movw	r26, r14
     90c:	c6 01       	movw	r24, r12
     90e:	b0 58       	subi	r27, 0x80	; 128
     910:	8d 83       	std	Y+5, r24	; 0x05
     912:	9e 83       	std	Y+6, r25	; 0x06
     914:	af 83       	std	Y+7, r26	; 0x07
     916:	b8 87       	std	Y+8, r27	; 0x08
     918:	04 c0       	rjmp	.+8      	; 0x922 <pid_Controller+0x162>
		operationStatus = 2;

	}
	else
	{
		float absError = error;
     91a:	cd 82       	std	Y+5, r12	; 0x05
     91c:	de 82       	std	Y+6, r13	; 0x06
     91e:	ef 82       	std	Y+7, r14	; 0x07
     920:	f8 86       	std	Y+8, r15	; 0x08
		if (absError < 0)
		absError *= -1;
		sumError += (Ki * absError);
     922:	29 85       	ldd	r18, Y+9	; 0x09
     924:	3a 85       	ldd	r19, Y+10	; 0x0a
     926:	4b 85       	ldd	r20, Y+11	; 0x0b
     928:	5c 85       	ldd	r21, Y+12	; 0x0c
     92a:	6d 81       	ldd	r22, Y+5	; 0x05
     92c:	7e 81       	ldd	r23, Y+6	; 0x06
     92e:	8f 81       	ldd	r24, Y+7	; 0x07
     930:	98 85       	ldd	r25, Y+8	; 0x08
     932:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__mulsf3>
     936:	20 91 d6 00 	lds	r18, 0x00D6	; 0x8000d6 <sumError>
     93a:	30 91 d7 00 	lds	r19, 0x00D7	; 0x8000d7 <sumError+0x1>
     93e:	40 91 d8 00 	lds	r20, 0x00D8	; 0x8000d8 <sumError+0x2>
     942:	50 91 d9 00 	lds	r21, 0x00D9	; 0x8000d9 <sumError+0x3>
     946:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__addsf3>
     94a:	4b 01       	movw	r8, r22
     94c:	5c 01       	movw	r10, r24
     94e:	60 93 d6 00 	sts	0x00D6, r22	; 0x8000d6 <sumError>
     952:	70 93 d7 00 	sts	0x00D7, r23	; 0x8000d7 <sumError+0x1>
     956:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <sumError+0x2>
     95a:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <sumError+0x3>
		if(sumError > ((2*Kp)/10))
     95e:	29 81       	ldd	r18, Y+1	; 0x01
     960:	3a 81       	ldd	r19, Y+2	; 0x02
     962:	4b 81       	ldd	r20, Y+3	; 0x03
     964:	5c 81       	ldd	r21, Y+4	; 0x04
     966:	ca 01       	movw	r24, r20
     968:	b9 01       	movw	r22, r18
     96a:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__addsf3>
     96e:	20 e0       	ldi	r18, 0x00	; 0
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	40 e2       	ldi	r20, 0x20	; 32
     974:	51 e4       	ldi	r21, 0x41	; 65
     976:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <__divsf3>
     97a:	6d 87       	std	Y+13, r22	; 0x0d
     97c:	7e 87       	std	Y+14, r23	; 0x0e
     97e:	8f 87       	std	Y+15, r24	; 0x0f
     980:	98 8b       	std	Y+16, r25	; 0x10
     982:	9b 01       	movw	r18, r22
     984:	ac 01       	movw	r20, r24
     986:	c5 01       	movw	r24, r10
     988:	b4 01       	movw	r22, r8
     98a:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__gesf2>
     98e:	18 16       	cp	r1, r24
     990:	6c f4       	brge	.+26     	; 0x9ac <pid_Controller+0x1ec>
		sumError = ((2*Kp)/10);
     992:	8d 85       	ldd	r24, Y+13	; 0x0d
     994:	9e 85       	ldd	r25, Y+14	; 0x0e
     996:	af 85       	ldd	r26, Y+15	; 0x0f
     998:	b8 89       	ldd	r27, Y+16	; 0x10
     99a:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <sumError>
     99e:	90 93 d7 00 	sts	0x00D7, r25	; 0x8000d7 <sumError+0x1>
     9a2:	a0 93 d8 00 	sts	0x00D8, r26	; 0x8000d8 <sumError+0x2>
     9a6:	b0 93 d9 00 	sts	0x00D9, r27	; 0x8000d9 <sumError+0x3>
     9aa:	11 c0       	rjmp	.+34     	; 0x9ce <pid_Controller+0x20e>
		else if(sumError < 0)
     9ac:	20 e0       	ldi	r18, 0x00	; 0
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	a9 01       	movw	r20, r18
     9b2:	c5 01       	movw	r24, r10
     9b4:	b4 01       	movw	r22, r8
     9b6:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__cmpsf2>
     9ba:	88 23       	and	r24, r24
     9bc:	44 f4       	brge	.+16     	; 0x9ce <pid_Controller+0x20e>
		sumError = 0;
     9be:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <sumError>
     9c2:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <sumError+0x1>
     9c6:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <sumError+0x2>
     9ca:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <sumError+0x3>
		if(Ki == 0)
     9ce:	20 e0       	ldi	r18, 0x00	; 0
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	a9 01       	movw	r20, r18
     9d4:	69 85       	ldd	r22, Y+9	; 0x09
     9d6:	7a 85       	ldd	r23, Y+10	; 0x0a
     9d8:	8b 85       	ldd	r24, Y+11	; 0x0b
     9da:	9c 85       	ldd	r25, Y+12	; 0x0c
     9dc:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__cmpsf2>
     9e0:	81 11       	cpse	r24, r1
     9e2:	08 c0       	rjmp	.+16     	; 0x9f4 <pid_Controller+0x234>
		sumError =0;
     9e4:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <sumError>
     9e8:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <sumError+0x1>
     9ec:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <sumError+0x2>
     9f0:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <sumError+0x3>

		double output;
		float pointDiff = currentPoint - lastcurrentPoint;
     9f4:	20 91 d2 00 	lds	r18, 0x00D2	; 0x8000d2 <__data_end>
     9f8:	30 91 d3 00 	lds	r19, 0x00D3	; 0x8000d3 <__data_end+0x1>
     9fc:	40 91 d4 00 	lds	r20, 0x00D4	; 0x8000d4 <__data_end+0x2>
     a00:	50 91 d5 00 	lds	r21, 0x00D5	; 0x8000d5 <__data_end+0x3>
     a04:	c3 01       	movw	r24, r6
     a06:	b2 01       	movw	r22, r4
     a08:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__subsf3>
     a0c:	4b 01       	movw	r8, r22
     a0e:	5c 01       	movw	r10, r24
		if(pointDiff < 0)
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	a9 01       	movw	r20, r18
     a16:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__cmpsf2>
     a1a:	88 23       	and	r24, r24
     a1c:	24 f4       	brge	.+8      	; 0xa26 <pid_Controller+0x266>
		pointDiff *= -1;
     a1e:	b7 fa       	bst	r11, 7
     a20:	b0 94       	com	r11
     a22:	b7 f8       	bld	r11, 7
     a24:	b0 94       	com	r11
		output = (Kp * absError + sumError - (Ki * pointDiff));
     a26:	29 81       	ldd	r18, Y+1	; 0x01
     a28:	3a 81       	ldd	r19, Y+2	; 0x02
     a2a:	4b 81       	ldd	r20, Y+3	; 0x03
     a2c:	5c 81       	ldd	r21, Y+4	; 0x04
     a2e:	6d 81       	ldd	r22, Y+5	; 0x05
     a30:	7e 81       	ldd	r23, Y+6	; 0x06
     a32:	8f 81       	ldd	r24, Y+7	; 0x07
     a34:	98 85       	ldd	r25, Y+8	; 0x08
     a36:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__mulsf3>
     a3a:	20 91 d6 00 	lds	r18, 0x00D6	; 0x8000d6 <sumError>
     a3e:	30 91 d7 00 	lds	r19, 0x00D7	; 0x8000d7 <sumError+0x1>
     a42:	40 91 d8 00 	lds	r20, 0x00D8	; 0x8000d8 <sumError+0x2>
     a46:	50 91 d9 00 	lds	r21, 0x00D9	; 0x8000d9 <sumError+0x3>
     a4a:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__addsf3>
     a4e:	69 83       	std	Y+1, r22	; 0x01
     a50:	7a 83       	std	Y+2, r23	; 0x02
     a52:	8b 83       	std	Y+3, r24	; 0x03
     a54:	9c 83       	std	Y+4, r25	; 0x04
     a56:	29 85       	ldd	r18, Y+9	; 0x09
     a58:	3a 85       	ldd	r19, Y+10	; 0x0a
     a5a:	4b 85       	ldd	r20, Y+11	; 0x0b
     a5c:	5c 85       	ldd	r21, Y+12	; 0x0c
     a5e:	c5 01       	movw	r24, r10
     a60:	b4 01       	movw	r22, r8
     a62:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__mulsf3>
     a66:	9b 01       	movw	r18, r22
     a68:	ac 01       	movw	r20, r24
     a6a:	69 81       	ldd	r22, Y+1	; 0x01
     a6c:	7a 81       	ldd	r23, Y+2	; 0x02
     a6e:	8b 81       	ldd	r24, Y+3	; 0x03
     a70:	9c 81       	ldd	r25, Y+4	; 0x04
     a72:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__subsf3>
     a76:	4b 01       	movw	r8, r22
     a78:	5c 01       	movw	r10, r24
		if(output > 255)
     a7a:	20 e0       	ldi	r18, 0x00	; 0
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	4f e7       	ldi	r20, 0x7F	; 127
     a80:	53 e4       	ldi	r21, 0x43	; 67
     a82:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__gesf2>
     a86:	18 16       	cp	r1, r24
     a88:	5c f0       	brlt	.+22     	; 0xaa0 <pid_Controller+0x2e0>
		output = 255;
		else if(output < -255)
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	4f e7       	ldi	r20, 0x7F	; 127
     a90:	53 ec       	ldi	r21, 0xC3	; 195
     a92:	c5 01       	movw	r24, r10
     a94:	b4 01       	movw	r22, r8
     a96:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__cmpsf2>
     a9a:	88 23       	and	r24, r24
     a9c:	54 f0       	brlt	.+20     	; 0xab2 <pid_Controller+0x2f2>
     a9e:	11 c0       	rjmp	.+34     	; 0xac2 <pid_Controller+0x302>
		float pointDiff = currentPoint - lastcurrentPoint;
		if(pointDiff < 0)
		pointDiff *= -1;
		output = (Kp * absError + sumError - (Ki * pointDiff));
		if(output > 255)
		output = 255;
     aa0:	0f 2e       	mov	r0, r31
     aa2:	81 2c       	mov	r8, r1
     aa4:	91 2c       	mov	r9, r1
     aa6:	ff e7       	ldi	r31, 0x7F	; 127
     aa8:	af 2e       	mov	r10, r31
     aaa:	f3 e4       	ldi	r31, 0x43	; 67
     aac:	bf 2e       	mov	r11, r31
     aae:	f0 2d       	mov	r31, r0
     ab0:	08 c0       	rjmp	.+16     	; 0xac2 <pid_Controller+0x302>
		else if(output < -255)
		output = -255;
     ab2:	0f 2e       	mov	r0, r31
     ab4:	81 2c       	mov	r8, r1
     ab6:	91 2c       	mov	r9, r1
     ab8:	ff e7       	ldi	r31, 0x7F	; 127
     aba:	af 2e       	mov	r10, r31
     abc:	f3 ec       	ldi	r31, 0xC3	; 195
     abe:	bf 2e       	mov	r11, r31
     ac0:	f0 2d       	mov	r31, r0

		output = abs(output);
     ac2:	c5 01       	movw	r24, r10
     ac4:	b4 01       	movw	r22, r8
     ac6:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <__fixsfsi>
     aca:	8b 01       	movw	r16, r22
     acc:	77 23       	and	r23, r23
     ace:	24 f4       	brge	.+8      	; 0xad8 <pid_Controller+0x318>
     ad0:	00 27       	eor	r16, r16
     ad2:	11 27       	eor	r17, r17
     ad4:	06 1b       	sub	r16, r22
     ad6:	17 0b       	sbc	r17, r23

		if(error > 0)
     ad8:	20 e0       	ldi	r18, 0x00	; 0
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	a9 01       	movw	r20, r18
     ade:	c7 01       	movw	r24, r14
     ae0:	b6 01       	movw	r22, r12
     ae2:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__gesf2>
     ae6:	18 16       	cp	r1, r24
     ae8:	84 f4       	brge	.+32     	; 0xb0a <pid_Controller+0x34a>
		{
			timer0_stop();
     aea:	0e 94 77 01 	call	0x2ee	; 0x2ee <timer0_stop>
			OCR_value_1 = output;
     aee:	80 2f       	mov	r24, r16
     af0:	91 2f       	mov	r25, r17
     af2:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <OCR_value_1+0x1>
     af6:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <OCR_value_1>
			OCR1A = OCR_value_1;
     afa:	9b bd       	out	0x2b, r25	; 43
     afc:	8a bd       	out	0x2a, r24	; 42
			timer1_start();
     afe:	0e 94 97 01 	call	0x32e	; 0x32e <timer1_start>
			operationStatus = 4;
     b02:	84 e0       	ldi	r24, 0x04	; 4
     b04:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <operationStatus>
     b08:	2c c0       	rjmp	.+88     	; 0xb62 <pid_Controller+0x3a2>
		}

		else if(error < 0)
     b0a:	20 e0       	ldi	r18, 0x00	; 0
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	a9 01       	movw	r20, r18
     b10:	c7 01       	movw	r24, r14
     b12:	b6 01       	movw	r22, r12
     b14:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__cmpsf2>
     b18:	88 23       	and	r24, r24
     b1a:	5c f4       	brge	.+22     	; 0xb32 <pid_Controller+0x372>
		{
			timer1_stop();
     b1c:	0e 94 9d 01 	call	0x33a	; 0x33a <timer1_stop>
			OCR_value_2 = output;
     b20:	00 93 e6 00 	sts	0x00E6, r16	; 0x8000e6 <OCR_value_2>
			OCR0 = OCR_value_2;
     b24:	0c bf       	out	0x3c, r16	; 60
			timer0_start();
     b26:	0e 94 72 01 	call	0x2e4	; 0x2e4 <timer0_start>
			operationStatus = 3;
     b2a:	83 e0       	ldi	r24, 0x03	; 3
     b2c:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <operationStatus>
     b30:	18 c0       	rjmp	.+48     	; 0xb62 <pid_Controller+0x3a2>
		}

		else
		{

			OCR_value_2 = 0;
     b32:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <OCR_value_2>
			OCR0 = OCR_value_2;
     b36:	1c be       	out	0x3c, r1	; 60
			OCR_value_1 = 0;
     b38:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <OCR_value_1+0x1>
     b3c:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <OCR_value_1>
			OCR1A = OCR_value_1;
     b40:	1b bc       	out	0x2b, r1	; 43
     b42:	1a bc       	out	0x2a, r1	; 42
			sumError = 0;
     b44:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <sumError>
     b48:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <sumError+0x1>
     b4c:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <sumError+0x2>
     b50:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <sumError+0x3>
			timer0_stop();
     b54:	0e 94 77 01 	call	0x2ee	; 0x2ee <timer0_stop>
			timer1_stop();
     b58:	0e 94 9d 01 	call	0x33a	; 0x33a <timer1_stop>
			operationStatus = 5;
     b5c:	85 e0       	ldi	r24, 0x05	; 5
     b5e:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <operationStatus>
		}
	}
	lastcurrentPoint = currentPoint;
     b62:	40 92 d2 00 	sts	0x00D2, r4	; 0x8000d2 <__data_end>
     b66:	50 92 d3 00 	sts	0x00D3, r5	; 0x8000d3 <__data_end+0x1>
     b6a:	60 92 d4 00 	sts	0x00D4, r6	; 0x8000d4 <__data_end+0x2>
     b6e:	70 92 d5 00 	sts	0x00D5, r7	; 0x8000d5 <__data_end+0x3>
	return (error);
}
     b72:	c7 01       	movw	r24, r14
     b74:	b6 01       	movw	r22, r12
     b76:	60 96       	adiw	r28, 0x10	; 16
     b78:	0f b6       	in	r0, 0x3f	; 63
     b7a:	f8 94       	cli
     b7c:	de bf       	out	0x3e, r29	; 62
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	cd bf       	out	0x3d, r28	; 61
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	1f 91       	pop	r17
     b88:	0f 91       	pop	r16
     b8a:	ff 90       	pop	r15
     b8c:	ef 90       	pop	r14
     b8e:	df 90       	pop	r13
     b90:	cf 90       	pop	r12
     b92:	bf 90       	pop	r11
     b94:	af 90       	pop	r10
     b96:	9f 90       	pop	r9
     b98:	8f 90       	pop	r8
     b9a:	7f 90       	pop	r7
     b9c:	6f 90       	pop	r6
     b9e:	5f 90       	pop	r5
     ba0:	4f 90       	pop	r4
     ba2:	08 95       	ret

00000ba4 <processTempUpdate>:
		}
 		keyEventExecute();
	}
}
void processTempUpdate(void)
{
     ba4:	4f 92       	push	r4
     ba6:	5f 92       	push	r5
     ba8:	6f 92       	push	r6
     baa:	7f 92       	push	r7
     bac:	af 92       	push	r10
     bae:	bf 92       	push	r11
     bb0:	cf 92       	push	r12
     bb2:	df 92       	push	r13
     bb4:	ef 92       	push	r14
     bb6:	ff 92       	push	r15
     bb8:	0f 93       	push	r16
     bba:	1f 93       	push	r17
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	28 97       	sbiw	r28, 0x08	; 8
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	f8 94       	cli
     bca:	de bf       	out	0x3e, r29	; 62
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	cd bf       	out	0x3d, r28	; 61

	uint16_t recTempData = lastUpdatedTemp;
     bd0:	20 91 dc 00 	lds	r18, 0x00DC	; 0x8000dc <lastUpdatedTemp>
     bd4:	30 91 dd 00 	lds	r19, 0x00DD	; 0x8000dd <lastUpdatedTemp+0x1>
     bd8:	3a 83       	std	Y+2, r19	; 0x02
     bda:	29 83       	std	Y+1, r18	; 0x01

	if(recTempData == 0x3030) // this is error and print it on lcd
     bdc:	20 33       	cpi	r18, 0x30	; 48
     bde:	30 43       	sbci	r19, 0x30	; 48
     be0:	79 f4       	brne	.+30     	; 0xc00 <processTempUpdate+0x5c>
	{
		if(flagDebugMode)
     be2:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <flagDebugMode>
     be6:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <flagDebugMode+0x1>
     bea:	89 2b       	or	r24, r25
     bec:	09 f4       	brne	.+2      	; 0xbf0 <processTempUpdate+0x4c>
     bee:	81 c1       	rjmp	.+770    	; 0xef2 <processTempUpdate+0x34e>
		{
			LCD_location(1,16);
     bf0:	60 e1       	ldi	r22, 0x10	; 16
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
			LCD_write('E');
     bf8:	85 e4       	ldi	r24, 0x45	; 69
     bfa:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
     bfe:	79 c1       	rjmp	.+754    	; 0xef2 <processTempUpdate+0x34e>
		}
 		return;
 	}

	if((recTempData > CUR_TEMP_HIGH_THRESHOLD) || (recTempData < CUR_TEMP_LOW_THRESHOLD))// this is error and print it on lcd
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	9a 81       	ldd	r25, Y+2	; 0x02
     c04:	86 59       	subi	r24, 0x96	; 150
     c06:	91 09       	sbc	r25, r1
     c08:	81 39       	cpi	r24, 0x91	; 145
     c0a:	91 40       	sbci	r25, 0x01	; 1
     c0c:	78 f0       	brcs	.+30     	; 0xc2c <processTempUpdate+0x88>
	{
		if(flagDebugMode)
     c0e:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <flagDebugMode>
     c12:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <flagDebugMode+0x1>
     c16:	89 2b       	or	r24, r25
     c18:	09 f4       	brne	.+2      	; 0xc1c <processTempUpdate+0x78>
     c1a:	6b c1       	rjmp	.+726    	; 0xef2 <processTempUpdate+0x34e>
		{
			LCD_location(1,16);
     c1c:	60 e1       	ldi	r22, 0x10	; 16
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
			LCD_write('R');
     c24:	82 e5       	ldi	r24, 0x52	; 82
     c26:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
     c2a:	63 c1       	rjmp	.+710    	; 0xef2 <processTempUpdate+0x34e>
		}
		return;
	}

	if((prevTemp != 0) && (((prevTemp -20) > recTempData) || ((prevTemp + 20) < recTempData)))// this is error and print it on lcd
     c2c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <prevTemp>
     c30:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <prevTemp+0x1>
     c34:	00 97       	sbiw	r24, 0x00	; 0
     c36:	81 f1       	breq	.+96     	; 0xc98 <processTempUpdate+0xf4>
     c38:	9c 01       	movw	r18, r24
     c3a:	24 51       	subi	r18, 0x14	; 20
     c3c:	31 09       	sbc	r19, r1
     c3e:	49 81       	ldd	r20, Y+1	; 0x01
     c40:	5a 81       	ldd	r21, Y+2	; 0x02
     c42:	42 17       	cp	r20, r18
     c44:	53 07       	cpc	r21, r19
     c46:	20 f0       	brcs	.+8      	; 0xc50 <processTempUpdate+0xac>
     c48:	44 96       	adiw	r24, 0x14	; 20
     c4a:	84 17       	cp	r24, r20
     c4c:	95 07       	cpc	r25, r21
     c4e:	20 f5       	brcc	.+72     	; 0xc98 <processTempUpdate+0xf4>
	{
		if(flagDebugMode)
     c50:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <flagDebugMode>
     c54:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <flagDebugMode+0x1>
     c58:	89 2b       	or	r24, r25
     c5a:	39 f0       	breq	.+14     	; 0xc6a <processTempUpdate+0xc6>
		{
			LCD_location(1,16);
     c5c:	60 e1       	ldi	r22, 0x10	; 16
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
			LCD_write('F');
     c64:	86 e4       	ldi	r24, 0x46	; 70
     c66:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
		}
	
		fcntfilter++;
     c6a:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <fcntfilter>
     c6e:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <fcntfilter+0x1>
     c72:	01 96       	adiw	r24, 0x01	; 1
     c74:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <fcntfilter+0x1>
     c78:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <fcntfilter>
		
		if(fcntfilter > 10)
     c7c:	0b 97       	sbiw	r24, 0x0b	; 11
     c7e:	08 f4       	brcc	.+2      	; 0xc82 <processTempUpdate+0xde>
     c80:	38 c1       	rjmp	.+624    	; 0xef2 <processTempUpdate+0x34e>
		{
			fcntfilter = 0;
     c82:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <fcntfilter+0x1>
     c86:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <fcntfilter>
			prevTemp = recTempData;
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	9a 81       	ldd	r25, Y+2	; 0x02
     c8e:	90 93 e3 00 	sts	0x00E3, r25	; 0x8000e3 <prevTemp+0x1>
     c92:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <prevTemp>
     c96:	2d c1       	rjmp	.+602    	; 0xef2 <processTempUpdate+0x34e>
		}
		return;
	}
else
{
	fcntfilter = 0;
     c98:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <fcntfilter+0x1>
     c9c:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <fcntfilter>
}

	if(flagDebugMode)
     ca0:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <flagDebugMode>
     ca4:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <flagDebugMode+0x1>
     ca8:	89 2b       	or	r24, r25
     caa:	39 f0       	breq	.+14     	; 0xcba <processTempUpdate+0x116>
	{
		LCD_location(1,16);
     cac:	60 e1       	ldi	r22, 0x10	; 16
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		LCD_write('K');
     cb4:	8b e4       	ldi	r24, 0x4B	; 75
     cb6:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
	}

	prevTemp = recTempData;
     cba:	29 81       	ldd	r18, Y+1	; 0x01
     cbc:	3a 81       	ldd	r19, Y+2	; 0x02
     cbe:	30 93 e3 00 	sts	0x00E3, r19	; 0x8000e3 <prevTemp+0x1>
     cc2:	20 93 e2 00 	sts	0x00E2, r18	; 0x8000e2 <prevTemp>
	currTemp = recTempData;
     cc6:	30 93 4f 01 	sts	0x014F, r19	; 0x80014f <currTemp+0x1>
     cca:	20 93 4e 01 	sts	0x014E, r18	; 0x80014e <currTemp>
	LCD_location(1,12);
     cce:	6c e0       	ldi	r22, 0x0C	; 12
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
	LCD_showvalue(((float) currTemp));
     cd6:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <currTemp>
     cda:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <currTemp+0x1>
     cde:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_showvalue>
	
	if(flagDebugMode)
     ce2:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <flagDebugMode>
     ce6:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <flagDebugMode+0x1>
     cea:	89 2b       	or	r24, r25
     cec:	09 f4       	brne	.+2      	; 0xcf0 <processTempUpdate+0x14c>
     cee:	82 c0       	rjmp	.+260    	; 0xdf4 <processTempUpdate+0x250>
	{
		displayDebugInfo(pid_Controller(((float) (setTemp/10)), ((float) (currTemp/10)), ((float) (setKp/10)), ((float) (setKi/10)), ((float) (setKd/10))));
     cf0:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <setKd>
     cf4:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <setKd+0x1>
     cf8:	ad ec       	ldi	r26, 0xCD	; 205
     cfa:	bc ec       	ldi	r27, 0xCC	; 204
     cfc:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__umulhisi3>
     d00:	7c 01       	movw	r14, r24
     d02:	f6 94       	lsr	r15
     d04:	e7 94       	ror	r14
     d06:	f6 94       	lsr	r15
     d08:	e7 94       	ror	r14
     d0a:	f6 94       	lsr	r15
     d0c:	e7 94       	ror	r14
     d0e:	20 91 e7 00 	lds	r18, 0x00E7	; 0x8000e7 <setKi>
     d12:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <setKi+0x1>
     d16:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__umulhisi3>
     d1a:	ac 01       	movw	r20, r24
     d1c:	56 95       	lsr	r21
     d1e:	47 95       	ror	r20
     d20:	56 95       	lsr	r21
     d22:	47 95       	ror	r20
     d24:	56 95       	lsr	r21
     d26:	47 95       	ror	r20
     d28:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <setKp>
     d2c:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <setKp+0x1>
     d30:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__umulhisi3>
     d34:	3c 01       	movw	r6, r24
     d36:	76 94       	lsr	r7
     d38:	67 94       	ror	r6
     d3a:	76 94       	lsr	r7
     d3c:	67 94       	ror	r6
     d3e:	76 94       	lsr	r7
     d40:	67 94       	ror	r6
     d42:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <currTemp>
     d46:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <currTemp+0x1>
     d4a:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__umulhisi3>
     d4e:	96 95       	lsr	r25
     d50:	87 95       	ror	r24
     d52:	96 95       	lsr	r25
     d54:	87 95       	ror	r24
     d56:	96 95       	lsr	r25
     d58:	87 95       	ror	r24
     d5a:	9e 83       	std	Y+6, r25	; 0x06
     d5c:	8d 83       	std	Y+5, r24	; 0x05
     d5e:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     d62:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     d66:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__umulhisi3>
     d6a:	8c 01       	movw	r16, r24
     d6c:	16 95       	lsr	r17
     d6e:	07 95       	ror	r16
     d70:	16 95       	lsr	r17
     d72:	07 95       	ror	r16
     d74:	16 95       	lsr	r17
     d76:	07 95       	ror	r16
     d78:	ba 01       	movw	r22, r20
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__floatunsisf>
     d82:	5b 01       	movw	r10, r22
     d84:	6c 01       	movw	r12, r24
     d86:	b3 01       	movw	r22, r6
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__floatunsisf>
     d90:	69 83       	std	Y+1, r22	; 0x01
     d92:	7a 83       	std	Y+2, r23	; 0x02
     d94:	8b 83       	std	Y+3, r24	; 0x03
     d96:	9c 83       	std	Y+4, r25	; 0x04
     d98:	4d 81       	ldd	r20, Y+5	; 0x05
     d9a:	5e 81       	ldd	r21, Y+6	; 0x06
     d9c:	ba 01       	movw	r22, r20
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__floatunsisf>
     da6:	6d 83       	std	Y+5, r22	; 0x05
     da8:	7e 83       	std	Y+6, r23	; 0x06
     daa:	8f 83       	std	Y+7, r24	; 0x07
     dac:	98 87       	std	Y+8, r25	; 0x08
     dae:	b8 01       	movw	r22, r16
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__floatunsisf>
     db8:	2b 01       	movw	r4, r22
     dba:	3c 01       	movw	r6, r24
     dbc:	b7 01       	movw	r22, r14
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__floatunsisf>
     dc6:	9f 93       	push	r25
     dc8:	8f 93       	push	r24
     dca:	7f 93       	push	r23
     dcc:	6f 93       	push	r22
     dce:	e9 80       	ldd	r14, Y+1	; 0x01
     dd0:	fa 80       	ldd	r15, Y+2	; 0x02
     dd2:	0b 81       	ldd	r16, Y+3	; 0x03
     dd4:	1c 81       	ldd	r17, Y+4	; 0x04
     dd6:	2d 81       	ldd	r18, Y+5	; 0x05
     dd8:	3e 81       	ldd	r19, Y+6	; 0x06
     dda:	4f 81       	ldd	r20, Y+7	; 0x07
     ddc:	58 85       	ldd	r21, Y+8	; 0x08
     dde:	c3 01       	movw	r24, r6
     de0:	b2 01       	movw	r22, r4
     de2:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <pid_Controller>
     de6:	0e 94 c1 02 	call	0x582	; 0x582 <displayDebugInfo>
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	7f c0       	rjmp	.+254    	; 0xef2 <processTempUpdate+0x34e>
	}
	else
	{
		pid_Controller(((float) (setTemp/10)), ((float) (currTemp/10)), ((float) (setKp/10)), ((float) (setKi/10)), ((float) (setKd/10)));
     df4:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <setKd>
     df8:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <setKd+0x1>
     dfc:	ad ec       	ldi	r26, 0xCD	; 205
     dfe:	bc ec       	ldi	r27, 0xCC	; 204
     e00:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__umulhisi3>
     e04:	8c 01       	movw	r16, r24
     e06:	16 95       	lsr	r17
     e08:	07 95       	ror	r16
     e0a:	16 95       	lsr	r17
     e0c:	07 95       	ror	r16
     e0e:	16 95       	lsr	r17
     e10:	07 95       	ror	r16
     e12:	20 91 e7 00 	lds	r18, 0x00E7	; 0x8000e7 <setKi>
     e16:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <setKi+0x1>
     e1a:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__umulhisi3>
     e1e:	ac 01       	movw	r20, r24
     e20:	56 95       	lsr	r21
     e22:	47 95       	ror	r20
     e24:	56 95       	lsr	r21
     e26:	47 95       	ror	r20
     e28:	56 95       	lsr	r21
     e2a:	47 95       	ror	r20
     e2c:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <setKp>
     e30:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <setKp+0x1>
     e34:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__umulhisi3>
     e38:	96 95       	lsr	r25
     e3a:	87 95       	ror	r24
     e3c:	96 95       	lsr	r25
     e3e:	87 95       	ror	r24
     e40:	96 95       	lsr	r25
     e42:	87 95       	ror	r24
     e44:	9a 83       	std	Y+2, r25	; 0x02
     e46:	89 83       	std	Y+1, r24	; 0x01
     e48:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <currTemp>
     e4c:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <currTemp+0x1>
     e50:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__umulhisi3>
     e54:	3c 01       	movw	r6, r24
     e56:	76 94       	lsr	r7
     e58:	67 94       	ror	r6
     e5a:	76 94       	lsr	r7
     e5c:	67 94       	ror	r6
     e5e:	76 94       	lsr	r7
     e60:	67 94       	ror	r6
     e62:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     e66:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     e6a:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__umulhisi3>
     e6e:	2c 01       	movw	r4, r24
     e70:	56 94       	lsr	r5
     e72:	47 94       	ror	r4
     e74:	56 94       	lsr	r5
     e76:	47 94       	ror	r4
     e78:	56 94       	lsr	r5
     e7a:	47 94       	ror	r4
     e7c:	ba 01       	movw	r22, r20
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__floatunsisf>
     e86:	5b 01       	movw	r10, r22
     e88:	6c 01       	movw	r12, r24
     e8a:	29 81       	ldd	r18, Y+1	; 0x01
     e8c:	3a 81       	ldd	r19, Y+2	; 0x02
     e8e:	b9 01       	movw	r22, r18
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__floatunsisf>
     e98:	69 83       	std	Y+1, r22	; 0x01
     e9a:	7a 83       	std	Y+2, r23	; 0x02
     e9c:	8b 83       	std	Y+3, r24	; 0x03
     e9e:	9c 83       	std	Y+4, r25	; 0x04
     ea0:	b3 01       	movw	r22, r6
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__floatunsisf>
     eaa:	6d 83       	std	Y+5, r22	; 0x05
     eac:	7e 83       	std	Y+6, r23	; 0x06
     eae:	8f 83       	std	Y+7, r24	; 0x07
     eb0:	98 87       	std	Y+8, r25	; 0x08
     eb2:	b2 01       	movw	r22, r4
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__floatunsisf>
     ebc:	2b 01       	movw	r4, r22
     ebe:	3c 01       	movw	r6, r24
     ec0:	b8 01       	movw	r22, r16
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__floatunsisf>
     eca:	9f 93       	push	r25
     ecc:	8f 93       	push	r24
     ece:	7f 93       	push	r23
     ed0:	6f 93       	push	r22
     ed2:	e9 80       	ldd	r14, Y+1	; 0x01
     ed4:	fa 80       	ldd	r15, Y+2	; 0x02
     ed6:	0b 81       	ldd	r16, Y+3	; 0x03
     ed8:	1c 81       	ldd	r17, Y+4	; 0x04
     eda:	2d 81       	ldd	r18, Y+5	; 0x05
     edc:	3e 81       	ldd	r19, Y+6	; 0x06
     ede:	4f 81       	ldd	r20, Y+7	; 0x07
     ee0:	58 85       	ldd	r21, Y+8	; 0x08
     ee2:	c3 01       	movw	r24, r6
     ee4:	b2 01       	movw	r22, r4
     ee6:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <pid_Controller>
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
	}

} 
     ef2:	28 96       	adiw	r28, 0x08	; 8
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	df 91       	pop	r29
     f00:	cf 91       	pop	r28
     f02:	1f 91       	pop	r17
     f04:	0f 91       	pop	r16
     f06:	ff 90       	pop	r15
     f08:	ef 90       	pop	r14
     f0a:	df 90       	pop	r13
     f0c:	cf 90       	pop	r12
     f0e:	bf 90       	pop	r11
     f10:	af 90       	pop	r10
     f12:	7f 90       	pop	r7
     f14:	6f 90       	pop	r6
     f16:	5f 90       	pop	r5
     f18:	4f 90       	pop	r4
     f1a:	08 95       	ret

00000f1c <displayUserInfo>:
	}
	lastcurrentPoint = currentPoint;
	return (error);
}
void displayUserInfo(uint16_t data)
{
     f1c:	0f 93       	push	r16
     f1e:	1f 93       	push	r17
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	8c 01       	movw	r16, r24
	if(data>999)
     f26:	88 3e       	cpi	r24, 0xE8	; 232
     f28:	23 e0       	ldi	r18, 0x03	; 3
     f2a:	92 07       	cpc	r25, r18
     f2c:	78 f1       	brcs	.+94     	; 0xf8c <displayUserInfo+0x70>
	{
		LCD_Char(((data / 1000) % 10) + 0x30);
     f2e:	9c 01       	movw	r18, r24
     f30:	36 95       	lsr	r19
     f32:	27 95       	ror	r18
     f34:	36 95       	lsr	r19
     f36:	27 95       	ror	r18
     f38:	36 95       	lsr	r19
     f3a:	27 95       	ror	r18
     f3c:	a5 ec       	ldi	r26, 0xC5	; 197
     f3e:	b0 e2       	ldi	r27, 0x20	; 32
     f40:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__umulhisi3>
     f44:	ac 01       	movw	r20, r24
     f46:	52 95       	swap	r21
     f48:	42 95       	swap	r20
     f4a:	4f 70       	andi	r20, 0x0F	; 15
     f4c:	45 27       	eor	r20, r21
     f4e:	5f 70       	andi	r21, 0x0F	; 15
     f50:	45 27       	eor	r20, r21
     f52:	9a 01       	movw	r18, r20
     f54:	ad ec       	ldi	r26, 0xCD	; 205
     f56:	bc ec       	ldi	r27, 0xCC	; 204
     f58:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__umulhisi3>
     f5c:	96 95       	lsr	r25
     f5e:	87 95       	ror	r24
     f60:	96 95       	lsr	r25
     f62:	87 95       	ror	r24
     f64:	96 95       	lsr	r25
     f66:	87 95       	ror	r24
     f68:	9c 01       	movw	r18, r24
     f6a:	22 0f       	add	r18, r18
     f6c:	33 1f       	adc	r19, r19
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	82 0f       	add	r24, r18
     f7c:	93 1f       	adc	r25, r19
     f7e:	9a 01       	movw	r18, r20
     f80:	28 1b       	sub	r18, r24
     f82:	39 0b       	sbc	r19, r25
     f84:	c9 01       	movw	r24, r18
     f86:	80 5d       	subi	r24, 0xD0	; 208
     f88:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_Char>
	}
	
	LCD_write(((data / 100) % 10) + 0x30);
     f8c:	98 01       	movw	r18, r16
     f8e:	36 95       	lsr	r19
     f90:	27 95       	ror	r18
     f92:	36 95       	lsr	r19
     f94:	27 95       	ror	r18
     f96:	ab e7       	ldi	r26, 0x7B	; 123
     f98:	b4 e1       	ldi	r27, 0x14	; 20
     f9a:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__umulhisi3>
     f9e:	ac 01       	movw	r20, r24
     fa0:	56 95       	lsr	r21
     fa2:	47 95       	ror	r20
     fa4:	9a 01       	movw	r18, r20
     fa6:	ad ec       	ldi	r26, 0xCD	; 205
     fa8:	bc ec       	ldi	r27, 0xCC	; 204
     faa:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__umulhisi3>
     fae:	96 95       	lsr	r25
     fb0:	87 95       	ror	r24
     fb2:	96 95       	lsr	r25
     fb4:	87 95       	ror	r24
     fb6:	96 95       	lsr	r25
     fb8:	87 95       	ror	r24
     fba:	9c 01       	movw	r18, r24
     fbc:	22 0f       	add	r18, r18
     fbe:	33 1f       	adc	r19, r19
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	82 0f       	add	r24, r18
     fce:	93 1f       	adc	r25, r19
     fd0:	9a 01       	movw	r18, r20
     fd2:	28 1b       	sub	r18, r24
     fd4:	39 0b       	sbc	r19, r25
     fd6:	c9 01       	movw	r24, r18
     fd8:	80 5d       	subi	r24, 0xD0	; 208
     fda:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
	LCD_write(((data / 10) % 10) + 0x30);
     fde:	98 01       	movw	r18, r16
     fe0:	ad ec       	ldi	r26, 0xCD	; 205
     fe2:	bc ec       	ldi	r27, 0xCC	; 204
     fe4:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__umulhisi3>
     fe8:	ec 01       	movw	r28, r24
     fea:	d6 95       	lsr	r29
     fec:	c7 95       	ror	r28
     fee:	d6 95       	lsr	r29
     ff0:	c7 95       	ror	r28
     ff2:	d6 95       	lsr	r29
     ff4:	c7 95       	ror	r28
     ff6:	9e 01       	movw	r18, r28
     ff8:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__umulhisi3>
     ffc:	96 95       	lsr	r25
     ffe:	87 95       	ror	r24
    1000:	96 95       	lsr	r25
    1002:	87 95       	ror	r24
    1004:	96 95       	lsr	r25
    1006:	87 95       	ror	r24
    1008:	9c 01       	movw	r18, r24
    100a:	22 0f       	add	r18, r18
    100c:	33 1f       	adc	r19, r19
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	82 0f       	add	r24, r18
    101c:	93 1f       	adc	r25, r19
    101e:	9e 01       	movw	r18, r28
    1020:	28 1b       	sub	r18, r24
    1022:	39 0b       	sbc	r19, r25
    1024:	c9 01       	movw	r24, r18
    1026:	80 5d       	subi	r24, 0xD0	; 208
    1028:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
	LCD_Char('.');
    102c:	8e e2       	ldi	r24, 0x2E	; 46
    102e:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_Char>
	LCD_write(((data / 1) % 10) + 0x30);
    1032:	ce 01       	movw	r24, r28
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	cc 0f       	add	r28, r28
    103a:	dd 1f       	adc	r29, r29
    103c:	cc 0f       	add	r28, r28
    103e:	dd 1f       	adc	r29, r29
    1040:	cc 0f       	add	r28, r28
    1042:	dd 1f       	adc	r29, r29
    1044:	c8 0f       	add	r28, r24
    1046:	d9 1f       	adc	r29, r25
    1048:	c8 01       	movw	r24, r16
    104a:	8c 1b       	sub	r24, r28
    104c:	9d 0b       	sbc	r25, r29
    104e:	80 5d       	subi	r24, 0xD0	; 208
    1050:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
	LCD_Char(' ');
    1054:	80 e2       	ldi	r24, 0x20	; 32
    1056:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_Char>
}
    105a:	df 91       	pop	r29
    105c:	cf 91       	pop	r28
    105e:	1f 91       	pop	r17
    1060:	0f 91       	pop	r16
    1062:	08 95       	ret

00001064 <keyEventExecute>:
void keyEventExecute(void)
{
    1064:	cf 92       	push	r12
    1066:	df 92       	push	r13
    1068:	ef 92       	push	r14
    106a:	ff 92       	push	r15
    106c:	cf 93       	push	r28
	if((IS_KEY_INC_PRESSED) && (IS_KEY_DEC_PRESSED))
    106e:	ca 99       	sbic	0x19, 2	; 25
    1070:	04 c2       	rjmp	.+1032   	; 0x147a <keyEventExecute+0x416>
    1072:	cb 99       	sbic	0x19, 3	; 25
    1074:	02 c2       	rjmp	.+1028   	; 0x147a <keyEventExecute+0x416>
	{
		timer0_stop();
    1076:	0e 94 77 01 	call	0x2ee	; 0x2ee <timer0_stop>
		timer1_stop();
    107a:	0e 94 9d 01 	call	0x33a	; 0x33a <timer1_stop>
		LCD_Clear();
    107e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_Clear>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1082:	2f ef       	ldi	r18, 0xFF	; 255
    1084:	80 e7       	ldi	r24, 0x70	; 112
    1086:	92 e0       	ldi	r25, 0x02	; 2
    1088:	21 50       	subi	r18, 0x01	; 1
    108a:	80 40       	sbci	r24, 0x00	; 0
    108c:	90 40       	sbci	r25, 0x00	; 0
    108e:	e1 f7       	brne	.-8      	; 0x1088 <keyEventExecute+0x24>
    1090:	00 c0       	rjmp	.+0      	; 0x1092 <keyEventExecute+0x2e>
    1092:	00 00       	nop
		_delay_ms(50);
		
		while((!IS_KEY_INC_RELEASED) && (!IS_KEY_DEC_RELEASED));
    1094:	ca 99       	sbic	0x19, 2	; 25
    1096:	02 c0       	rjmp	.+4      	; 0x109c <keyEventExecute+0x38>
    1098:	cb 9b       	sbis	0x19, 3	; 25
    109a:	fc cf       	rjmp	.-8      	; 0x1094 <keyEventExecute+0x30>
		
		LCD_location(2,1);
    109c:	61 e0       	ldi	r22, 0x01	; 1
    109e:	82 e0       	ldi	r24, 0x02	; 2
    10a0:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		LCD_write_string("V - ");
    10a4:	8c e6       	ldi	r24, 0x6C	; 108
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
		LCD_write(((VERSION / 100) % 10) + 0x30);
    10ac:	80 e3       	ldi	r24, 0x30	; 48
    10ae:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
		LCD_write_string(".");
    10b2:	81 e7       	ldi	r24, 0x71	; 113
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
		LCD_write(((VERSION / 10) % 10) + 0x30);
    10ba:	81 e3       	ldi	r24, 0x31	; 49
    10bc:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
		LCD_write_string(".");
    10c0:	81 e7       	ldi	r24, 0x71	; 113
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
		LCD_write(((VERSION / 1) % 10) + 0x30);
    10c8:	86 e3       	ldi	r24, 0x36	; 54
    10ca:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
		LCD_location(1,1);
    10ce:	61 e0       	ldi	r22, 0x01	; 1
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		LCD_write_string("Gain P = ");
    10d6:	83 e7       	ldi	r24, 0x73	; 115
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
		displayUserInfo(setKp);
    10de:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <setKp>
    10e2:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <setKp+0x1>
    10e6:	0e 94 8e 07 	call	0xf1c	; 0xf1c <displayUserInfo>
		
		uint8_t fcntSpeedInc = 0, fcntSpeedDec = 0;
    10ea:	c0 e0       	ldi	r28, 0x00	; 0
    10ec:	20 e0       	ldi	r18, 0x00	; 0
		
		while(IS_KEY_PROG_RELEASED)
    10ee:	62 c0       	rjmp	.+196    	; 0x11b4 <keyEventExecute+0x150>
		{
			if(IS_KEY_INC_PRESSED)
    10f0:	ca 99       	sbic	0x19, 2	; 25
    10f2:	2c c0       	rjmp	.+88     	; 0x114c <keyEventExecute+0xe8>
			{
				fcntSpeedDec = 0;
				setKp = setKp + 1 + fcntSpeedInc++;
    10f4:	c1 e0       	ldi	r28, 0x01	; 1
    10f6:	c2 0f       	add	r28, r18
    10f8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <setKp>
    10fc:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <setKp+0x1>
    1100:	82 0f       	add	r24, r18
    1102:	91 1d       	adc	r25, r1
    1104:	01 96       	adiw	r24, 0x01	; 1
    1106:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <setKp+0x1>
    110a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <setKp>
			
				if(setKp > K_P_HIGH)
    110e:	8d 34       	cpi	r24, 0x4D	; 77
    1110:	9d 41       	sbci	r25, 0x1D	; 29
    1112:	30 f0       	brcs	.+12     	; 0x1120 <keyEventExecute+0xbc>
					setKp = K_P_HIGH;
    1114:	8c e4       	ldi	r24, 0x4C	; 76
    1116:	9d e1       	ldi	r25, 0x1D	; 29
    1118:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <setKp+0x1>
    111c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <setKp>
			
				LCD_location(1,10);
    1120:	6a e0       	ldi	r22, 0x0A	; 10
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				displayUserInfo(setKp);
    1128:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <setKp>
    112c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <setKp+0x1>
    1130:	0e 94 8e 07 	call	0xf1c	; 0xf1c <displayUserInfo>
    1134:	8f ef       	ldi	r24, 0xFF	; 255
    1136:	94 e3       	ldi	r25, 0x34	; 52
    1138:	2c e0       	ldi	r18, 0x0C	; 12
    113a:	81 50       	subi	r24, 0x01	; 1
    113c:	90 40       	sbci	r25, 0x00	; 0
    113e:	20 40       	sbci	r18, 0x00	; 0
    1140:	e1 f7       	brne	.-8      	; 0x113a <keyEventExecute+0xd6>
    1142:	00 c0       	rjmp	.+0      	; 0x1144 <keyEventExecute+0xe0>
    1144:	00 00       	nop
		while(IS_KEY_PROG_RELEASED)
		{
			if(IS_KEY_INC_PRESSED)
			{
				fcntSpeedDec = 0;
				setKp = setKp + 1 + fcntSpeedInc++;
    1146:	2c 2f       	mov	r18, r28
		
		while(IS_KEY_PROG_RELEASED)
		{
			if(IS_KEY_INC_PRESSED)
			{
				fcntSpeedDec = 0;
    1148:	c0 e0       	ldi	r28, 0x00	; 0
    114a:	30 c0       	rjmp	.+96     	; 0x11ac <keyEventExecute+0x148>
				LCD_location(1,10);
				displayUserInfo(setKp);
				_delay_ms(250);
			}
		
			else if(IS_KEY_DEC_PRESSED)
    114c:	cb 99       	sbic	0x19, 3	; 25
    114e:	2e c0       	rjmp	.+92     	; 0x11ac <keyEventExecute+0x148>
			{
				fcntSpeedInc = 0;
				if(setKp > (K_P_LOW + 1 + fcntSpeedDec))
    1150:	2c 2f       	mov	r18, r28
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	25 5f       	subi	r18, 0xF5	; 245
    1156:	3f 4f       	sbci	r19, 0xFF	; 255
    1158:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <setKp>
    115c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <setKp+0x1>
    1160:	28 17       	cp	r18, r24
    1162:	39 07       	cpc	r19, r25
    1164:	48 f4       	brcc	.+18     	; 0x1178 <keyEventExecute+0x114>
				setKp = setKp - 1 - fcntSpeedDec++;
    1166:	8c 1b       	sub	r24, r28
    1168:	91 09       	sbc	r25, r1
    116a:	01 97       	sbiw	r24, 0x01	; 1
    116c:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <setKp+0x1>
    1170:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <setKp>
    1174:	cf 5f       	subi	r28, 0xFF	; 255
    1176:	06 c0       	rjmp	.+12     	; 0x1184 <keyEventExecute+0x120>
			
				else
				setKp = K_P_LOW;
    1178:	8a e0       	ldi	r24, 0x0A	; 10
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <setKp+0x1>
    1180:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <setKp>
			
				LCD_location(1,10);
    1184:	6a e0       	ldi	r22, 0x0A	; 10
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				displayUserInfo(setKp);
    118c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <setKp>
    1190:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <setKp+0x1>
    1194:	0e 94 8e 07 	call	0xf1c	; 0xf1c <displayUserInfo>
    1198:	8f ef       	ldi	r24, 0xFF	; 255
    119a:	94 e3       	ldi	r25, 0x34	; 52
    119c:	2c e0       	ldi	r18, 0x0C	; 12
    119e:	81 50       	subi	r24, 0x01	; 1
    11a0:	90 40       	sbci	r25, 0x00	; 0
    11a2:	20 40       	sbci	r18, 0x00	; 0
    11a4:	e1 f7       	brne	.-8      	; 0x119e <keyEventExecute+0x13a>
    11a6:	00 c0       	rjmp	.+0      	; 0x11a8 <keyEventExecute+0x144>
    11a8:	00 00       	nop
				_delay_ms(250);
			}
		
			else if(IS_KEY_DEC_PRESSED)
			{
				fcntSpeedInc = 0;
    11aa:	20 e0       	ldi	r18, 0x00	; 0
				LCD_location(1,10);
				displayUserInfo(setKp);
				_delay_ms(250);
			}
		
			if(IS_KEY_INC_RELEASED)
    11ac:	ca 99       	sbic	0x19, 2	; 25
			fcntSpeedInc = 0;
    11ae:	20 e0       	ldi	r18, 0x00	; 0
			
			if(IS_KEY_DEC_RELEASED)
    11b0:	cb 99       	sbic	0x19, 3	; 25
			fcntSpeedDec = 0;
    11b2:	c0 e0       	ldi	r28, 0x00	; 0
		LCD_write_string("Gain P = ");
		displayUserInfo(setKp);
		
		uint8_t fcntSpeedInc = 0, fcntSpeedDec = 0;
		
		while(IS_KEY_PROG_RELEASED)
    11b4:	c9 99       	sbic	0x19, 1	; 25
    11b6:	9c cf       	rjmp	.-200    	; 0x10f0 <keyEventExecute+0x8c>
			
			if(IS_KEY_DEC_RELEASED)
			fcntSpeedDec = 0;
		}
		
		eeprom_write_word(EEPROM_K_P_ADD, setKp);
    11b8:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <setKp>
    11bc:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <setKp+0x1>
    11c0:	86 e9       	ldi	r24, 0x96	; 150
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	0e 94 4f 12 	call	0x249e	; 0x249e <eeprom_write_word>
    11c8:	8f ef       	ldi	r24, 0xFF	; 255
    11ca:	90 e7       	ldi	r25, 0x70	; 112
    11cc:	22 e0       	ldi	r18, 0x02	; 2
    11ce:	81 50       	subi	r24, 0x01	; 1
    11d0:	90 40       	sbci	r25, 0x00	; 0
    11d2:	20 40       	sbci	r18, 0x00	; 0
    11d4:	e1 f7       	brne	.-8      	; 0x11ce <keyEventExecute+0x16a>
    11d6:	00 c0       	rjmp	.+0      	; 0x11d8 <keyEventExecute+0x174>
    11d8:	00 00       	nop
		_delay_ms(50);
		while(IS_KEY_PROG_PRESSED);
    11da:	c9 9b       	sbis	0x19, 1	; 25
    11dc:	fe cf       	rjmp	.-4      	; 0x11da <keyEventExecute+0x176>
		
		fcntSpeedInc = 0, fcntSpeedDec = 0;
		
		LCD_location(1,1);
    11de:	61 e0       	ldi	r22, 0x01	; 1
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		LCD_write_string("Gain I = ");
    11e6:	8d e7       	ldi	r24, 0x7D	; 125
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
		displayUserInfo(setKi);
    11ee:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <setKi>
    11f2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <setKi+0x1>
    11f6:	0e 94 8e 07 	call	0xf1c	; 0xf1c <displayUserInfo>
		
		eeprom_write_word(EEPROM_K_P_ADD, setKp);
		_delay_ms(50);
		while(IS_KEY_PROG_PRESSED);
		
		fcntSpeedInc = 0, fcntSpeedDec = 0;
    11fa:	c0 e0       	ldi	r28, 0x00	; 0
    11fc:	20 e0       	ldi	r18, 0x00	; 0
		
		LCD_location(1,1);
		LCD_write_string("Gain I = ");
		displayUserInfo(setKi);
		
		while(IS_KEY_PROG_RELEASED)
    11fe:	60 c0       	rjmp	.+192    	; 0x12c0 <keyEventExecute+0x25c>
		{
			if(IS_KEY_INC_PRESSED)
    1200:	ca 99       	sbic	0x19, 2	; 25
    1202:	2c c0       	rjmp	.+88     	; 0x125c <keyEventExecute+0x1f8>
			{
				fcntSpeedDec = 0;
				setKi = setKi + 1 + fcntSpeedInc++;
    1204:	c1 e0       	ldi	r28, 0x01	; 1
    1206:	c2 0f       	add	r28, r18
    1208:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <setKi>
    120c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <setKi+0x1>
    1210:	82 0f       	add	r24, r18
    1212:	91 1d       	adc	r25, r1
    1214:	01 96       	adiw	r24, 0x01	; 1
    1216:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <setKi+0x1>
    121a:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <setKi>
				
				if(setKi > K_I_HIGH)
    121e:	85 3f       	cpi	r24, 0xF5	; 245
    1220:	91 40       	sbci	r25, 0x01	; 1
    1222:	30 f0       	brcs	.+12     	; 0x1230 <keyEventExecute+0x1cc>
				setKi = K_I_HIGH;
    1224:	84 ef       	ldi	r24, 0xF4	; 244
    1226:	91 e0       	ldi	r25, 0x01	; 1
    1228:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <setKi+0x1>
    122c:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <setKi>
				
				LCD_location(1,10);
    1230:	6a e0       	ldi	r22, 0x0A	; 10
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				displayUserInfo(setKi);
    1238:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <setKi>
    123c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <setKi+0x1>
    1240:	0e 94 8e 07 	call	0xf1c	; 0xf1c <displayUserInfo>
    1244:	8f ef       	ldi	r24, 0xFF	; 255
    1246:	94 e3       	ldi	r25, 0x34	; 52
    1248:	2c e0       	ldi	r18, 0x0C	; 12
    124a:	81 50       	subi	r24, 0x01	; 1
    124c:	90 40       	sbci	r25, 0x00	; 0
    124e:	20 40       	sbci	r18, 0x00	; 0
    1250:	e1 f7       	brne	.-8      	; 0x124a <keyEventExecute+0x1e6>
    1252:	00 c0       	rjmp	.+0      	; 0x1254 <keyEventExecute+0x1f0>
    1254:	00 00       	nop
		while(IS_KEY_PROG_RELEASED)
		{
			if(IS_KEY_INC_PRESSED)
			{
				fcntSpeedDec = 0;
				setKi = setKi + 1 + fcntSpeedInc++;
    1256:	2c 2f       	mov	r18, r28
		
		while(IS_KEY_PROG_RELEASED)
		{
			if(IS_KEY_INC_PRESSED)
			{
				fcntSpeedDec = 0;
    1258:	c0 e0       	ldi	r28, 0x00	; 0
    125a:	2e c0       	rjmp	.+92     	; 0x12b8 <keyEventExecute+0x254>
				LCD_location(1,10);
				displayUserInfo(setKi);
				_delay_ms(250);
			}
			
			else if(IS_KEY_DEC_PRESSED)
    125c:	cb 99       	sbic	0x19, 3	; 25
    125e:	2c c0       	rjmp	.+88     	; 0x12b8 <keyEventExecute+0x254>
			{
				fcntSpeedInc = 0;
				if(setKi > (K_I_LOW + 1 + fcntSpeedDec))
    1260:	2c 2f       	mov	r18, r28
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	2f 5f       	subi	r18, 0xFF	; 255
    1266:	3f 4f       	sbci	r19, 0xFF	; 255
    1268:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <setKi>
    126c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <setKi+0x1>
    1270:	28 17       	cp	r18, r24
    1272:	39 07       	cpc	r19, r25
    1274:	48 f4       	brcc	.+18     	; 0x1288 <keyEventExecute+0x224>
				setKi = setKi - 1 - fcntSpeedDec++;
    1276:	8c 1b       	sub	r24, r28
    1278:	91 09       	sbc	r25, r1
    127a:	01 97       	sbiw	r24, 0x01	; 1
    127c:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <setKi+0x1>
    1280:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <setKi>
    1284:	cf 5f       	subi	r28, 0xFF	; 255
    1286:	04 c0       	rjmp	.+8      	; 0x1290 <keyEventExecute+0x22c>
				
				else
				setKi = K_I_LOW;
    1288:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <setKi+0x1>
    128c:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <setKi>
				
				LCD_location(1,10);
    1290:	6a e0       	ldi	r22, 0x0A	; 10
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				displayUserInfo(setKi);
    1298:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <setKi>
    129c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <setKi+0x1>
    12a0:	0e 94 8e 07 	call	0xf1c	; 0xf1c <displayUserInfo>
    12a4:	8f ef       	ldi	r24, 0xFF	; 255
    12a6:	94 e3       	ldi	r25, 0x34	; 52
    12a8:	2c e0       	ldi	r18, 0x0C	; 12
    12aa:	81 50       	subi	r24, 0x01	; 1
    12ac:	90 40       	sbci	r25, 0x00	; 0
    12ae:	20 40       	sbci	r18, 0x00	; 0
    12b0:	e1 f7       	brne	.-8      	; 0x12aa <keyEventExecute+0x246>
    12b2:	00 c0       	rjmp	.+0      	; 0x12b4 <keyEventExecute+0x250>
    12b4:	00 00       	nop
				_delay_ms(250);
			}
			
			else if(IS_KEY_DEC_PRESSED)
			{
				fcntSpeedInc = 0;
    12b6:	20 e0       	ldi	r18, 0x00	; 0
				LCD_location(1,10);
				displayUserInfo(setKi);
				_delay_ms(250);
			}
			
			if(IS_KEY_INC_RELEASED)
    12b8:	ca 99       	sbic	0x19, 2	; 25
			fcntSpeedInc = 0;
    12ba:	20 e0       	ldi	r18, 0x00	; 0
			
			if(IS_KEY_DEC_RELEASED)
    12bc:	cb 99       	sbic	0x19, 3	; 25
			fcntSpeedDec = 0;
    12be:	c0 e0       	ldi	r28, 0x00	; 0
		
		LCD_location(1,1);
		LCD_write_string("Gain I = ");
		displayUserInfo(setKi);
		
		while(IS_KEY_PROG_RELEASED)
    12c0:	c9 99       	sbic	0x19, 1	; 25
    12c2:	9e cf       	rjmp	.-196    	; 0x1200 <keyEventExecute+0x19c>
			
			if(IS_KEY_DEC_RELEASED)
			fcntSpeedDec = 0;
		}
		
		eeprom_write_word(EEPROM_K_I_ADD, setKi);
    12c4:	60 91 e7 00 	lds	r22, 0x00E7	; 0x8000e7 <setKi>
    12c8:	70 91 e8 00 	lds	r23, 0x00E8	; 0x8000e8 <setKi+0x1>
    12cc:	8a ea       	ldi	r24, 0xAA	; 170
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	0e 94 4f 12 	call	0x249e	; 0x249e <eeprom_write_word>
    12d4:	8f ef       	ldi	r24, 0xFF	; 255
    12d6:	94 e3       	ldi	r25, 0x34	; 52
    12d8:	2c e0       	ldi	r18, 0x0C	; 12
    12da:	81 50       	subi	r24, 0x01	; 1
    12dc:	90 40       	sbci	r25, 0x00	; 0
    12de:	20 40       	sbci	r18, 0x00	; 0
    12e0:	e1 f7       	brne	.-8      	; 0x12da <keyEventExecute+0x276>
    12e2:	00 c0       	rjmp	.+0      	; 0x12e4 <keyEventExecute+0x280>
    12e4:	00 00       	nop
		_delay_ms(250);
		while(IS_KEY_PROG_PRESSED);
    12e6:	c9 9b       	sbis	0x19, 1	; 25
    12e8:	fe cf       	rjmp	.-4      	; 0x12e6 <keyEventExecute+0x282>
		
		fcntSpeedInc = 0, fcntSpeedDec = 0;
		
		LCD_location(1,1);
    12ea:	61 e0       	ldi	r22, 0x01	; 1
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		LCD_write_string("Gain D = ");
    12f2:	87 e8       	ldi	r24, 0x87	; 135
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
		displayUserInfo(setKd);
    12fa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <setKd>
    12fe:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <setKd+0x1>
    1302:	0e 94 8e 07 	call	0xf1c	; 0xf1c <displayUserInfo>
		
		eeprom_write_word(EEPROM_K_I_ADD, setKi);
		_delay_ms(250);
		while(IS_KEY_PROG_PRESSED);
		
		fcntSpeedInc = 0, fcntSpeedDec = 0;
    1306:	c0 e0       	ldi	r28, 0x00	; 0
    1308:	20 e0       	ldi	r18, 0x00	; 0
		
		LCD_location(1,1);
		LCD_write_string("Gain D = ");
		displayUserInfo(setKd);
		
		while(IS_KEY_PROG_RELEASED)
    130a:	60 c0       	rjmp	.+192    	; 0x13cc <keyEventExecute+0x368>
		{
			if(IS_KEY_INC_PRESSED)
    130c:	ca 99       	sbic	0x19, 2	; 25
    130e:	2c c0       	rjmp	.+88     	; 0x1368 <keyEventExecute+0x304>
			{
				fcntSpeedDec = 0;
				setKd = setKd + 1 + fcntSpeedInc++;
    1310:	c1 e0       	ldi	r28, 0x01	; 1
    1312:	c2 0f       	add	r28, r18
    1314:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <setKd>
    1318:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <setKd+0x1>
    131c:	82 0f       	add	r24, r18
    131e:	91 1d       	adc	r25, r1
    1320:	01 96       	adiw	r24, 0x01	; 1
    1322:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <setKd+0x1>
    1326:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <setKd>
				
				if(setKd > K_D_HIGH)
    132a:	85 3f       	cpi	r24, 0xF5	; 245
    132c:	91 40       	sbci	r25, 0x01	; 1
    132e:	30 f0       	brcs	.+12     	; 0x133c <keyEventExecute+0x2d8>
				setKd = K_D_HIGH;
    1330:	84 ef       	ldi	r24, 0xF4	; 244
    1332:	91 e0       	ldi	r25, 0x01	; 1
    1334:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <setKd+0x1>
    1338:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <setKd>
				
				LCD_location(1,10);
    133c:	6a e0       	ldi	r22, 0x0A	; 10
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				displayUserInfo(setKd);
    1344:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <setKd>
    1348:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <setKd+0x1>
    134c:	0e 94 8e 07 	call	0xf1c	; 0xf1c <displayUserInfo>
    1350:	8f ef       	ldi	r24, 0xFF	; 255
    1352:	94 e3       	ldi	r25, 0x34	; 52
    1354:	2c e0       	ldi	r18, 0x0C	; 12
    1356:	81 50       	subi	r24, 0x01	; 1
    1358:	90 40       	sbci	r25, 0x00	; 0
    135a:	20 40       	sbci	r18, 0x00	; 0
    135c:	e1 f7       	brne	.-8      	; 0x1356 <keyEventExecute+0x2f2>
    135e:	00 c0       	rjmp	.+0      	; 0x1360 <keyEventExecute+0x2fc>
    1360:	00 00       	nop
		while(IS_KEY_PROG_RELEASED)
		{
			if(IS_KEY_INC_PRESSED)
			{
				fcntSpeedDec = 0;
				setKd = setKd + 1 + fcntSpeedInc++;
    1362:	2c 2f       	mov	r18, r28
		
		while(IS_KEY_PROG_RELEASED)
		{
			if(IS_KEY_INC_PRESSED)
			{
				fcntSpeedDec = 0;
    1364:	c0 e0       	ldi	r28, 0x00	; 0
    1366:	2e c0       	rjmp	.+92     	; 0x13c4 <keyEventExecute+0x360>
				LCD_location(1,10);
				displayUserInfo(setKd);
				_delay_ms(250);
			}
			
			else if(IS_KEY_DEC_PRESSED)
    1368:	cb 99       	sbic	0x19, 3	; 25
    136a:	2c c0       	rjmp	.+88     	; 0x13c4 <keyEventExecute+0x360>
			{
				fcntSpeedInc = 0;
				if(setKd > (K_D_LOW + 1 + fcntSpeedDec))
    136c:	2c 2f       	mov	r18, r28
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	2f 5f       	subi	r18, 0xFF	; 255
    1372:	3f 4f       	sbci	r19, 0xFF	; 255
    1374:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <setKd>
    1378:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <setKd+0x1>
    137c:	28 17       	cp	r18, r24
    137e:	39 07       	cpc	r19, r25
    1380:	48 f4       	brcc	.+18     	; 0x1394 <keyEventExecute+0x330>
				setKd = setKd - 1 - fcntSpeedDec++;
    1382:	8c 1b       	sub	r24, r28
    1384:	91 09       	sbc	r25, r1
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <setKd+0x1>
    138c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <setKd>
    1390:	cf 5f       	subi	r28, 0xFF	; 255
    1392:	04 c0       	rjmp	.+8      	; 0x139c <keyEventExecute+0x338>
				
				else
				setKi = K_D_LOW;
    1394:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <setKi+0x1>
    1398:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <setKi>
				
				LCD_location(1,10);
    139c:	6a e0       	ldi	r22, 0x0A	; 10
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				displayUserInfo(setKd);
    13a4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <setKd>
    13a8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <setKd+0x1>
    13ac:	0e 94 8e 07 	call	0xf1c	; 0xf1c <displayUserInfo>
    13b0:	8f ef       	ldi	r24, 0xFF	; 255
    13b2:	94 e3       	ldi	r25, 0x34	; 52
    13b4:	2c e0       	ldi	r18, 0x0C	; 12
    13b6:	81 50       	subi	r24, 0x01	; 1
    13b8:	90 40       	sbci	r25, 0x00	; 0
    13ba:	20 40       	sbci	r18, 0x00	; 0
    13bc:	e1 f7       	brne	.-8      	; 0x13b6 <keyEventExecute+0x352>
    13be:	00 c0       	rjmp	.+0      	; 0x13c0 <keyEventExecute+0x35c>
    13c0:	00 00       	nop
				_delay_ms(250);
			}
			
			else if(IS_KEY_DEC_PRESSED)
			{
				fcntSpeedInc = 0;
    13c2:	20 e0       	ldi	r18, 0x00	; 0
				LCD_location(1,10);
				displayUserInfo(setKd);
				_delay_ms(250);
			}
			
			if(IS_KEY_INC_RELEASED)
    13c4:	ca 99       	sbic	0x19, 2	; 25
			fcntSpeedInc = 0;
    13c6:	20 e0       	ldi	r18, 0x00	; 0
			
			if(IS_KEY_DEC_RELEASED)
    13c8:	cb 99       	sbic	0x19, 3	; 25
			fcntSpeedDec = 0;
    13ca:	c0 e0       	ldi	r28, 0x00	; 0
		
		LCD_location(1,1);
		LCD_write_string("Gain D = ");
		displayUserInfo(setKd);
		
		while(IS_KEY_PROG_RELEASED)
    13cc:	c9 99       	sbic	0x19, 1	; 25
    13ce:	9e cf       	rjmp	.-196    	; 0x130c <keyEventExecute+0x2a8>
			
			if(IS_KEY_DEC_RELEASED)
			fcntSpeedDec = 0;
		}
		
		eeprom_write_word(EEPROM_K_D_ADD, setKd);
    13d0:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <setKd>
    13d4:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <setKd+0x1>
    13d8:	8e eb       	ldi	r24, 0xBE	; 190
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	0e 94 4f 12 	call	0x249e	; 0x249e <eeprom_write_word>
    13e0:	8f ef       	ldi	r24, 0xFF	; 255
    13e2:	94 e3       	ldi	r25, 0x34	; 52
    13e4:	2c e0       	ldi	r18, 0x0C	; 12
    13e6:	81 50       	subi	r24, 0x01	; 1
    13e8:	90 40       	sbci	r25, 0x00	; 0
    13ea:	20 40       	sbci	r18, 0x00	; 0
    13ec:	e1 f7       	brne	.-8      	; 0x13e6 <keyEventExecute+0x382>
    13ee:	00 c0       	rjmp	.+0      	; 0x13f0 <keyEventExecute+0x38c>
    13f0:	00 00       	nop
		_delay_ms(250);
		while(IS_KEY_PROG_PRESSED);
    13f2:	c9 9b       	sbis	0x19, 1	; 25
    13f4:	fe cf       	rjmp	.-4      	; 0x13f2 <keyEventExecute+0x38e>
		
		LCD_Clear();
    13f6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_Clear>
		
		 if(flagDebugMode)
    13fa:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <flagDebugMode>
    13fe:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <flagDebugMode+0x1>
    1402:	89 2b       	or	r24, r25
    1404:	e9 f0       	breq	.+58     	; 0x1440 <keyEventExecute+0x3dc>
		 {
			 LCD_location(1,1);
    1406:	61 e0       	ldi	r22, 0x01	; 1
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
			 LCD_write_string("         = ");
    140e:	81 e9       	ldi	r24, 0x91	; 145
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
			 LCD_showvalue(currTemp);
    1416:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <currTemp>
    141a:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <currTemp+0x1>
    141e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_showvalue>
			 LCD_location(2,1);
    1422:	61 e0       	ldi	r22, 0x01	; 1
    1424:	82 e0       	ldi	r24, 0x02	; 2
    1426:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
			 LCD_write_string("         = ");
    142a:	81 e9       	ldi	r24, 0x91	; 145
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
			 LCD_showvalue(setTemp);
    1432:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1436:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    143a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_showvalue>
    143e:	4c c1       	rjmp	.+664    	; 0x16d8 <keyEventExecute+0x674>
		 }
		 else
		 {
			LCD_location(1,1);
    1440:	61 e0       	ldi	r22, 0x01	; 1
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
			LCD_write_string("Cur Temp = ");
    1448:	8d e9       	ldi	r24, 0x9D	; 157
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
			LCD_showvalue(currTemp);
    1450:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <currTemp>
    1454:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <currTemp+0x1>
    1458:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_showvalue>
			LCD_location(2,1);
    145c:	61 e0       	ldi	r22, 0x01	; 1
    145e:	82 e0       	ldi	r24, 0x02	; 2
    1460:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
			LCD_write_string("Set Temp = ");
    1464:	89 ea       	ldi	r24, 0xA9	; 169
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
			LCD_showvalue(setTemp);
    146c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1470:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1474:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_showvalue>
    1478:	2f c1       	rjmp	.+606    	; 0x16d8 <keyEventExecute+0x674>
		 }
	}
	
	else if(IS_KEY_PROG_PRESSED)
    147a:	c9 99       	sbic	0x19, 1	; 25
    147c:	b0 c0       	rjmp	.+352    	; 0x15de <keyEventExecute+0x57a>
	{
		timer0_stop();
    147e:	0e 94 77 01 	call	0x2ee	; 0x2ee <timer0_stop>
		timer1_stop();
    1482:	0e 94 9d 01 	call	0x33a	; 0x33a <timer1_stop>
    1486:	8f ef       	ldi	r24, 0xFF	; 255
    1488:	90 e7       	ldi	r25, 0x70	; 112
    148a:	22 e0       	ldi	r18, 0x02	; 2
    148c:	81 50       	subi	r24, 0x01	; 1
    148e:	90 40       	sbci	r25, 0x00	; 0
    1490:	20 40       	sbci	r18, 0x00	; 0
    1492:	e1 f7       	brne	.-8      	; 0x148c <keyEventExecute+0x428>
    1494:	00 c0       	rjmp	.+0      	; 0x1496 <keyEventExecute+0x432>
    1496:	00 00       	nop
		_delay_ms(50);
		
		while(!IS_KEY_PROG_RELEASED);
    1498:	c9 9b       	sbis	0x19, 1	; 25
    149a:	fe cf       	rjmp	.-4      	; 0x1498 <keyEventExecute+0x434>
		
		LCD_location(2,12);
    149c:	6c e0       	ldi	r22, 0x0C	; 12
    149e:	82 e0       	ldi	r24, 0x02	; 2
    14a0:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		displayUserInfo(setTemp);
    14a4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    14a8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    14ac:	0e 94 8e 07 	call	0xf1c	; 0xf1c <displayUserInfo>
		LCD_location(2,16);
    14b0:	60 e1       	ldi	r22, 0x10	; 16
    14b2:	82 e0       	ldi	r24, 0x02	; 2
    14b4:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		LCD_write('<');
    14b8:	8c e3       	ldi	r24, 0x3C	; 60
    14ba:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
				
		uint8_t fcntSpeedInc = 0, fcntSpeedDec = 0;
    14be:	c0 e0       	ldi	r28, 0x00	; 0
    14c0:	20 e0       	ldi	r18, 0x00	; 0
		
		while(IS_KEY_ENTER_RELEASED)
    14c2:	70 c0       	rjmp	.+224    	; 0x15a4 <keyEventExecute+0x540>
		{
			if(IS_KEY_INC_PRESSED)
    14c4:	ca 99       	sbic	0x19, 2	; 25
    14c6:	33 c0       	rjmp	.+102    	; 0x152e <keyEventExecute+0x4ca>
			{
				fcntSpeedDec = 0;
				setTemp = setTemp + 1 + fcntSpeedInc++;
    14c8:	c1 e0       	ldi	r28, 0x01	; 1
    14ca:	c2 0f       	add	r28, r18
    14cc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    14d0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    14d4:	82 0f       	add	r24, r18
    14d6:	91 1d       	adc	r25, r1
    14d8:	01 96       	adiw	r24, 0x01	; 1
    14da:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    14de:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				
				if(setTemp > TEMP_HIGH)
    14e2:	83 3c       	cpi	r24, 0xC3	; 195
    14e4:	91 40       	sbci	r25, 0x01	; 1
    14e6:	30 f0       	brcs	.+12     	; 0x14f4 <keyEventExecute+0x490>
				setTemp = TEMP_HIGH;
    14e8:	82 ec       	ldi	r24, 0xC2	; 194
    14ea:	91 e0       	ldi	r25, 0x01	; 1
    14ec:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    14f0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				
				LCD_location(2,12);
    14f4:	6c e0       	ldi	r22, 0x0C	; 12
    14f6:	82 e0       	ldi	r24, 0x02	; 2
    14f8:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				displayUserInfo(setTemp);
    14fc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1500:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1504:	0e 94 8e 07 	call	0xf1c	; 0xf1c <displayUserInfo>
				LCD_location(2,16);
    1508:	60 e1       	ldi	r22, 0x10	; 16
    150a:	82 e0       	ldi	r24, 0x02	; 2
    150c:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				LCD_write('<');
    1510:	8c e3       	ldi	r24, 0x3C	; 60
    1512:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
    1516:	8f ef       	ldi	r24, 0xFF	; 255
    1518:	94 e3       	ldi	r25, 0x34	; 52
    151a:	2c e0       	ldi	r18, 0x0C	; 12
    151c:	81 50       	subi	r24, 0x01	; 1
    151e:	90 40       	sbci	r25, 0x00	; 0
    1520:	20 40       	sbci	r18, 0x00	; 0
    1522:	e1 f7       	brne	.-8      	; 0x151c <keyEventExecute+0x4b8>
    1524:	00 c0       	rjmp	.+0      	; 0x1526 <keyEventExecute+0x4c2>
    1526:	00 00       	nop
		while(IS_KEY_ENTER_RELEASED)
		{
			if(IS_KEY_INC_PRESSED)
			{
				fcntSpeedDec = 0;
				setTemp = setTemp + 1 + fcntSpeedInc++;
    1528:	2c 2f       	mov	r18, r28
		
		while(IS_KEY_ENTER_RELEASED)
		{
			if(IS_KEY_INC_PRESSED)
			{
				fcntSpeedDec = 0;
    152a:	c0 e0       	ldi	r28, 0x00	; 0
    152c:	37 c0       	rjmp	.+110    	; 0x159c <keyEventExecute+0x538>
				LCD_location(2,16);
				LCD_write('<');
				_delay_ms(250);
			}
			
			else if(IS_KEY_DEC_PRESSED)
    152e:	cb 99       	sbic	0x19, 3	; 25
    1530:	35 c0       	rjmp	.+106    	; 0x159c <keyEventExecute+0x538>
			{
				fcntSpeedInc = 0;
				if(setTemp > (TEMP_LOW + 1 + fcntSpeedDec))
    1532:	2c 2f       	mov	r18, r28
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	29 56       	subi	r18, 0x69	; 105
    1538:	3f 4f       	sbci	r19, 0xFF	; 255
    153a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    153e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1542:	28 17       	cp	r18, r24
    1544:	39 07       	cpc	r19, r25
    1546:	48 f4       	brcc	.+18     	; 0x155a <keyEventExecute+0x4f6>
				setTemp = setTemp - 1 - fcntSpeedDec++;
    1548:	8c 1b       	sub	r24, r28
    154a:	91 09       	sbc	r25, r1
    154c:	01 97       	sbiw	r24, 0x01	; 1
    154e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1552:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    1556:	cf 5f       	subi	r28, 0xFF	; 255
    1558:	06 c0       	rjmp	.+12     	; 0x1566 <keyEventExecute+0x502>
				
				else
				setTemp = TEMP_LOW;
    155a:	86 e9       	ldi	r24, 0x96	; 150
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1562:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				
				LCD_location(2,12);
    1566:	6c e0       	ldi	r22, 0x0C	; 12
    1568:	82 e0       	ldi	r24, 0x02	; 2
    156a:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				displayUserInfo(setTemp);
    156e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1572:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1576:	0e 94 8e 07 	call	0xf1c	; 0xf1c <displayUserInfo>
				LCD_location(2,16);
    157a:	60 e1       	ldi	r22, 0x10	; 16
    157c:	82 e0       	ldi	r24, 0x02	; 2
    157e:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				LCD_write('<');
    1582:	8c e3       	ldi	r24, 0x3C	; 60
    1584:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
    1588:	8f ef       	ldi	r24, 0xFF	; 255
    158a:	94 e3       	ldi	r25, 0x34	; 52
    158c:	2c e0       	ldi	r18, 0x0C	; 12
    158e:	81 50       	subi	r24, 0x01	; 1
    1590:	90 40       	sbci	r25, 0x00	; 0
    1592:	20 40       	sbci	r18, 0x00	; 0
    1594:	e1 f7       	brne	.-8      	; 0x158e <keyEventExecute+0x52a>
    1596:	00 c0       	rjmp	.+0      	; 0x1598 <keyEventExecute+0x534>
    1598:	00 00       	nop
				_delay_ms(250);
			}
			
			else if(IS_KEY_DEC_PRESSED)
			{
				fcntSpeedInc = 0;
    159a:	20 e0       	ldi	r18, 0x00	; 0
				LCD_location(2,16);
				LCD_write('<');
				_delay_ms(250);
			}
			
			if(IS_KEY_INC_RELEASED)
    159c:	ca 99       	sbic	0x19, 2	; 25
			fcntSpeedInc = 0;
    159e:	20 e0       	ldi	r18, 0x00	; 0
			
			if(IS_KEY_DEC_RELEASED)
    15a0:	cb 99       	sbic	0x19, 3	; 25
			fcntSpeedDec = 0;
    15a2:	c0 e0       	ldi	r28, 0x00	; 0
		LCD_location(2,16);
		LCD_write('<');
				
		uint8_t fcntSpeedInc = 0, fcntSpeedDec = 0;
		
		while(IS_KEY_ENTER_RELEASED)
    15a4:	cc 99       	sbic	0x19, 4	; 25
    15a6:	8e cf       	rjmp	.-228    	; 0x14c4 <keyEventExecute+0x460>
			
			if(IS_KEY_DEC_RELEASED)
			fcntSpeedDec = 0;
		}
		
		eeprom_write_word(EEPROM_TEMP_ADD, setTemp);
    15a8:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    15ac:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    15b0:	82 e8       	ldi	r24, 0x82	; 130
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	0e 94 4f 12 	call	0x249e	; 0x249e <eeprom_write_word>
    15b8:	8f ef       	ldi	r24, 0xFF	; 255
    15ba:	90 e7       	ldi	r25, 0x70	; 112
    15bc:	22 e0       	ldi	r18, 0x02	; 2
    15be:	81 50       	subi	r24, 0x01	; 1
    15c0:	90 40       	sbci	r25, 0x00	; 0
    15c2:	20 40       	sbci	r18, 0x00	; 0
    15c4:	e1 f7       	brne	.-8      	; 0x15be <keyEventExecute+0x55a>
    15c6:	00 c0       	rjmp	.+0      	; 0x15c8 <keyEventExecute+0x564>
    15c8:	00 00       	nop
		_delay_ms(50);
		while(IS_KEY_ENTER_PRESSED);
    15ca:	cc 9b       	sbis	0x19, 4	; 25
    15cc:	fe cf       	rjmp	.-4      	; 0x15ca <keyEventExecute+0x566>
		
		LCD_location(2,16);
    15ce:	60 e1       	ldi	r22, 0x10	; 16
    15d0:	82 e0       	ldi	r24, 0x02	; 2
    15d2:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		LCD_write(' ');
    15d6:	80 e2       	ldi	r24, 0x20	; 32
    15d8:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
    15dc:	7d c0       	rjmp	.+250    	; 0x16d8 <keyEventExecute+0x674>
	}
	
	else if(IS_KEY_PROG_PRESSED)
    15de:	c9 99       	sbic	0x19, 1	; 25
    15e0:	7b c0       	rjmp	.+246    	; 0x16d8 <keyEventExecute+0x674>
	{
		long timeOut = milli();
    15e2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <milli>
    15e6:	6b 01       	movw	r12, r22
    15e8:	7c 01       	movw	r14, r24
    15ea:	8f ef       	ldi	r24, 0xFF	; 255
    15ec:	90 e7       	ldi	r25, 0x70	; 112
    15ee:	22 e0       	ldi	r18, 0x02	; 2
    15f0:	81 50       	subi	r24, 0x01	; 1
    15f2:	90 40       	sbci	r25, 0x00	; 0
    15f4:	20 40       	sbci	r18, 0x00	; 0
    15f6:	e1 f7       	brne	.-8      	; 0x15f0 <keyEventExecute+0x58c>
    15f8:	00 c0       	rjmp	.+0      	; 0x15fa <keyEventExecute+0x596>
    15fa:	00 00       	nop
		
		_delay_ms(50);
		
		while(!IS_KEY_PROG_RELEASED);
    15fc:	c9 9b       	sbis	0x19, 1	; 25
    15fe:	fe cf       	rjmp	.-4      	; 0x15fc <keyEventExecute+0x598>
	
		if(timeOut >= milli() + UPDATE_TIME)
    1600:	0e 94 ee 01 	call	0x3dc	; 0x3dc <milli>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	c2 96       	adiw	r24, 0x32	; 50
    160a:	a1 1d       	adc	r26, r1
    160c:	b1 1d       	adc	r27, r1
    160e:	c8 16       	cp	r12, r24
    1610:	d9 06       	cpc	r13, r25
    1612:	ea 06       	cpc	r14, r26
    1614:	fb 06       	cpc	r15, r27
    1616:	0c f4       	brge	.+2      	; 0x161a <keyEventExecute+0x5b6>
    1618:	5f c0       	rjmp	.+190    	; 0x16d8 <keyEventExecute+0x674>
		{
			if(flagDebugMode == 0)
    161a:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <flagDebugMode>
    161e:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <flagDebugMode+0x1>
    1622:	89 2b       	or	r24, r25
    1624:	59 f5       	brne	.+86     	; 0x167c <keyEventExecute+0x618>
			{
				flagDebugMode = 1;
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <flagDebugMode+0x1>
    162e:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <flagDebugMode>
				eeprom_write_word(EEPROM_DEBUG_ADD, flagDebugMode);
    1632:	60 91 de 00 	lds	r22, 0x00DE	; 0x8000de <flagDebugMode>
    1636:	70 91 df 00 	lds	r23, 0x00DF	; 0x8000df <flagDebugMode+0x1>
    163a:	82 ed       	ldi	r24, 0xD2	; 210
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	0e 94 4f 12 	call	0x249e	; 0x249e <eeprom_write_word>
				LCD_location(1,1);
    1642:	61 e0       	ldi	r22, 0x01	; 1
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				LCD_write_string("         = ");
    164a:	81 e9       	ldi	r24, 0x91	; 145
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
				LCD_showvalue(currTemp);
    1652:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <currTemp>
    1656:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <currTemp+0x1>
    165a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_showvalue>
				LCD_location(2,1);
    165e:	61 e0       	ldi	r22, 0x01	; 1
    1660:	82 e0       	ldi	r24, 0x02	; 2
    1662:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				LCD_write_string("         = ");
    1666:	81 e9       	ldi	r24, 0x91	; 145
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
				LCD_showvalue(setTemp);
    166e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1672:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1676:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_showvalue>
    167a:	2e c0       	rjmp	.+92     	; 0x16d8 <keyEventExecute+0x674>
			
			}
		
			else if(flagDebugMode == 0)
    167c:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <flagDebugMode>
    1680:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <flagDebugMode+0x1>
    1684:	89 2b       	or	r24, r25
    1686:	41 f5       	brne	.+80     	; 0x16d8 <keyEventExecute+0x674>
			{
				flagDebugMode = 0;
    1688:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <flagDebugMode+0x1>
    168c:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <flagDebugMode>
				eeprom_write_word(EEPROM_DEBUG_ADD, flagDebugMode);
    1690:	60 91 de 00 	lds	r22, 0x00DE	; 0x8000de <flagDebugMode>
    1694:	70 91 df 00 	lds	r23, 0x00DF	; 0x8000df <flagDebugMode+0x1>
    1698:	82 ed       	ldi	r24, 0xD2	; 210
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	0e 94 4f 12 	call	0x249e	; 0x249e <eeprom_write_word>
				LCD_location(1,1);
    16a0:	61 e0       	ldi	r22, 0x01	; 1
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				LCD_write_string("Cur Temp = ");
    16a8:	8d e9       	ldi	r24, 0x9D	; 157
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
				LCD_showvalue(currTemp);
    16b0:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <currTemp>
    16b4:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <currTemp+0x1>
    16b8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_showvalue>
				LCD_location(2,1);
    16bc:	61 e0       	ldi	r22, 0x01	; 1
    16be:	82 e0       	ldi	r24, 0x02	; 2
    16c0:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				LCD_write_string("Set Temp = ");
    16c4:	89 ea       	ldi	r24, 0xA9	; 169
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
				LCD_showvalue(setTemp);			
    16cc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    16d0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    16d4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_showvalue>
			}
		}
	}
}
    16d8:	cf 91       	pop	r28
    16da:	ff 90       	pop	r15
    16dc:	ef 90       	pop	r14
    16de:	df 90       	pop	r13
    16e0:	cf 90       	pop	r12
    16e2:	08 95       	ret

000016e4 <eeprom_init>:
void eeprom_init(void)
{
    16e4:	cf 93       	push	r28
    16e6:	df 93       	push	r29
	if((eeprom_read_word(EEPROM_CHECKSUM_ADD)) == EEPROM_CHECKSUM)
    16e8:	8e e6       	ldi	r24, 0x6E	; 110
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	0e 94 49 12 	call	0x2492	; 0x2492 <eeprom_read_word>
    16f0:	85 3c       	cpi	r24, 0xC5	; 197
    16f2:	9d 41       	sbci	r25, 0x1D	; 29
    16f4:	09 f0       	breq	.+2      	; 0x16f8 <eeprom_init+0x14>
    16f6:	8d c0       	rjmp	.+282    	; 0x1812 <eeprom_init+0x12e>
	{
		setTemp = eeprom_read_word(EEPROM_TEMP_ADD);
    16f8:	82 e8       	ldi	r24, 0x82	; 130
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	0e 94 49 12 	call	0x2492	; 0x2492 <eeprom_read_word>
    1700:	ec 01       	movw	r28, r24
    1702:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1706:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		setKp = eeprom_read_word(EEPROM_K_P_ADD);
    170a:	86 e9       	ldi	r24, 0x96	; 150
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	0e 94 49 12 	call	0x2492	; 0x2492 <eeprom_read_word>
    1712:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <setKp+0x1>
    1716:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <setKp>
		setKi = eeprom_read_word(EEPROM_K_I_ADD);
    171a:	8a ea       	ldi	r24, 0xAA	; 170
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	0e 94 49 12 	call	0x2492	; 0x2492 <eeprom_read_word>
    1722:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <setKi+0x1>
    1726:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <setKi>
		setKd = eeprom_read_word(EEPROM_K_D_ADD);
    172a:	8e eb       	ldi	r24, 0xBE	; 190
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	0e 94 49 12 	call	0x2492	; 0x2492 <eeprom_read_word>
    1732:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <setKd+0x1>
    1736:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <setKd>
		flagDebugMode = eeprom_read_word(EEPROM_DEBUG_ADD);
    173a:	82 ed       	ldi	r24, 0xD2	; 210
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	0e 94 49 12 	call	0x2492	; 0x2492 <eeprom_read_word>
    1742:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <flagDebugMode+0x1>
    1746:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <flagDebugMode>

		if((setTemp < TEMP_LOW) || (setTemp > TEMP_HIGH))
    174a:	c6 59       	subi	r28, 0x96	; 150
    174c:	d1 09       	sbc	r29, r1
    174e:	cd 32       	cpi	r28, 0x2D	; 45
    1750:	d1 40       	sbci	r29, 0x01	; 1
    1752:	60 f0       	brcs	.+24     	; 0x176c <eeprom_init+0x88>
		{
			setTemp = TEMP_DEFAULT;
    1754:	8d e1       	ldi	r24, 0x1D	; 29
    1756:	91 e0       	ldi	r25, 0x01	; 1
    1758:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    175c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			eeprom_write_word(EEPROM_TEMP_ADD, setTemp);
    1760:	6d e1       	ldi	r22, 0x1D	; 29
    1762:	71 e0       	ldi	r23, 0x01	; 1
    1764:	82 e8       	ldi	r24, 0x82	; 130
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	0e 94 4f 12 	call	0x249e	; 0x249e <eeprom_write_word>
		}
		
		if((setKp < K_P_LOW) || (setKp > K_P_HIGH))
    176c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <setKp>
    1770:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <setKp+0x1>
    1774:	0a 97       	sbiw	r24, 0x0a	; 10
    1776:	83 34       	cpi	r24, 0x43	; 67
    1778:	9d 41       	sbci	r25, 0x1D	; 29
    177a:	60 f0       	brcs	.+24     	; 0x1794 <eeprom_init+0xb0>
		{
			setKp = K_P_DEFAULT;
    177c:	8c ed       	ldi	r24, 0xDC	; 220
    177e:	95 e0       	ldi	r25, 0x05	; 5
    1780:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <setKp+0x1>
    1784:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <setKp>
			eeprom_write_word(EEPROM_K_P_ADD, setKp);
    1788:	6c ed       	ldi	r22, 0xDC	; 220
    178a:	75 e0       	ldi	r23, 0x05	; 5
    178c:	86 e9       	ldi	r24, 0x96	; 150
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	0e 94 4f 12 	call	0x249e	; 0x249e <eeprom_write_word>
		}
		
		if((setKi < K_I_LOW) || (setKi > K_I_HIGH))
    1794:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <setKi>
    1798:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <setKi+0x1>
    179c:	85 3f       	cpi	r24, 0xF5	; 245
    179e:	91 40       	sbci	r25, 0x01	; 1
    17a0:	50 f0       	brcs	.+20     	; 0x17b6 <eeprom_init+0xd2>
		{
			setKi = K_I_DEFAULT;
    17a2:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <setKi+0x1>
    17a6:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <setKi>
			eeprom_write_word(EEPROM_K_I_ADD, setKi);
    17aa:	60 e0       	ldi	r22, 0x00	; 0
    17ac:	70 e0       	ldi	r23, 0x00	; 0
    17ae:	8a ea       	ldi	r24, 0xAA	; 170
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	0e 94 4f 12 	call	0x249e	; 0x249e <eeprom_write_word>
		}
		
		if((setKd < K_D_LOW) || (setKd > K_D_HIGH))
    17b6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <setKd>
    17ba:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <setKd+0x1>
    17be:	85 3f       	cpi	r24, 0xF5	; 245
    17c0:	91 40       	sbci	r25, 0x01	; 1
    17c2:	60 f0       	brcs	.+24     	; 0x17dc <eeprom_init+0xf8>
		{
			setKd = K_D_DEFAULT;
    17c4:	85 e0       	ldi	r24, 0x05	; 5
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <setKd+0x1>
    17cc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <setKd>
			eeprom_write_word(EEPROM_K_D_ADD, setKd);
    17d0:	65 e0       	ldi	r22, 0x05	; 5
    17d2:	70 e0       	ldi	r23, 0x00	; 0
    17d4:	8e eb       	ldi	r24, 0xBE	; 190
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	0e 94 4f 12 	call	0x249e	; 0x249e <eeprom_write_word>
		}
		
		if((flagDebugMode != 0) && (flagDebugMode != 1))
    17dc:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <flagDebugMode>
    17e0:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <flagDebugMode+0x1>
    17e4:	89 2b       	or	r24, r25
    17e6:	09 f4       	brne	.+2      	; 0x17ea <eeprom_init+0x106>
    17e8:	54 c0       	rjmp	.+168    	; 0x1892 <eeprom_init+0x1ae>
    17ea:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <flagDebugMode>
    17ee:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <flagDebugMode+0x1>
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	09 f4       	brne	.+2      	; 0x17f8 <eeprom_init+0x114>
    17f6:	4d c0       	rjmp	.+154    	; 0x1892 <eeprom_init+0x1ae>
		{
			flagDebugMode = 0;
    17f8:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <flagDebugMode+0x1>
    17fc:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <flagDebugMode>
			eeprom_write_word(EEPROM_DEBUG_ADD, flagDebugMode);
    1800:	60 91 de 00 	lds	r22, 0x00DE	; 0x8000de <flagDebugMode>
    1804:	70 91 df 00 	lds	r23, 0x00DF	; 0x8000df <flagDebugMode+0x1>
    1808:	82 ed       	ldi	r24, 0xD2	; 210
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	0e 94 4f 12 	call	0x249e	; 0x249e <eeprom_write_word>
    1810:	40 c0       	rjmp	.+128    	; 0x1892 <eeprom_init+0x1ae>
		
	}
	
	else
	{
		setTemp = TEMP_DEFAULT;
    1812:	8d e1       	ldi	r24, 0x1D	; 29
    1814:	91 e0       	ldi	r25, 0x01	; 1
    1816:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    181a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		eeprom_write_word(EEPROM_TEMP_ADD, setTemp);
    181e:	6d e1       	ldi	r22, 0x1D	; 29
    1820:	71 e0       	ldi	r23, 0x01	; 1
    1822:	82 e8       	ldi	r24, 0x82	; 130
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	0e 94 4f 12 	call	0x249e	; 0x249e <eeprom_write_word>
		
		setKp = K_P_DEFAULT;
    182a:	8c ed       	ldi	r24, 0xDC	; 220
    182c:	95 e0       	ldi	r25, 0x05	; 5
    182e:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <setKp+0x1>
    1832:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <setKp>
		eeprom_write_word(EEPROM_K_P_ADD, setKp);
    1836:	6c ed       	ldi	r22, 0xDC	; 220
    1838:	75 e0       	ldi	r23, 0x05	; 5
    183a:	86 e9       	ldi	r24, 0x96	; 150
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	0e 94 4f 12 	call	0x249e	; 0x249e <eeprom_write_word>
		
		setKi = K_I_DEFAULT;
    1842:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <setKi+0x1>
    1846:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <setKi>
		eeprom_write_word(EEPROM_K_I_ADD, setKi);
    184a:	60 e0       	ldi	r22, 0x00	; 0
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	8a ea       	ldi	r24, 0xAA	; 170
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	0e 94 4f 12 	call	0x249e	; 0x249e <eeprom_write_word>
		
		setKd = K_D_DEFAULT;
    1856:	85 e0       	ldi	r24, 0x05	; 5
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <setKd+0x1>
    185e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <setKd>
		eeprom_write_word(EEPROM_K_D_ADD, setKd);
    1862:	65 e0       	ldi	r22, 0x05	; 5
    1864:	70 e0       	ldi	r23, 0x00	; 0
    1866:	8e eb       	ldi	r24, 0xBE	; 190
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	0e 94 4f 12 	call	0x249e	; 0x249e <eeprom_write_word>
		
		flagDebugMode = 0;		
    186e:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <flagDebugMode+0x1>
    1872:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <flagDebugMode>
		eeprom_write_word(EEPROM_DEBUG_ADD, flagDebugMode);
    1876:	60 91 de 00 	lds	r22, 0x00DE	; 0x8000de <flagDebugMode>
    187a:	70 91 df 00 	lds	r23, 0x00DF	; 0x8000df <flagDebugMode+0x1>
    187e:	82 ed       	ldi	r24, 0xD2	; 210
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	0e 94 4f 12 	call	0x249e	; 0x249e <eeprom_write_word>
		
		eeprom_write_word(EEPROM_CHECKSUM_ADD, EEPROM_CHECKSUM);
    1886:	65 ec       	ldi	r22, 0xC5	; 197
    1888:	7d e1       	ldi	r23, 0x1D	; 29
    188a:	8e e6       	ldi	r24, 0x6E	; 110
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	0e 94 4f 12 	call	0x249e	; 0x249e <eeprom_write_word>
	}
}
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	08 95       	ret

00001898 <main>:
    1898:	2f ef       	ldi	r18, 0xFF	; 255
    189a:	80 e7       	ldi	r24, 0x70	; 112
    189c:	92 e0       	ldi	r25, 0x02	; 2
    189e:	21 50       	subi	r18, 0x01	; 1
    18a0:	80 40       	sbci	r24, 0x00	; 0
    18a2:	90 40       	sbci	r25, 0x00	; 0
    18a4:	e1 f7       	brne	.-8      	; 0x189e <main+0x6>
    18a6:	00 c0       	rjmp	.+0      	; 0x18a8 <main+0x10>
    18a8:	00 00       	nop
float lastcurrentPoint = 0.00;
extern uint8_t flg;
int main(void)
{
	_delay_ms(50);
	KEY_INIT;
    18aa:	8a b3       	in	r24, 0x1a	; 26
    18ac:	81 7e       	andi	r24, 0xE1	; 225
    18ae:	8a bb       	out	0x1a, r24	; 26
	KEY_PULLUP_INIT;
    18b0:	8b b3       	in	r24, 0x1b	; 27
    18b2:	8e 61       	ori	r24, 0x1E	; 30
    18b4:	8b bb       	out	0x1b, r24	; 27

	eeprom_init();
    18b6:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <eeprom_init>
  
	 while(USART_init(115200) == USART_ERROR);
    18ba:	60 e0       	ldi	r22, 0x00	; 0
    18bc:	72 ec       	ldi	r23, 0xC2	; 194
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	0e 94 f7 01 	call	0x3ee	; 0x3ee <USART_init>
    18c6:	88 23       	and	r24, r24
    18c8:	c1 f3       	breq	.-16     	; 0x18ba <main+0x22>
  	 
	 LCD_Init();
    18ca:	0e 94 88 00 	call	0x110	; 0x110 <LCD_Init>
	 
	 if(flagDebugMode)
    18ce:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <flagDebugMode>
    18d2:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <flagDebugMode+0x1>
    18d6:	89 2b       	or	r24, r25
    18d8:	e9 f0       	breq	.+58     	; 0x1914 <main+0x7c>
	 {
		 LCD_location(1,1);
    18da:	61 e0       	ldi	r22, 0x01	; 1
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		 LCD_write_string("         = ");
    18e2:	81 e9       	ldi	r24, 0x91	; 145
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
		 LCD_showvalue(setTemp);
    18ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    18ee:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    18f2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_showvalue>
		 LCD_location(2,1);
    18f6:	61 e0       	ldi	r22, 0x01	; 1
    18f8:	82 e0       	ldi	r24, 0x02	; 2
    18fa:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		 LCD_write_string("         = ");
    18fe:	81 e9       	ldi	r24, 0x91	; 145
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
		 LCD_showvalue(setTemp);
    1906:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    190a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    190e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_showvalue>
    1912:	34 c0       	rjmp	.+104    	; 0x197c <main+0xe4>
	 }
	 else
	 {
		LCD_location(1,1);
    1914:	61 e0       	ldi	r22, 0x01	; 1
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		LCD_write_string("         =");
    191c:	85 eb       	ldi	r24, 0xB5	; 181
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
		LCD_location(1,1);
    1924:	61 e0       	ldi	r22, 0x01	; 1
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		LCD_write_string("Cur Temp");
    192c:	80 ec       	ldi	r24, 0xC0	; 192
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
		LCD_location(1,12);
    1934:	6c e0       	ldi	r22, 0x0C	; 12
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		LCD_showvalue(((float) setTemp));
    193c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1940:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1944:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_showvalue>
		LCD_location(2,1);
    1948:	61 e0       	ldi	r22, 0x01	; 1
    194a:	82 e0       	ldi	r24, 0x02	; 2
    194c:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		LCD_write_string("         =");
    1950:	85 eb       	ldi	r24, 0xB5	; 181
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
		LCD_location(2,1);
    1958:	61 e0       	ldi	r22, 0x01	; 1
    195a:	82 e0       	ldi	r24, 0x02	; 2
    195c:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		LCD_write_string("Set Temp");
    1960:	89 ec       	ldi	r24, 0xC9	; 201
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
		LCD_location(2,12);
    1968:	6c e0       	ldi	r22, 0x0C	; 12
    196a:	82 e0       	ldi	r24, 0x02	; 2
    196c:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		LCD_showvalue(((float) setTemp));
    1970:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1974:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1978:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_showvalue>
	 }
 	 
	 timer0_init();
    197c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <timer0_init>
	 timer1_init();
    1980:	0e 94 7e 01 	call	0x2fc	; 0x2fc <timer1_init>
	 timer2_init();
    1984:	0e 94 a4 01 	call	0x348	; 0x348 <timer2_init>
 	 
	 INTERLOCK_KEY_INIT;
    1988:	87 b3       	in	r24, 0x17	; 23
    198a:	81 60       	ori	r24, 0x01	; 1
    198c:	87 bb       	out	0x17, r24	; 23
	 RED_LED_INIT;
    198e:	87 b3       	in	r24, 0x17	; 23
    1990:	82 60       	ori	r24, 0x02	; 2
    1992:	87 bb       	out	0x17, r24	; 23
	 GREEN_LED_INIT;
    1994:	87 b3       	in	r24, 0x17	; 23
    1996:	84 60       	ori	r24, 0x04	; 4
    1998:	87 bb       	out	0x17, r24	; 23
	 RESET_INTERLOCK_KEY;
    199a:	88 b3       	in	r24, 0x18	; 24
    199c:	8e 7f       	andi	r24, 0xFE	; 254
    199e:	88 bb       	out	0x18, r24	; 24
	 
	 currTemp = setTemp;
    19a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    19a4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    19a8:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <currTemp+0x1>
    19ac:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <currTemp>
  	 
	 long pidUpdateTimeout = milli();
    19b0:	0e 94 ee 01 	call	0x3dc	; 0x3dc <milli>
    19b4:	6b 01       	movw	r12, r22
    19b6:	7c 01       	movw	r14, r24

    /* Replace with your application code */
	
    while (1) 
    {
		if(milli() > pidUpdateTimeout + PID_UPDATE_TIME)
    19b8:	0e 94 ee 01 	call	0x3dc	; 0x3dc <milli>
    19bc:	97 01       	movw	r18, r14
    19be:	86 01       	movw	r16, r12
    19c0:	0e 5c       	subi	r16, 0xCE	; 206
    19c2:	1f 4f       	sbci	r17, 0xFF	; 255
    19c4:	2f 4f       	sbci	r18, 0xFF	; 255
    19c6:	3f 4f       	sbci	r19, 0xFF	; 255
    19c8:	06 17       	cp	r16, r22
    19ca:	17 07       	cpc	r17, r23
    19cc:	28 07       	cpc	r18, r24
    19ce:	39 07       	cpc	r19, r25
    19d0:	bc f4       	brge	.+46     	; 0x1a00 <main+0x168>
		{
			pidUpdateTimeout = milli();
    19d2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <milli>
    19d6:	6b 01       	movw	r12, r22
    19d8:	7c 01       	movw	r14, r24
			if(flagTempUpdate)
    19da:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <flagTempUpdate>
    19de:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <flagTempUpdate+0x1>
    19e2:	89 2b       	or	r24, r25
    19e4:	69 f0       	breq	.+26     	; 0x1a00 <main+0x168>
			{
				flagTempUpdate = 0;
    19e6:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <flagTempUpdate+0x1>
    19ea:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <flagTempUpdate>
				processTempUpdate();
    19ee:	0e 94 d2 05 	call	0xba4	; 0xba4 <processTempUpdate>
				LCD_location(1,16);
    19f2:	60 e1       	ldi	r22, 0x10	; 16
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				LCD_write(' ');
    19fa:	80 e2       	ldi	r24, 0x20	; 32
    19fc:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
			}
		}
 		keyEventExecute();
    1a00:	0e 94 32 08 	call	0x1064	; 0x1064 <keyEventExecute>
	}
    1a04:	d9 cf       	rjmp	.-78     	; 0x19b8 <main+0x120>

00001a06 <callback>:
		eeprom_write_word(EEPROM_CHECKSUM_ADD, EEPROM_CHECKSUM);
	}
}
void callback (void)
{
	if(UAvailableData() % 2)
    1a06:	0e 94 9f 02 	call	0x53e	; 0x53e <UAvailableData>
    1a0a:	80 fd       	sbrc	r24, 0
	{
		UReadData();
    1a0c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <UReadData>
	}
	
	if(UAvailableData() >= 2)
    1a10:	0e 94 9f 02 	call	0x53e	; 0x53e <UAvailableData>
    1a14:	82 30       	cpi	r24, 0x02	; 2
    1a16:	d0 f0       	brcs	.+52     	; 0x1a4c <callback+0x46>
	{
		high = UReadData();
    1a18:	0e 94 79 02 	call	0x4f2	; 0x4f2 <UReadData>
    1a1c:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <high>
		low = UReadData();
    1a20:	0e 94 79 02 	call	0x4f2	; 0x4f2 <UReadData>
    1a24:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <low>
		lastUpdatedTemp = ((high << 8) | low);
    1a28:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <high>
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	32 2f       	mov	r19, r18
    1a30:	22 27       	eor	r18, r18
    1a32:	a9 01       	movw	r20, r18
    1a34:	48 2b       	or	r20, r24
    1a36:	ca 01       	movw	r24, r20
    1a38:	90 93 dd 00 	sts	0x00DD, r25	; 0x8000dd <lastUpdatedTemp+0x1>
    1a3c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <lastUpdatedTemp>
		
		flagTempUpdate = 1;
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	90 93 db 00 	sts	0x00DB, r25	; 0x8000db <flagTempUpdate+0x1>
    1a48:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <flagTempUpdate>
    1a4c:	08 95       	ret

00001a4e <__subsf3>:
    1a4e:	50 58       	subi	r21, 0x80	; 128

00001a50 <__addsf3>:
    1a50:	bb 27       	eor	r27, r27
    1a52:	aa 27       	eor	r26, r26
    1a54:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <__addsf3x>
    1a58:	0c 94 b9 0e 	jmp	0x1d72	; 0x1d72 <__fp_round>
    1a5c:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <__fp_pscA>
    1a60:	38 f0       	brcs	.+14     	; 0x1a70 <__addsf3+0x20>
    1a62:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <__fp_pscB>
    1a66:	20 f0       	brcs	.+8      	; 0x1a70 <__addsf3+0x20>
    1a68:	39 f4       	brne	.+14     	; 0x1a78 <__addsf3+0x28>
    1a6a:	9f 3f       	cpi	r25, 0xFF	; 255
    1a6c:	19 f4       	brne	.+6      	; 0x1a74 <__addsf3+0x24>
    1a6e:	26 f4       	brtc	.+8      	; 0x1a78 <__addsf3+0x28>
    1a70:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <__fp_nan>
    1a74:	0e f4       	brtc	.+2      	; 0x1a78 <__addsf3+0x28>
    1a76:	e0 95       	com	r30
    1a78:	e7 fb       	bst	r30, 7
    1a7a:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <__fp_inf>

00001a7e <__addsf3x>:
    1a7e:	e9 2f       	mov	r30, r25
    1a80:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <__fp_split3>
    1a84:	58 f3       	brcs	.-42     	; 0x1a5c <__addsf3+0xc>
    1a86:	ba 17       	cp	r27, r26
    1a88:	62 07       	cpc	r22, r18
    1a8a:	73 07       	cpc	r23, r19
    1a8c:	84 07       	cpc	r24, r20
    1a8e:	95 07       	cpc	r25, r21
    1a90:	20 f0       	brcs	.+8      	; 0x1a9a <__addsf3x+0x1c>
    1a92:	79 f4       	brne	.+30     	; 0x1ab2 <__addsf3x+0x34>
    1a94:	a6 f5       	brtc	.+104    	; 0x1afe <__addsf3x+0x80>
    1a96:	0c 94 ec 0e 	jmp	0x1dd8	; 0x1dd8 <__fp_zero>
    1a9a:	0e f4       	brtc	.+2      	; 0x1a9e <__addsf3x+0x20>
    1a9c:	e0 95       	com	r30
    1a9e:	0b 2e       	mov	r0, r27
    1aa0:	ba 2f       	mov	r27, r26
    1aa2:	a0 2d       	mov	r26, r0
    1aa4:	0b 01       	movw	r0, r22
    1aa6:	b9 01       	movw	r22, r18
    1aa8:	90 01       	movw	r18, r0
    1aaa:	0c 01       	movw	r0, r24
    1aac:	ca 01       	movw	r24, r20
    1aae:	a0 01       	movw	r20, r0
    1ab0:	11 24       	eor	r1, r1
    1ab2:	ff 27       	eor	r31, r31
    1ab4:	59 1b       	sub	r21, r25
    1ab6:	99 f0       	breq	.+38     	; 0x1ade <__addsf3x+0x60>
    1ab8:	59 3f       	cpi	r21, 0xF9	; 249
    1aba:	50 f4       	brcc	.+20     	; 0x1ad0 <__addsf3x+0x52>
    1abc:	50 3e       	cpi	r21, 0xE0	; 224
    1abe:	68 f1       	brcs	.+90     	; 0x1b1a <__addsf3x+0x9c>
    1ac0:	1a 16       	cp	r1, r26
    1ac2:	f0 40       	sbci	r31, 0x00	; 0
    1ac4:	a2 2f       	mov	r26, r18
    1ac6:	23 2f       	mov	r18, r19
    1ac8:	34 2f       	mov	r19, r20
    1aca:	44 27       	eor	r20, r20
    1acc:	58 5f       	subi	r21, 0xF8	; 248
    1ace:	f3 cf       	rjmp	.-26     	; 0x1ab6 <__addsf3x+0x38>
    1ad0:	46 95       	lsr	r20
    1ad2:	37 95       	ror	r19
    1ad4:	27 95       	ror	r18
    1ad6:	a7 95       	ror	r26
    1ad8:	f0 40       	sbci	r31, 0x00	; 0
    1ada:	53 95       	inc	r21
    1adc:	c9 f7       	brne	.-14     	; 0x1ad0 <__addsf3x+0x52>
    1ade:	7e f4       	brtc	.+30     	; 0x1afe <__addsf3x+0x80>
    1ae0:	1f 16       	cp	r1, r31
    1ae2:	ba 0b       	sbc	r27, r26
    1ae4:	62 0b       	sbc	r22, r18
    1ae6:	73 0b       	sbc	r23, r19
    1ae8:	84 0b       	sbc	r24, r20
    1aea:	ba f0       	brmi	.+46     	; 0x1b1a <__addsf3x+0x9c>
    1aec:	91 50       	subi	r25, 0x01	; 1
    1aee:	a1 f0       	breq	.+40     	; 0x1b18 <__addsf3x+0x9a>
    1af0:	ff 0f       	add	r31, r31
    1af2:	bb 1f       	adc	r27, r27
    1af4:	66 1f       	adc	r22, r22
    1af6:	77 1f       	adc	r23, r23
    1af8:	88 1f       	adc	r24, r24
    1afa:	c2 f7       	brpl	.-16     	; 0x1aec <__addsf3x+0x6e>
    1afc:	0e c0       	rjmp	.+28     	; 0x1b1a <__addsf3x+0x9c>
    1afe:	ba 0f       	add	r27, r26
    1b00:	62 1f       	adc	r22, r18
    1b02:	73 1f       	adc	r23, r19
    1b04:	84 1f       	adc	r24, r20
    1b06:	48 f4       	brcc	.+18     	; 0x1b1a <__addsf3x+0x9c>
    1b08:	87 95       	ror	r24
    1b0a:	77 95       	ror	r23
    1b0c:	67 95       	ror	r22
    1b0e:	b7 95       	ror	r27
    1b10:	f7 95       	ror	r31
    1b12:	9e 3f       	cpi	r25, 0xFE	; 254
    1b14:	08 f0       	brcs	.+2      	; 0x1b18 <__addsf3x+0x9a>
    1b16:	b0 cf       	rjmp	.-160    	; 0x1a78 <__addsf3+0x28>
    1b18:	93 95       	inc	r25
    1b1a:	88 0f       	add	r24, r24
    1b1c:	08 f0       	brcs	.+2      	; 0x1b20 <__addsf3x+0xa2>
    1b1e:	99 27       	eor	r25, r25
    1b20:	ee 0f       	add	r30, r30
    1b22:	97 95       	ror	r25
    1b24:	87 95       	ror	r24
    1b26:	08 95       	ret

00001b28 <__cmpsf2>:
    1b28:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <__fp_cmp>
    1b2c:	08 f4       	brcc	.+2      	; 0x1b30 <__cmpsf2+0x8>
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	08 95       	ret

00001b32 <__divsf3>:
    1b32:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__divsf3x>
    1b36:	0c 94 b9 0e 	jmp	0x1d72	; 0x1d72 <__fp_round>
    1b3a:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <__fp_pscB>
    1b3e:	58 f0       	brcs	.+22     	; 0x1b56 <__divsf3+0x24>
    1b40:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <__fp_pscA>
    1b44:	40 f0       	brcs	.+16     	; 0x1b56 <__divsf3+0x24>
    1b46:	29 f4       	brne	.+10     	; 0x1b52 <__divsf3+0x20>
    1b48:	5f 3f       	cpi	r21, 0xFF	; 255
    1b4a:	29 f0       	breq	.+10     	; 0x1b56 <__divsf3+0x24>
    1b4c:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <__fp_inf>
    1b50:	51 11       	cpse	r21, r1
    1b52:	0c 94 ed 0e 	jmp	0x1dda	; 0x1dda <__fp_szero>
    1b56:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <__fp_nan>

00001b5a <__divsf3x>:
    1b5a:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <__fp_split3>
    1b5e:	68 f3       	brcs	.-38     	; 0x1b3a <__divsf3+0x8>

00001b60 <__divsf3_pse>:
    1b60:	99 23       	and	r25, r25
    1b62:	b1 f3       	breq	.-20     	; 0x1b50 <__divsf3+0x1e>
    1b64:	55 23       	and	r21, r21
    1b66:	91 f3       	breq	.-28     	; 0x1b4c <__divsf3+0x1a>
    1b68:	95 1b       	sub	r25, r21
    1b6a:	55 0b       	sbc	r21, r21
    1b6c:	bb 27       	eor	r27, r27
    1b6e:	aa 27       	eor	r26, r26
    1b70:	62 17       	cp	r22, r18
    1b72:	73 07       	cpc	r23, r19
    1b74:	84 07       	cpc	r24, r20
    1b76:	38 f0       	brcs	.+14     	; 0x1b86 <__divsf3_pse+0x26>
    1b78:	9f 5f       	subi	r25, 0xFF	; 255
    1b7a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b7c:	22 0f       	add	r18, r18
    1b7e:	33 1f       	adc	r19, r19
    1b80:	44 1f       	adc	r20, r20
    1b82:	aa 1f       	adc	r26, r26
    1b84:	a9 f3       	breq	.-22     	; 0x1b70 <__divsf3_pse+0x10>
    1b86:	35 d0       	rcall	.+106    	; 0x1bf2 <__divsf3_pse+0x92>
    1b88:	0e 2e       	mov	r0, r30
    1b8a:	3a f0       	brmi	.+14     	; 0x1b9a <__divsf3_pse+0x3a>
    1b8c:	e0 e8       	ldi	r30, 0x80	; 128
    1b8e:	32 d0       	rcall	.+100    	; 0x1bf4 <__divsf3_pse+0x94>
    1b90:	91 50       	subi	r25, 0x01	; 1
    1b92:	50 40       	sbci	r21, 0x00	; 0
    1b94:	e6 95       	lsr	r30
    1b96:	00 1c       	adc	r0, r0
    1b98:	ca f7       	brpl	.-14     	; 0x1b8c <__divsf3_pse+0x2c>
    1b9a:	2b d0       	rcall	.+86     	; 0x1bf2 <__divsf3_pse+0x92>
    1b9c:	fe 2f       	mov	r31, r30
    1b9e:	29 d0       	rcall	.+82     	; 0x1bf2 <__divsf3_pse+0x92>
    1ba0:	66 0f       	add	r22, r22
    1ba2:	77 1f       	adc	r23, r23
    1ba4:	88 1f       	adc	r24, r24
    1ba6:	bb 1f       	adc	r27, r27
    1ba8:	26 17       	cp	r18, r22
    1baa:	37 07       	cpc	r19, r23
    1bac:	48 07       	cpc	r20, r24
    1bae:	ab 07       	cpc	r26, r27
    1bb0:	b0 e8       	ldi	r27, 0x80	; 128
    1bb2:	09 f0       	breq	.+2      	; 0x1bb6 <__divsf3_pse+0x56>
    1bb4:	bb 0b       	sbc	r27, r27
    1bb6:	80 2d       	mov	r24, r0
    1bb8:	bf 01       	movw	r22, r30
    1bba:	ff 27       	eor	r31, r31
    1bbc:	93 58       	subi	r25, 0x83	; 131
    1bbe:	5f 4f       	sbci	r21, 0xFF	; 255
    1bc0:	3a f0       	brmi	.+14     	; 0x1bd0 <__divsf3_pse+0x70>
    1bc2:	9e 3f       	cpi	r25, 0xFE	; 254
    1bc4:	51 05       	cpc	r21, r1
    1bc6:	78 f0       	brcs	.+30     	; 0x1be6 <__divsf3_pse+0x86>
    1bc8:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <__fp_inf>
    1bcc:	0c 94 ed 0e 	jmp	0x1dda	; 0x1dda <__fp_szero>
    1bd0:	5f 3f       	cpi	r21, 0xFF	; 255
    1bd2:	e4 f3       	brlt	.-8      	; 0x1bcc <__divsf3_pse+0x6c>
    1bd4:	98 3e       	cpi	r25, 0xE8	; 232
    1bd6:	d4 f3       	brlt	.-12     	; 0x1bcc <__divsf3_pse+0x6c>
    1bd8:	86 95       	lsr	r24
    1bda:	77 95       	ror	r23
    1bdc:	67 95       	ror	r22
    1bde:	b7 95       	ror	r27
    1be0:	f7 95       	ror	r31
    1be2:	9f 5f       	subi	r25, 0xFF	; 255
    1be4:	c9 f7       	brne	.-14     	; 0x1bd8 <__divsf3_pse+0x78>
    1be6:	88 0f       	add	r24, r24
    1be8:	91 1d       	adc	r25, r1
    1bea:	96 95       	lsr	r25
    1bec:	87 95       	ror	r24
    1bee:	97 f9       	bld	r25, 7
    1bf0:	08 95       	ret
    1bf2:	e1 e0       	ldi	r30, 0x01	; 1
    1bf4:	66 0f       	add	r22, r22
    1bf6:	77 1f       	adc	r23, r23
    1bf8:	88 1f       	adc	r24, r24
    1bfa:	bb 1f       	adc	r27, r27
    1bfc:	62 17       	cp	r22, r18
    1bfe:	73 07       	cpc	r23, r19
    1c00:	84 07       	cpc	r24, r20
    1c02:	ba 07       	cpc	r27, r26
    1c04:	20 f0       	brcs	.+8      	; 0x1c0e <__divsf3_pse+0xae>
    1c06:	62 1b       	sub	r22, r18
    1c08:	73 0b       	sbc	r23, r19
    1c0a:	84 0b       	sbc	r24, r20
    1c0c:	ba 0b       	sbc	r27, r26
    1c0e:	ee 1f       	adc	r30, r30
    1c10:	88 f7       	brcc	.-30     	; 0x1bf4 <__divsf3_pse+0x94>
    1c12:	e0 95       	com	r30
    1c14:	08 95       	ret

00001c16 <__fixsfsi>:
    1c16:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__fixunssfsi>
    1c1a:	68 94       	set
    1c1c:	b1 11       	cpse	r27, r1
    1c1e:	0c 94 ed 0e 	jmp	0x1dda	; 0x1dda <__fp_szero>
    1c22:	08 95       	ret

00001c24 <__fixunssfsi>:
    1c24:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <__fp_splitA>
    1c28:	88 f0       	brcs	.+34     	; 0x1c4c <__fixunssfsi+0x28>
    1c2a:	9f 57       	subi	r25, 0x7F	; 127
    1c2c:	98 f0       	brcs	.+38     	; 0x1c54 <__fixunssfsi+0x30>
    1c2e:	b9 2f       	mov	r27, r25
    1c30:	99 27       	eor	r25, r25
    1c32:	b7 51       	subi	r27, 0x17	; 23
    1c34:	b0 f0       	brcs	.+44     	; 0x1c62 <__fixunssfsi+0x3e>
    1c36:	e1 f0       	breq	.+56     	; 0x1c70 <__fixunssfsi+0x4c>
    1c38:	66 0f       	add	r22, r22
    1c3a:	77 1f       	adc	r23, r23
    1c3c:	88 1f       	adc	r24, r24
    1c3e:	99 1f       	adc	r25, r25
    1c40:	1a f0       	brmi	.+6      	; 0x1c48 <__fixunssfsi+0x24>
    1c42:	ba 95       	dec	r27
    1c44:	c9 f7       	brne	.-14     	; 0x1c38 <__fixunssfsi+0x14>
    1c46:	14 c0       	rjmp	.+40     	; 0x1c70 <__fixunssfsi+0x4c>
    1c48:	b1 30       	cpi	r27, 0x01	; 1
    1c4a:	91 f0       	breq	.+36     	; 0x1c70 <__fixunssfsi+0x4c>
    1c4c:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <__fp_zero>
    1c50:	b1 e0       	ldi	r27, 0x01	; 1
    1c52:	08 95       	ret
    1c54:	0c 94 ec 0e 	jmp	0x1dd8	; 0x1dd8 <__fp_zero>
    1c58:	67 2f       	mov	r22, r23
    1c5a:	78 2f       	mov	r23, r24
    1c5c:	88 27       	eor	r24, r24
    1c5e:	b8 5f       	subi	r27, 0xF8	; 248
    1c60:	39 f0       	breq	.+14     	; 0x1c70 <__fixunssfsi+0x4c>
    1c62:	b9 3f       	cpi	r27, 0xF9	; 249
    1c64:	cc f3       	brlt	.-14     	; 0x1c58 <__fixunssfsi+0x34>
    1c66:	86 95       	lsr	r24
    1c68:	77 95       	ror	r23
    1c6a:	67 95       	ror	r22
    1c6c:	b3 95       	inc	r27
    1c6e:	d9 f7       	brne	.-10     	; 0x1c66 <__fixunssfsi+0x42>
    1c70:	3e f4       	brtc	.+14     	; 0x1c80 <__fixunssfsi+0x5c>
    1c72:	90 95       	com	r25
    1c74:	80 95       	com	r24
    1c76:	70 95       	com	r23
    1c78:	61 95       	neg	r22
    1c7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c80:	08 95       	ret

00001c82 <__floatunsisf>:
    1c82:	e8 94       	clt
    1c84:	09 c0       	rjmp	.+18     	; 0x1c98 <__floatsisf+0x12>

00001c86 <__floatsisf>:
    1c86:	97 fb       	bst	r25, 7
    1c88:	3e f4       	brtc	.+14     	; 0x1c98 <__floatsisf+0x12>
    1c8a:	90 95       	com	r25
    1c8c:	80 95       	com	r24
    1c8e:	70 95       	com	r23
    1c90:	61 95       	neg	r22
    1c92:	7f 4f       	sbci	r23, 0xFF	; 255
    1c94:	8f 4f       	sbci	r24, 0xFF	; 255
    1c96:	9f 4f       	sbci	r25, 0xFF	; 255
    1c98:	99 23       	and	r25, r25
    1c9a:	a9 f0       	breq	.+42     	; 0x1cc6 <__floatsisf+0x40>
    1c9c:	f9 2f       	mov	r31, r25
    1c9e:	96 e9       	ldi	r25, 0x96	; 150
    1ca0:	bb 27       	eor	r27, r27
    1ca2:	93 95       	inc	r25
    1ca4:	f6 95       	lsr	r31
    1ca6:	87 95       	ror	r24
    1ca8:	77 95       	ror	r23
    1caa:	67 95       	ror	r22
    1cac:	b7 95       	ror	r27
    1cae:	f1 11       	cpse	r31, r1
    1cb0:	f8 cf       	rjmp	.-16     	; 0x1ca2 <__floatsisf+0x1c>
    1cb2:	fa f4       	brpl	.+62     	; 0x1cf2 <__floatsisf+0x6c>
    1cb4:	bb 0f       	add	r27, r27
    1cb6:	11 f4       	brne	.+4      	; 0x1cbc <__floatsisf+0x36>
    1cb8:	60 ff       	sbrs	r22, 0
    1cba:	1b c0       	rjmp	.+54     	; 0x1cf2 <__floatsisf+0x6c>
    1cbc:	6f 5f       	subi	r22, 0xFF	; 255
    1cbe:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc0:	8f 4f       	sbci	r24, 0xFF	; 255
    1cc2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc4:	16 c0       	rjmp	.+44     	; 0x1cf2 <__floatsisf+0x6c>
    1cc6:	88 23       	and	r24, r24
    1cc8:	11 f0       	breq	.+4      	; 0x1cce <__floatsisf+0x48>
    1cca:	96 e9       	ldi	r25, 0x96	; 150
    1ccc:	11 c0       	rjmp	.+34     	; 0x1cf0 <__floatsisf+0x6a>
    1cce:	77 23       	and	r23, r23
    1cd0:	21 f0       	breq	.+8      	; 0x1cda <__floatsisf+0x54>
    1cd2:	9e e8       	ldi	r25, 0x8E	; 142
    1cd4:	87 2f       	mov	r24, r23
    1cd6:	76 2f       	mov	r23, r22
    1cd8:	05 c0       	rjmp	.+10     	; 0x1ce4 <__floatsisf+0x5e>
    1cda:	66 23       	and	r22, r22
    1cdc:	71 f0       	breq	.+28     	; 0x1cfa <__floatsisf+0x74>
    1cde:	96 e8       	ldi	r25, 0x86	; 134
    1ce0:	86 2f       	mov	r24, r22
    1ce2:	70 e0       	ldi	r23, 0x00	; 0
    1ce4:	60 e0       	ldi	r22, 0x00	; 0
    1ce6:	2a f0       	brmi	.+10     	; 0x1cf2 <__floatsisf+0x6c>
    1ce8:	9a 95       	dec	r25
    1cea:	66 0f       	add	r22, r22
    1cec:	77 1f       	adc	r23, r23
    1cee:	88 1f       	adc	r24, r24
    1cf0:	da f7       	brpl	.-10     	; 0x1ce8 <__floatsisf+0x62>
    1cf2:	88 0f       	add	r24, r24
    1cf4:	96 95       	lsr	r25
    1cf6:	87 95       	ror	r24
    1cf8:	97 f9       	bld	r25, 7
    1cfa:	08 95       	ret

00001cfc <__fp_cmp>:
    1cfc:	99 0f       	add	r25, r25
    1cfe:	00 08       	sbc	r0, r0
    1d00:	55 0f       	add	r21, r21
    1d02:	aa 0b       	sbc	r26, r26
    1d04:	e0 e8       	ldi	r30, 0x80	; 128
    1d06:	fe ef       	ldi	r31, 0xFE	; 254
    1d08:	16 16       	cp	r1, r22
    1d0a:	17 06       	cpc	r1, r23
    1d0c:	e8 07       	cpc	r30, r24
    1d0e:	f9 07       	cpc	r31, r25
    1d10:	c0 f0       	brcs	.+48     	; 0x1d42 <__fp_cmp+0x46>
    1d12:	12 16       	cp	r1, r18
    1d14:	13 06       	cpc	r1, r19
    1d16:	e4 07       	cpc	r30, r20
    1d18:	f5 07       	cpc	r31, r21
    1d1a:	98 f0       	brcs	.+38     	; 0x1d42 <__fp_cmp+0x46>
    1d1c:	62 1b       	sub	r22, r18
    1d1e:	73 0b       	sbc	r23, r19
    1d20:	84 0b       	sbc	r24, r20
    1d22:	95 0b       	sbc	r25, r21
    1d24:	39 f4       	brne	.+14     	; 0x1d34 <__fp_cmp+0x38>
    1d26:	0a 26       	eor	r0, r26
    1d28:	61 f0       	breq	.+24     	; 0x1d42 <__fp_cmp+0x46>
    1d2a:	23 2b       	or	r18, r19
    1d2c:	24 2b       	or	r18, r20
    1d2e:	25 2b       	or	r18, r21
    1d30:	21 f4       	brne	.+8      	; 0x1d3a <__fp_cmp+0x3e>
    1d32:	08 95       	ret
    1d34:	0a 26       	eor	r0, r26
    1d36:	09 f4       	brne	.+2      	; 0x1d3a <__fp_cmp+0x3e>
    1d38:	a1 40       	sbci	r26, 0x01	; 1
    1d3a:	a6 95       	lsr	r26
    1d3c:	8f ef       	ldi	r24, 0xFF	; 255
    1d3e:	81 1d       	adc	r24, r1
    1d40:	81 1d       	adc	r24, r1
    1d42:	08 95       	ret

00001d44 <__fp_inf>:
    1d44:	97 f9       	bld	r25, 7
    1d46:	9f 67       	ori	r25, 0x7F	; 127
    1d48:	80 e8       	ldi	r24, 0x80	; 128
    1d4a:	70 e0       	ldi	r23, 0x00	; 0
    1d4c:	60 e0       	ldi	r22, 0x00	; 0
    1d4e:	08 95       	ret

00001d50 <__fp_nan>:
    1d50:	9f ef       	ldi	r25, 0xFF	; 255
    1d52:	80 ec       	ldi	r24, 0xC0	; 192
    1d54:	08 95       	ret

00001d56 <__fp_pscA>:
    1d56:	00 24       	eor	r0, r0
    1d58:	0a 94       	dec	r0
    1d5a:	16 16       	cp	r1, r22
    1d5c:	17 06       	cpc	r1, r23
    1d5e:	18 06       	cpc	r1, r24
    1d60:	09 06       	cpc	r0, r25
    1d62:	08 95       	ret

00001d64 <__fp_pscB>:
    1d64:	00 24       	eor	r0, r0
    1d66:	0a 94       	dec	r0
    1d68:	12 16       	cp	r1, r18
    1d6a:	13 06       	cpc	r1, r19
    1d6c:	14 06       	cpc	r1, r20
    1d6e:	05 06       	cpc	r0, r21
    1d70:	08 95       	ret

00001d72 <__fp_round>:
    1d72:	09 2e       	mov	r0, r25
    1d74:	03 94       	inc	r0
    1d76:	00 0c       	add	r0, r0
    1d78:	11 f4       	brne	.+4      	; 0x1d7e <__fp_round+0xc>
    1d7a:	88 23       	and	r24, r24
    1d7c:	52 f0       	brmi	.+20     	; 0x1d92 <__fp_round+0x20>
    1d7e:	bb 0f       	add	r27, r27
    1d80:	40 f4       	brcc	.+16     	; 0x1d92 <__fp_round+0x20>
    1d82:	bf 2b       	or	r27, r31
    1d84:	11 f4       	brne	.+4      	; 0x1d8a <__fp_round+0x18>
    1d86:	60 ff       	sbrs	r22, 0
    1d88:	04 c0       	rjmp	.+8      	; 0x1d92 <__fp_round+0x20>
    1d8a:	6f 5f       	subi	r22, 0xFF	; 255
    1d8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d8e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d90:	9f 4f       	sbci	r25, 0xFF	; 255
    1d92:	08 95       	ret

00001d94 <__fp_split3>:
    1d94:	57 fd       	sbrc	r21, 7
    1d96:	90 58       	subi	r25, 0x80	; 128
    1d98:	44 0f       	add	r20, r20
    1d9a:	55 1f       	adc	r21, r21
    1d9c:	59 f0       	breq	.+22     	; 0x1db4 <__fp_splitA+0x10>
    1d9e:	5f 3f       	cpi	r21, 0xFF	; 255
    1da0:	71 f0       	breq	.+28     	; 0x1dbe <__fp_splitA+0x1a>
    1da2:	47 95       	ror	r20

00001da4 <__fp_splitA>:
    1da4:	88 0f       	add	r24, r24
    1da6:	97 fb       	bst	r25, 7
    1da8:	99 1f       	adc	r25, r25
    1daa:	61 f0       	breq	.+24     	; 0x1dc4 <__fp_splitA+0x20>
    1dac:	9f 3f       	cpi	r25, 0xFF	; 255
    1dae:	79 f0       	breq	.+30     	; 0x1dce <__fp_splitA+0x2a>
    1db0:	87 95       	ror	r24
    1db2:	08 95       	ret
    1db4:	12 16       	cp	r1, r18
    1db6:	13 06       	cpc	r1, r19
    1db8:	14 06       	cpc	r1, r20
    1dba:	55 1f       	adc	r21, r21
    1dbc:	f2 cf       	rjmp	.-28     	; 0x1da2 <__fp_split3+0xe>
    1dbe:	46 95       	lsr	r20
    1dc0:	f1 df       	rcall	.-30     	; 0x1da4 <__fp_splitA>
    1dc2:	08 c0       	rjmp	.+16     	; 0x1dd4 <__fp_splitA+0x30>
    1dc4:	16 16       	cp	r1, r22
    1dc6:	17 06       	cpc	r1, r23
    1dc8:	18 06       	cpc	r1, r24
    1dca:	99 1f       	adc	r25, r25
    1dcc:	f1 cf       	rjmp	.-30     	; 0x1db0 <__fp_splitA+0xc>
    1dce:	86 95       	lsr	r24
    1dd0:	71 05       	cpc	r23, r1
    1dd2:	61 05       	cpc	r22, r1
    1dd4:	08 94       	sec
    1dd6:	08 95       	ret

00001dd8 <__fp_zero>:
    1dd8:	e8 94       	clt

00001dda <__fp_szero>:
    1dda:	bb 27       	eor	r27, r27
    1ddc:	66 27       	eor	r22, r22
    1dde:	77 27       	eor	r23, r23
    1de0:	cb 01       	movw	r24, r22
    1de2:	97 f9       	bld	r25, 7
    1de4:	08 95       	ret

00001de6 <__gesf2>:
    1de6:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <__fp_cmp>
    1dea:	08 f4       	brcc	.+2      	; 0x1dee <__gesf2+0x8>
    1dec:	8f ef       	ldi	r24, 0xFF	; 255
    1dee:	08 95       	ret

00001df0 <__mulsf3>:
    1df0:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <__mulsf3x>
    1df4:	0c 94 b9 0e 	jmp	0x1d72	; 0x1d72 <__fp_round>
    1df8:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <__fp_pscA>
    1dfc:	38 f0       	brcs	.+14     	; 0x1e0c <__mulsf3+0x1c>
    1dfe:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <__fp_pscB>
    1e02:	20 f0       	brcs	.+8      	; 0x1e0c <__mulsf3+0x1c>
    1e04:	95 23       	and	r25, r21
    1e06:	11 f0       	breq	.+4      	; 0x1e0c <__mulsf3+0x1c>
    1e08:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <__fp_inf>
    1e0c:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <__fp_nan>
    1e10:	11 24       	eor	r1, r1
    1e12:	0c 94 ed 0e 	jmp	0x1dda	; 0x1dda <__fp_szero>

00001e16 <__mulsf3x>:
    1e16:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <__fp_split3>
    1e1a:	70 f3       	brcs	.-36     	; 0x1df8 <__mulsf3+0x8>

00001e1c <__mulsf3_pse>:
    1e1c:	95 9f       	mul	r25, r21
    1e1e:	c1 f3       	breq	.-16     	; 0x1e10 <__mulsf3+0x20>
    1e20:	95 0f       	add	r25, r21
    1e22:	50 e0       	ldi	r21, 0x00	; 0
    1e24:	55 1f       	adc	r21, r21
    1e26:	62 9f       	mul	r22, r18
    1e28:	f0 01       	movw	r30, r0
    1e2a:	72 9f       	mul	r23, r18
    1e2c:	bb 27       	eor	r27, r27
    1e2e:	f0 0d       	add	r31, r0
    1e30:	b1 1d       	adc	r27, r1
    1e32:	63 9f       	mul	r22, r19
    1e34:	aa 27       	eor	r26, r26
    1e36:	f0 0d       	add	r31, r0
    1e38:	b1 1d       	adc	r27, r1
    1e3a:	aa 1f       	adc	r26, r26
    1e3c:	64 9f       	mul	r22, r20
    1e3e:	66 27       	eor	r22, r22
    1e40:	b0 0d       	add	r27, r0
    1e42:	a1 1d       	adc	r26, r1
    1e44:	66 1f       	adc	r22, r22
    1e46:	82 9f       	mul	r24, r18
    1e48:	22 27       	eor	r18, r18
    1e4a:	b0 0d       	add	r27, r0
    1e4c:	a1 1d       	adc	r26, r1
    1e4e:	62 1f       	adc	r22, r18
    1e50:	73 9f       	mul	r23, r19
    1e52:	b0 0d       	add	r27, r0
    1e54:	a1 1d       	adc	r26, r1
    1e56:	62 1f       	adc	r22, r18
    1e58:	83 9f       	mul	r24, r19
    1e5a:	a0 0d       	add	r26, r0
    1e5c:	61 1d       	adc	r22, r1
    1e5e:	22 1f       	adc	r18, r18
    1e60:	74 9f       	mul	r23, r20
    1e62:	33 27       	eor	r19, r19
    1e64:	a0 0d       	add	r26, r0
    1e66:	61 1d       	adc	r22, r1
    1e68:	23 1f       	adc	r18, r19
    1e6a:	84 9f       	mul	r24, r20
    1e6c:	60 0d       	add	r22, r0
    1e6e:	21 1d       	adc	r18, r1
    1e70:	82 2f       	mov	r24, r18
    1e72:	76 2f       	mov	r23, r22
    1e74:	6a 2f       	mov	r22, r26
    1e76:	11 24       	eor	r1, r1
    1e78:	9f 57       	subi	r25, 0x7F	; 127
    1e7a:	50 40       	sbci	r21, 0x00	; 0
    1e7c:	9a f0       	brmi	.+38     	; 0x1ea4 <__mulsf3_pse+0x88>
    1e7e:	f1 f0       	breq	.+60     	; 0x1ebc <__mulsf3_pse+0xa0>
    1e80:	88 23       	and	r24, r24
    1e82:	4a f0       	brmi	.+18     	; 0x1e96 <__mulsf3_pse+0x7a>
    1e84:	ee 0f       	add	r30, r30
    1e86:	ff 1f       	adc	r31, r31
    1e88:	bb 1f       	adc	r27, r27
    1e8a:	66 1f       	adc	r22, r22
    1e8c:	77 1f       	adc	r23, r23
    1e8e:	88 1f       	adc	r24, r24
    1e90:	91 50       	subi	r25, 0x01	; 1
    1e92:	50 40       	sbci	r21, 0x00	; 0
    1e94:	a9 f7       	brne	.-22     	; 0x1e80 <__mulsf3_pse+0x64>
    1e96:	9e 3f       	cpi	r25, 0xFE	; 254
    1e98:	51 05       	cpc	r21, r1
    1e9a:	80 f0       	brcs	.+32     	; 0x1ebc <__mulsf3_pse+0xa0>
    1e9c:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <__fp_inf>
    1ea0:	0c 94 ed 0e 	jmp	0x1dda	; 0x1dda <__fp_szero>
    1ea4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ea6:	e4 f3       	brlt	.-8      	; 0x1ea0 <__mulsf3_pse+0x84>
    1ea8:	98 3e       	cpi	r25, 0xE8	; 232
    1eaa:	d4 f3       	brlt	.-12     	; 0x1ea0 <__mulsf3_pse+0x84>
    1eac:	86 95       	lsr	r24
    1eae:	77 95       	ror	r23
    1eb0:	67 95       	ror	r22
    1eb2:	b7 95       	ror	r27
    1eb4:	f7 95       	ror	r31
    1eb6:	e7 95       	ror	r30
    1eb8:	9f 5f       	subi	r25, 0xFF	; 255
    1eba:	c1 f7       	brne	.-16     	; 0x1eac <__mulsf3_pse+0x90>
    1ebc:	fe 2b       	or	r31, r30
    1ebe:	88 0f       	add	r24, r24
    1ec0:	91 1d       	adc	r25, r1
    1ec2:	96 95       	lsr	r25
    1ec4:	87 95       	ror	r24
    1ec6:	97 f9       	bld	r25, 7
    1ec8:	08 95       	ret

00001eca <__udivmodsi4>:
    1eca:	a1 e2       	ldi	r26, 0x21	; 33
    1ecc:	1a 2e       	mov	r1, r26
    1ece:	aa 1b       	sub	r26, r26
    1ed0:	bb 1b       	sub	r27, r27
    1ed2:	fd 01       	movw	r30, r26
    1ed4:	0d c0       	rjmp	.+26     	; 0x1ef0 <__udivmodsi4_ep>

00001ed6 <__udivmodsi4_loop>:
    1ed6:	aa 1f       	adc	r26, r26
    1ed8:	bb 1f       	adc	r27, r27
    1eda:	ee 1f       	adc	r30, r30
    1edc:	ff 1f       	adc	r31, r31
    1ede:	a2 17       	cp	r26, r18
    1ee0:	b3 07       	cpc	r27, r19
    1ee2:	e4 07       	cpc	r30, r20
    1ee4:	f5 07       	cpc	r31, r21
    1ee6:	20 f0       	brcs	.+8      	; 0x1ef0 <__udivmodsi4_ep>
    1ee8:	a2 1b       	sub	r26, r18
    1eea:	b3 0b       	sbc	r27, r19
    1eec:	e4 0b       	sbc	r30, r20
    1eee:	f5 0b       	sbc	r31, r21

00001ef0 <__udivmodsi4_ep>:
    1ef0:	66 1f       	adc	r22, r22
    1ef2:	77 1f       	adc	r23, r23
    1ef4:	88 1f       	adc	r24, r24
    1ef6:	99 1f       	adc	r25, r25
    1ef8:	1a 94       	dec	r1
    1efa:	69 f7       	brne	.-38     	; 0x1ed6 <__udivmodsi4_loop>
    1efc:	60 95       	com	r22
    1efe:	70 95       	com	r23
    1f00:	80 95       	com	r24
    1f02:	90 95       	com	r25
    1f04:	9b 01       	movw	r18, r22
    1f06:	ac 01       	movw	r20, r24
    1f08:	bd 01       	movw	r22, r26
    1f0a:	cf 01       	movw	r24, r30
    1f0c:	08 95       	ret

00001f0e <__umulhisi3>:
    1f0e:	a2 9f       	mul	r26, r18
    1f10:	b0 01       	movw	r22, r0
    1f12:	b3 9f       	mul	r27, r19
    1f14:	c0 01       	movw	r24, r0
    1f16:	a3 9f       	mul	r26, r19
    1f18:	70 0d       	add	r23, r0
    1f1a:	81 1d       	adc	r24, r1
    1f1c:	11 24       	eor	r1, r1
    1f1e:	91 1d       	adc	r25, r1
    1f20:	b2 9f       	mul	r27, r18
    1f22:	70 0d       	add	r23, r0
    1f24:	81 1d       	adc	r24, r1
    1f26:	11 24       	eor	r1, r1
    1f28:	91 1d       	adc	r25, r1
    1f2a:	08 95       	ret

00001f2c <sprintf>:
    1f2c:	ae e0       	ldi	r26, 0x0E	; 14
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	ec e9       	ldi	r30, 0x9C	; 156
    1f32:	ff e0       	ldi	r31, 0x0F	; 15
    1f34:	0c 94 7f 12 	jmp	0x24fe	; 0x24fe <__prologue_saves__+0x1c>
    1f38:	0d 89       	ldd	r16, Y+21	; 0x15
    1f3a:	1e 89       	ldd	r17, Y+22	; 0x16
    1f3c:	86 e0       	ldi	r24, 0x06	; 6
    1f3e:	8c 83       	std	Y+4, r24	; 0x04
    1f40:	1a 83       	std	Y+2, r17	; 0x02
    1f42:	09 83       	std	Y+1, r16	; 0x01
    1f44:	8f ef       	ldi	r24, 0xFF	; 255
    1f46:	9f e7       	ldi	r25, 0x7F	; 127
    1f48:	9e 83       	std	Y+6, r25	; 0x06
    1f4a:	8d 83       	std	Y+5, r24	; 0x05
    1f4c:	ae 01       	movw	r20, r28
    1f4e:	47 5e       	subi	r20, 0xE7	; 231
    1f50:	5f 4f       	sbci	r21, 0xFF	; 255
    1f52:	6f 89       	ldd	r22, Y+23	; 0x17
    1f54:	78 8d       	ldd	r23, Y+24	; 0x18
    1f56:	ce 01       	movw	r24, r28
    1f58:	01 96       	adiw	r24, 0x01	; 1
    1f5a:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <vfprintf>
    1f5e:	ef 81       	ldd	r30, Y+7	; 0x07
    1f60:	f8 85       	ldd	r31, Y+8	; 0x08
    1f62:	e0 0f       	add	r30, r16
    1f64:	f1 1f       	adc	r31, r17
    1f66:	10 82       	st	Z, r1
    1f68:	2e 96       	adiw	r28, 0x0e	; 14
    1f6a:	e4 e0       	ldi	r30, 0x04	; 4
    1f6c:	0c 94 9b 12 	jmp	0x2536	; 0x2536 <__epilogue_restores__+0x1c>

00001f70 <vfprintf>:
    1f70:	ab e0       	ldi	r26, 0x0B	; 11
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	ee eb       	ldi	r30, 0xBE	; 190
    1f76:	ff e0       	ldi	r31, 0x0F	; 15
    1f78:	0c 94 71 12 	jmp	0x24e2	; 0x24e2 <__prologue_saves__>
    1f7c:	6c 01       	movw	r12, r24
    1f7e:	7b 01       	movw	r14, r22
    1f80:	8a 01       	movw	r16, r20
    1f82:	fc 01       	movw	r30, r24
    1f84:	17 82       	std	Z+7, r1	; 0x07
    1f86:	16 82       	std	Z+6, r1	; 0x06
    1f88:	83 81       	ldd	r24, Z+3	; 0x03
    1f8a:	81 ff       	sbrs	r24, 1
    1f8c:	cc c1       	rjmp	.+920    	; 0x2326 <vfprintf+0x3b6>
    1f8e:	ce 01       	movw	r24, r28
    1f90:	01 96       	adiw	r24, 0x01	; 1
    1f92:	3c 01       	movw	r6, r24
    1f94:	f6 01       	movw	r30, r12
    1f96:	93 81       	ldd	r25, Z+3	; 0x03
    1f98:	f7 01       	movw	r30, r14
    1f9a:	93 fd       	sbrc	r25, 3
    1f9c:	85 91       	lpm	r24, Z+
    1f9e:	93 ff       	sbrs	r25, 3
    1fa0:	81 91       	ld	r24, Z+
    1fa2:	7f 01       	movw	r14, r30
    1fa4:	88 23       	and	r24, r24
    1fa6:	09 f4       	brne	.+2      	; 0x1faa <vfprintf+0x3a>
    1fa8:	ba c1       	rjmp	.+884    	; 0x231e <vfprintf+0x3ae>
    1faa:	85 32       	cpi	r24, 0x25	; 37
    1fac:	39 f4       	brne	.+14     	; 0x1fbc <vfprintf+0x4c>
    1fae:	93 fd       	sbrc	r25, 3
    1fb0:	85 91       	lpm	r24, Z+
    1fb2:	93 ff       	sbrs	r25, 3
    1fb4:	81 91       	ld	r24, Z+
    1fb6:	7f 01       	movw	r14, r30
    1fb8:	85 32       	cpi	r24, 0x25	; 37
    1fba:	29 f4       	brne	.+10     	; 0x1fc6 <vfprintf+0x56>
    1fbc:	b6 01       	movw	r22, r12
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	0e 94 af 11 	call	0x235e	; 0x235e <fputc>
    1fc4:	e7 cf       	rjmp	.-50     	; 0x1f94 <vfprintf+0x24>
    1fc6:	91 2c       	mov	r9, r1
    1fc8:	21 2c       	mov	r2, r1
    1fca:	31 2c       	mov	r3, r1
    1fcc:	ff e1       	ldi	r31, 0x1F	; 31
    1fce:	f3 15       	cp	r31, r3
    1fd0:	d8 f0       	brcs	.+54     	; 0x2008 <vfprintf+0x98>
    1fd2:	8b 32       	cpi	r24, 0x2B	; 43
    1fd4:	79 f0       	breq	.+30     	; 0x1ff4 <vfprintf+0x84>
    1fd6:	38 f4       	brcc	.+14     	; 0x1fe6 <vfprintf+0x76>
    1fd8:	80 32       	cpi	r24, 0x20	; 32
    1fda:	79 f0       	breq	.+30     	; 0x1ffa <vfprintf+0x8a>
    1fdc:	83 32       	cpi	r24, 0x23	; 35
    1fde:	a1 f4       	brne	.+40     	; 0x2008 <vfprintf+0x98>
    1fe0:	23 2d       	mov	r18, r3
    1fe2:	20 61       	ori	r18, 0x10	; 16
    1fe4:	1d c0       	rjmp	.+58     	; 0x2020 <vfprintf+0xb0>
    1fe6:	8d 32       	cpi	r24, 0x2D	; 45
    1fe8:	61 f0       	breq	.+24     	; 0x2002 <vfprintf+0x92>
    1fea:	80 33       	cpi	r24, 0x30	; 48
    1fec:	69 f4       	brne	.+26     	; 0x2008 <vfprintf+0x98>
    1fee:	23 2d       	mov	r18, r3
    1ff0:	21 60       	ori	r18, 0x01	; 1
    1ff2:	16 c0       	rjmp	.+44     	; 0x2020 <vfprintf+0xb0>
    1ff4:	83 2d       	mov	r24, r3
    1ff6:	82 60       	ori	r24, 0x02	; 2
    1ff8:	38 2e       	mov	r3, r24
    1ffa:	e3 2d       	mov	r30, r3
    1ffc:	e4 60       	ori	r30, 0x04	; 4
    1ffe:	3e 2e       	mov	r3, r30
    2000:	2a c0       	rjmp	.+84     	; 0x2056 <vfprintf+0xe6>
    2002:	f3 2d       	mov	r31, r3
    2004:	f8 60       	ori	r31, 0x08	; 8
    2006:	1d c0       	rjmp	.+58     	; 0x2042 <vfprintf+0xd2>
    2008:	37 fc       	sbrc	r3, 7
    200a:	2d c0       	rjmp	.+90     	; 0x2066 <vfprintf+0xf6>
    200c:	20 ed       	ldi	r18, 0xD0	; 208
    200e:	28 0f       	add	r18, r24
    2010:	2a 30       	cpi	r18, 0x0A	; 10
    2012:	40 f0       	brcs	.+16     	; 0x2024 <vfprintf+0xb4>
    2014:	8e 32       	cpi	r24, 0x2E	; 46
    2016:	b9 f4       	brne	.+46     	; 0x2046 <vfprintf+0xd6>
    2018:	36 fc       	sbrc	r3, 6
    201a:	81 c1       	rjmp	.+770    	; 0x231e <vfprintf+0x3ae>
    201c:	23 2d       	mov	r18, r3
    201e:	20 64       	ori	r18, 0x40	; 64
    2020:	32 2e       	mov	r3, r18
    2022:	19 c0       	rjmp	.+50     	; 0x2056 <vfprintf+0xe6>
    2024:	36 fe       	sbrs	r3, 6
    2026:	06 c0       	rjmp	.+12     	; 0x2034 <vfprintf+0xc4>
    2028:	8a e0       	ldi	r24, 0x0A	; 10
    202a:	98 9e       	mul	r9, r24
    202c:	20 0d       	add	r18, r0
    202e:	11 24       	eor	r1, r1
    2030:	92 2e       	mov	r9, r18
    2032:	11 c0       	rjmp	.+34     	; 0x2056 <vfprintf+0xe6>
    2034:	ea e0       	ldi	r30, 0x0A	; 10
    2036:	2e 9e       	mul	r2, r30
    2038:	20 0d       	add	r18, r0
    203a:	11 24       	eor	r1, r1
    203c:	22 2e       	mov	r2, r18
    203e:	f3 2d       	mov	r31, r3
    2040:	f0 62       	ori	r31, 0x20	; 32
    2042:	3f 2e       	mov	r3, r31
    2044:	08 c0       	rjmp	.+16     	; 0x2056 <vfprintf+0xe6>
    2046:	8c 36       	cpi	r24, 0x6C	; 108
    2048:	21 f4       	brne	.+8      	; 0x2052 <vfprintf+0xe2>
    204a:	83 2d       	mov	r24, r3
    204c:	80 68       	ori	r24, 0x80	; 128
    204e:	38 2e       	mov	r3, r24
    2050:	02 c0       	rjmp	.+4      	; 0x2056 <vfprintf+0xe6>
    2052:	88 36       	cpi	r24, 0x68	; 104
    2054:	41 f4       	brne	.+16     	; 0x2066 <vfprintf+0xf6>
    2056:	f7 01       	movw	r30, r14
    2058:	93 fd       	sbrc	r25, 3
    205a:	85 91       	lpm	r24, Z+
    205c:	93 ff       	sbrs	r25, 3
    205e:	81 91       	ld	r24, Z+
    2060:	7f 01       	movw	r14, r30
    2062:	81 11       	cpse	r24, r1
    2064:	b3 cf       	rjmp	.-154    	; 0x1fcc <vfprintf+0x5c>
    2066:	98 2f       	mov	r25, r24
    2068:	9f 7d       	andi	r25, 0xDF	; 223
    206a:	95 54       	subi	r25, 0x45	; 69
    206c:	93 30       	cpi	r25, 0x03	; 3
    206e:	28 f4       	brcc	.+10     	; 0x207a <vfprintf+0x10a>
    2070:	0c 5f       	subi	r16, 0xFC	; 252
    2072:	1f 4f       	sbci	r17, 0xFF	; 255
    2074:	9f e3       	ldi	r25, 0x3F	; 63
    2076:	99 83       	std	Y+1, r25	; 0x01
    2078:	0d c0       	rjmp	.+26     	; 0x2094 <vfprintf+0x124>
    207a:	83 36       	cpi	r24, 0x63	; 99
    207c:	31 f0       	breq	.+12     	; 0x208a <vfprintf+0x11a>
    207e:	83 37       	cpi	r24, 0x73	; 115
    2080:	71 f0       	breq	.+28     	; 0x209e <vfprintf+0x12e>
    2082:	83 35       	cpi	r24, 0x53	; 83
    2084:	09 f0       	breq	.+2      	; 0x2088 <vfprintf+0x118>
    2086:	59 c0       	rjmp	.+178    	; 0x213a <vfprintf+0x1ca>
    2088:	21 c0       	rjmp	.+66     	; 0x20cc <vfprintf+0x15c>
    208a:	f8 01       	movw	r30, r16
    208c:	80 81       	ld	r24, Z
    208e:	89 83       	std	Y+1, r24	; 0x01
    2090:	0e 5f       	subi	r16, 0xFE	; 254
    2092:	1f 4f       	sbci	r17, 0xFF	; 255
    2094:	88 24       	eor	r8, r8
    2096:	83 94       	inc	r8
    2098:	91 2c       	mov	r9, r1
    209a:	53 01       	movw	r10, r6
    209c:	13 c0       	rjmp	.+38     	; 0x20c4 <vfprintf+0x154>
    209e:	28 01       	movw	r4, r16
    20a0:	f2 e0       	ldi	r31, 0x02	; 2
    20a2:	4f 0e       	add	r4, r31
    20a4:	51 1c       	adc	r5, r1
    20a6:	f8 01       	movw	r30, r16
    20a8:	a0 80       	ld	r10, Z
    20aa:	b1 80       	ldd	r11, Z+1	; 0x01
    20ac:	36 fe       	sbrs	r3, 6
    20ae:	03 c0       	rjmp	.+6      	; 0x20b6 <vfprintf+0x146>
    20b0:	69 2d       	mov	r22, r9
    20b2:	70 e0       	ldi	r23, 0x00	; 0
    20b4:	02 c0       	rjmp	.+4      	; 0x20ba <vfprintf+0x14a>
    20b6:	6f ef       	ldi	r22, 0xFF	; 255
    20b8:	7f ef       	ldi	r23, 0xFF	; 255
    20ba:	c5 01       	movw	r24, r10
    20bc:	0e 94 a4 11 	call	0x2348	; 0x2348 <strnlen>
    20c0:	4c 01       	movw	r8, r24
    20c2:	82 01       	movw	r16, r4
    20c4:	f3 2d       	mov	r31, r3
    20c6:	ff 77       	andi	r31, 0x7F	; 127
    20c8:	3f 2e       	mov	r3, r31
    20ca:	16 c0       	rjmp	.+44     	; 0x20f8 <vfprintf+0x188>
    20cc:	28 01       	movw	r4, r16
    20ce:	22 e0       	ldi	r18, 0x02	; 2
    20d0:	42 0e       	add	r4, r18
    20d2:	51 1c       	adc	r5, r1
    20d4:	f8 01       	movw	r30, r16
    20d6:	a0 80       	ld	r10, Z
    20d8:	b1 80       	ldd	r11, Z+1	; 0x01
    20da:	36 fe       	sbrs	r3, 6
    20dc:	03 c0       	rjmp	.+6      	; 0x20e4 <vfprintf+0x174>
    20de:	69 2d       	mov	r22, r9
    20e0:	70 e0       	ldi	r23, 0x00	; 0
    20e2:	02 c0       	rjmp	.+4      	; 0x20e8 <vfprintf+0x178>
    20e4:	6f ef       	ldi	r22, 0xFF	; 255
    20e6:	7f ef       	ldi	r23, 0xFF	; 255
    20e8:	c5 01       	movw	r24, r10
    20ea:	0e 94 99 11 	call	0x2332	; 0x2332 <strnlen_P>
    20ee:	4c 01       	movw	r8, r24
    20f0:	f3 2d       	mov	r31, r3
    20f2:	f0 68       	ori	r31, 0x80	; 128
    20f4:	3f 2e       	mov	r3, r31
    20f6:	82 01       	movw	r16, r4
    20f8:	33 fc       	sbrc	r3, 3
    20fa:	1b c0       	rjmp	.+54     	; 0x2132 <vfprintf+0x1c2>
    20fc:	82 2d       	mov	r24, r2
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	88 16       	cp	r8, r24
    2102:	99 06       	cpc	r9, r25
    2104:	b0 f4       	brcc	.+44     	; 0x2132 <vfprintf+0x1c2>
    2106:	b6 01       	movw	r22, r12
    2108:	80 e2       	ldi	r24, 0x20	; 32
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	0e 94 af 11 	call	0x235e	; 0x235e <fputc>
    2110:	2a 94       	dec	r2
    2112:	f4 cf       	rjmp	.-24     	; 0x20fc <vfprintf+0x18c>
    2114:	f5 01       	movw	r30, r10
    2116:	37 fc       	sbrc	r3, 7
    2118:	85 91       	lpm	r24, Z+
    211a:	37 fe       	sbrs	r3, 7
    211c:	81 91       	ld	r24, Z+
    211e:	5f 01       	movw	r10, r30
    2120:	b6 01       	movw	r22, r12
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	0e 94 af 11 	call	0x235e	; 0x235e <fputc>
    2128:	21 10       	cpse	r2, r1
    212a:	2a 94       	dec	r2
    212c:	21 e0       	ldi	r18, 0x01	; 1
    212e:	82 1a       	sub	r8, r18
    2130:	91 08       	sbc	r9, r1
    2132:	81 14       	cp	r8, r1
    2134:	91 04       	cpc	r9, r1
    2136:	71 f7       	brne	.-36     	; 0x2114 <vfprintf+0x1a4>
    2138:	e8 c0       	rjmp	.+464    	; 0x230a <vfprintf+0x39a>
    213a:	84 36       	cpi	r24, 0x64	; 100
    213c:	11 f0       	breq	.+4      	; 0x2142 <vfprintf+0x1d2>
    213e:	89 36       	cpi	r24, 0x69	; 105
    2140:	41 f5       	brne	.+80     	; 0x2192 <vfprintf+0x222>
    2142:	f8 01       	movw	r30, r16
    2144:	37 fe       	sbrs	r3, 7
    2146:	07 c0       	rjmp	.+14     	; 0x2156 <vfprintf+0x1e6>
    2148:	60 81       	ld	r22, Z
    214a:	71 81       	ldd	r23, Z+1	; 0x01
    214c:	82 81       	ldd	r24, Z+2	; 0x02
    214e:	93 81       	ldd	r25, Z+3	; 0x03
    2150:	0c 5f       	subi	r16, 0xFC	; 252
    2152:	1f 4f       	sbci	r17, 0xFF	; 255
    2154:	08 c0       	rjmp	.+16     	; 0x2166 <vfprintf+0x1f6>
    2156:	60 81       	ld	r22, Z
    2158:	71 81       	ldd	r23, Z+1	; 0x01
    215a:	07 2e       	mov	r0, r23
    215c:	00 0c       	add	r0, r0
    215e:	88 0b       	sbc	r24, r24
    2160:	99 0b       	sbc	r25, r25
    2162:	0e 5f       	subi	r16, 0xFE	; 254
    2164:	1f 4f       	sbci	r17, 0xFF	; 255
    2166:	f3 2d       	mov	r31, r3
    2168:	ff 76       	andi	r31, 0x6F	; 111
    216a:	3f 2e       	mov	r3, r31
    216c:	97 ff       	sbrs	r25, 7
    216e:	09 c0       	rjmp	.+18     	; 0x2182 <vfprintf+0x212>
    2170:	90 95       	com	r25
    2172:	80 95       	com	r24
    2174:	70 95       	com	r23
    2176:	61 95       	neg	r22
    2178:	7f 4f       	sbci	r23, 0xFF	; 255
    217a:	8f 4f       	sbci	r24, 0xFF	; 255
    217c:	9f 4f       	sbci	r25, 0xFF	; 255
    217e:	f0 68       	ori	r31, 0x80	; 128
    2180:	3f 2e       	mov	r3, r31
    2182:	2a e0       	ldi	r18, 0x0A	; 10
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	a3 01       	movw	r20, r6
    2188:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <__ultoa_invert>
    218c:	88 2e       	mov	r8, r24
    218e:	86 18       	sub	r8, r6
    2190:	45 c0       	rjmp	.+138    	; 0x221c <vfprintf+0x2ac>
    2192:	85 37       	cpi	r24, 0x75	; 117
    2194:	31 f4       	brne	.+12     	; 0x21a2 <vfprintf+0x232>
    2196:	23 2d       	mov	r18, r3
    2198:	2f 7e       	andi	r18, 0xEF	; 239
    219a:	b2 2e       	mov	r11, r18
    219c:	2a e0       	ldi	r18, 0x0A	; 10
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	25 c0       	rjmp	.+74     	; 0x21ec <vfprintf+0x27c>
    21a2:	93 2d       	mov	r25, r3
    21a4:	99 7f       	andi	r25, 0xF9	; 249
    21a6:	b9 2e       	mov	r11, r25
    21a8:	8f 36       	cpi	r24, 0x6F	; 111
    21aa:	c1 f0       	breq	.+48     	; 0x21dc <vfprintf+0x26c>
    21ac:	18 f4       	brcc	.+6      	; 0x21b4 <vfprintf+0x244>
    21ae:	88 35       	cpi	r24, 0x58	; 88
    21b0:	79 f0       	breq	.+30     	; 0x21d0 <vfprintf+0x260>
    21b2:	b5 c0       	rjmp	.+362    	; 0x231e <vfprintf+0x3ae>
    21b4:	80 37       	cpi	r24, 0x70	; 112
    21b6:	19 f0       	breq	.+6      	; 0x21be <vfprintf+0x24e>
    21b8:	88 37       	cpi	r24, 0x78	; 120
    21ba:	21 f0       	breq	.+8      	; 0x21c4 <vfprintf+0x254>
    21bc:	b0 c0       	rjmp	.+352    	; 0x231e <vfprintf+0x3ae>
    21be:	e9 2f       	mov	r30, r25
    21c0:	e0 61       	ori	r30, 0x10	; 16
    21c2:	be 2e       	mov	r11, r30
    21c4:	b4 fe       	sbrs	r11, 4
    21c6:	0d c0       	rjmp	.+26     	; 0x21e2 <vfprintf+0x272>
    21c8:	fb 2d       	mov	r31, r11
    21ca:	f4 60       	ori	r31, 0x04	; 4
    21cc:	bf 2e       	mov	r11, r31
    21ce:	09 c0       	rjmp	.+18     	; 0x21e2 <vfprintf+0x272>
    21d0:	34 fe       	sbrs	r3, 4
    21d2:	0a c0       	rjmp	.+20     	; 0x21e8 <vfprintf+0x278>
    21d4:	29 2f       	mov	r18, r25
    21d6:	26 60       	ori	r18, 0x06	; 6
    21d8:	b2 2e       	mov	r11, r18
    21da:	06 c0       	rjmp	.+12     	; 0x21e8 <vfprintf+0x278>
    21dc:	28 e0       	ldi	r18, 0x08	; 8
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	05 c0       	rjmp	.+10     	; 0x21ec <vfprintf+0x27c>
    21e2:	20 e1       	ldi	r18, 0x10	; 16
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	02 c0       	rjmp	.+4      	; 0x21ec <vfprintf+0x27c>
    21e8:	20 e1       	ldi	r18, 0x10	; 16
    21ea:	32 e0       	ldi	r19, 0x02	; 2
    21ec:	f8 01       	movw	r30, r16
    21ee:	b7 fe       	sbrs	r11, 7
    21f0:	07 c0       	rjmp	.+14     	; 0x2200 <vfprintf+0x290>
    21f2:	60 81       	ld	r22, Z
    21f4:	71 81       	ldd	r23, Z+1	; 0x01
    21f6:	82 81       	ldd	r24, Z+2	; 0x02
    21f8:	93 81       	ldd	r25, Z+3	; 0x03
    21fa:	0c 5f       	subi	r16, 0xFC	; 252
    21fc:	1f 4f       	sbci	r17, 0xFF	; 255
    21fe:	06 c0       	rjmp	.+12     	; 0x220c <vfprintf+0x29c>
    2200:	60 81       	ld	r22, Z
    2202:	71 81       	ldd	r23, Z+1	; 0x01
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	0e 5f       	subi	r16, 0xFE	; 254
    220a:	1f 4f       	sbci	r17, 0xFF	; 255
    220c:	a3 01       	movw	r20, r6
    220e:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <__ultoa_invert>
    2212:	88 2e       	mov	r8, r24
    2214:	86 18       	sub	r8, r6
    2216:	fb 2d       	mov	r31, r11
    2218:	ff 77       	andi	r31, 0x7F	; 127
    221a:	3f 2e       	mov	r3, r31
    221c:	36 fe       	sbrs	r3, 6
    221e:	0d c0       	rjmp	.+26     	; 0x223a <vfprintf+0x2ca>
    2220:	23 2d       	mov	r18, r3
    2222:	2e 7f       	andi	r18, 0xFE	; 254
    2224:	a2 2e       	mov	r10, r18
    2226:	89 14       	cp	r8, r9
    2228:	58 f4       	brcc	.+22     	; 0x2240 <vfprintf+0x2d0>
    222a:	34 fe       	sbrs	r3, 4
    222c:	0b c0       	rjmp	.+22     	; 0x2244 <vfprintf+0x2d4>
    222e:	32 fc       	sbrc	r3, 2
    2230:	09 c0       	rjmp	.+18     	; 0x2244 <vfprintf+0x2d4>
    2232:	83 2d       	mov	r24, r3
    2234:	8e 7e       	andi	r24, 0xEE	; 238
    2236:	a8 2e       	mov	r10, r24
    2238:	05 c0       	rjmp	.+10     	; 0x2244 <vfprintf+0x2d4>
    223a:	b8 2c       	mov	r11, r8
    223c:	a3 2c       	mov	r10, r3
    223e:	03 c0       	rjmp	.+6      	; 0x2246 <vfprintf+0x2d6>
    2240:	b8 2c       	mov	r11, r8
    2242:	01 c0       	rjmp	.+2      	; 0x2246 <vfprintf+0x2d6>
    2244:	b9 2c       	mov	r11, r9
    2246:	a4 fe       	sbrs	r10, 4
    2248:	0f c0       	rjmp	.+30     	; 0x2268 <vfprintf+0x2f8>
    224a:	fe 01       	movw	r30, r28
    224c:	e8 0d       	add	r30, r8
    224e:	f1 1d       	adc	r31, r1
    2250:	80 81       	ld	r24, Z
    2252:	80 33       	cpi	r24, 0x30	; 48
    2254:	21 f4       	brne	.+8      	; 0x225e <vfprintf+0x2ee>
    2256:	9a 2d       	mov	r25, r10
    2258:	99 7e       	andi	r25, 0xE9	; 233
    225a:	a9 2e       	mov	r10, r25
    225c:	09 c0       	rjmp	.+18     	; 0x2270 <vfprintf+0x300>
    225e:	a2 fe       	sbrs	r10, 2
    2260:	06 c0       	rjmp	.+12     	; 0x226e <vfprintf+0x2fe>
    2262:	b3 94       	inc	r11
    2264:	b3 94       	inc	r11
    2266:	04 c0       	rjmp	.+8      	; 0x2270 <vfprintf+0x300>
    2268:	8a 2d       	mov	r24, r10
    226a:	86 78       	andi	r24, 0x86	; 134
    226c:	09 f0       	breq	.+2      	; 0x2270 <vfprintf+0x300>
    226e:	b3 94       	inc	r11
    2270:	a3 fc       	sbrc	r10, 3
    2272:	11 c0       	rjmp	.+34     	; 0x2296 <vfprintf+0x326>
    2274:	a0 fe       	sbrs	r10, 0
    2276:	06 c0       	rjmp	.+12     	; 0x2284 <vfprintf+0x314>
    2278:	b2 14       	cp	r11, r2
    227a:	88 f4       	brcc	.+34     	; 0x229e <vfprintf+0x32e>
    227c:	28 0c       	add	r2, r8
    227e:	92 2c       	mov	r9, r2
    2280:	9b 18       	sub	r9, r11
    2282:	0e c0       	rjmp	.+28     	; 0x22a0 <vfprintf+0x330>
    2284:	b2 14       	cp	r11, r2
    2286:	60 f4       	brcc	.+24     	; 0x22a0 <vfprintf+0x330>
    2288:	b6 01       	movw	r22, r12
    228a:	80 e2       	ldi	r24, 0x20	; 32
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	0e 94 af 11 	call	0x235e	; 0x235e <fputc>
    2292:	b3 94       	inc	r11
    2294:	f7 cf       	rjmp	.-18     	; 0x2284 <vfprintf+0x314>
    2296:	b2 14       	cp	r11, r2
    2298:	18 f4       	brcc	.+6      	; 0x22a0 <vfprintf+0x330>
    229a:	2b 18       	sub	r2, r11
    229c:	02 c0       	rjmp	.+4      	; 0x22a2 <vfprintf+0x332>
    229e:	98 2c       	mov	r9, r8
    22a0:	21 2c       	mov	r2, r1
    22a2:	a4 fe       	sbrs	r10, 4
    22a4:	10 c0       	rjmp	.+32     	; 0x22c6 <vfprintf+0x356>
    22a6:	b6 01       	movw	r22, r12
    22a8:	80 e3       	ldi	r24, 0x30	; 48
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	0e 94 af 11 	call	0x235e	; 0x235e <fputc>
    22b0:	a2 fe       	sbrs	r10, 2
    22b2:	17 c0       	rjmp	.+46     	; 0x22e2 <vfprintf+0x372>
    22b4:	a1 fc       	sbrc	r10, 1
    22b6:	03 c0       	rjmp	.+6      	; 0x22be <vfprintf+0x34e>
    22b8:	88 e7       	ldi	r24, 0x78	; 120
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	02 c0       	rjmp	.+4      	; 0x22c2 <vfprintf+0x352>
    22be:	88 e5       	ldi	r24, 0x58	; 88
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	b6 01       	movw	r22, r12
    22c4:	0c c0       	rjmp	.+24     	; 0x22de <vfprintf+0x36e>
    22c6:	8a 2d       	mov	r24, r10
    22c8:	86 78       	andi	r24, 0x86	; 134
    22ca:	59 f0       	breq	.+22     	; 0x22e2 <vfprintf+0x372>
    22cc:	a1 fe       	sbrs	r10, 1
    22ce:	02 c0       	rjmp	.+4      	; 0x22d4 <vfprintf+0x364>
    22d0:	8b e2       	ldi	r24, 0x2B	; 43
    22d2:	01 c0       	rjmp	.+2      	; 0x22d6 <vfprintf+0x366>
    22d4:	80 e2       	ldi	r24, 0x20	; 32
    22d6:	a7 fc       	sbrc	r10, 7
    22d8:	8d e2       	ldi	r24, 0x2D	; 45
    22da:	b6 01       	movw	r22, r12
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	0e 94 af 11 	call	0x235e	; 0x235e <fputc>
    22e2:	89 14       	cp	r8, r9
    22e4:	38 f4       	brcc	.+14     	; 0x22f4 <vfprintf+0x384>
    22e6:	b6 01       	movw	r22, r12
    22e8:	80 e3       	ldi	r24, 0x30	; 48
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	0e 94 af 11 	call	0x235e	; 0x235e <fputc>
    22f0:	9a 94       	dec	r9
    22f2:	f7 cf       	rjmp	.-18     	; 0x22e2 <vfprintf+0x372>
    22f4:	8a 94       	dec	r8
    22f6:	f3 01       	movw	r30, r6
    22f8:	e8 0d       	add	r30, r8
    22fa:	f1 1d       	adc	r31, r1
    22fc:	80 81       	ld	r24, Z
    22fe:	b6 01       	movw	r22, r12
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	0e 94 af 11 	call	0x235e	; 0x235e <fputc>
    2306:	81 10       	cpse	r8, r1
    2308:	f5 cf       	rjmp	.-22     	; 0x22f4 <vfprintf+0x384>
    230a:	22 20       	and	r2, r2
    230c:	09 f4       	brne	.+2      	; 0x2310 <vfprintf+0x3a0>
    230e:	42 ce       	rjmp	.-892    	; 0x1f94 <vfprintf+0x24>
    2310:	b6 01       	movw	r22, r12
    2312:	80 e2       	ldi	r24, 0x20	; 32
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	0e 94 af 11 	call	0x235e	; 0x235e <fputc>
    231a:	2a 94       	dec	r2
    231c:	f6 cf       	rjmp	.-20     	; 0x230a <vfprintf+0x39a>
    231e:	f6 01       	movw	r30, r12
    2320:	86 81       	ldd	r24, Z+6	; 0x06
    2322:	97 81       	ldd	r25, Z+7	; 0x07
    2324:	02 c0       	rjmp	.+4      	; 0x232a <vfprintf+0x3ba>
    2326:	8f ef       	ldi	r24, 0xFF	; 255
    2328:	9f ef       	ldi	r25, 0xFF	; 255
    232a:	2b 96       	adiw	r28, 0x0b	; 11
    232c:	e2 e1       	ldi	r30, 0x12	; 18
    232e:	0c 94 8d 12 	jmp	0x251a	; 0x251a <__epilogue_restores__>

00002332 <strnlen_P>:
    2332:	fc 01       	movw	r30, r24
    2334:	05 90       	lpm	r0, Z+
    2336:	61 50       	subi	r22, 0x01	; 1
    2338:	70 40       	sbci	r23, 0x00	; 0
    233a:	01 10       	cpse	r0, r1
    233c:	d8 f7       	brcc	.-10     	; 0x2334 <strnlen_P+0x2>
    233e:	80 95       	com	r24
    2340:	90 95       	com	r25
    2342:	8e 0f       	add	r24, r30
    2344:	9f 1f       	adc	r25, r31
    2346:	08 95       	ret

00002348 <strnlen>:
    2348:	fc 01       	movw	r30, r24
    234a:	61 50       	subi	r22, 0x01	; 1
    234c:	70 40       	sbci	r23, 0x00	; 0
    234e:	01 90       	ld	r0, Z+
    2350:	01 10       	cpse	r0, r1
    2352:	d8 f7       	brcc	.-10     	; 0x234a <strnlen+0x2>
    2354:	80 95       	com	r24
    2356:	90 95       	com	r25
    2358:	8e 0f       	add	r24, r30
    235a:	9f 1f       	adc	r25, r31
    235c:	08 95       	ret

0000235e <fputc>:
    235e:	0f 93       	push	r16
    2360:	1f 93       	push	r17
    2362:	cf 93       	push	r28
    2364:	df 93       	push	r29
    2366:	fb 01       	movw	r30, r22
    2368:	23 81       	ldd	r18, Z+3	; 0x03
    236a:	21 fd       	sbrc	r18, 1
    236c:	03 c0       	rjmp	.+6      	; 0x2374 <fputc+0x16>
    236e:	8f ef       	ldi	r24, 0xFF	; 255
    2370:	9f ef       	ldi	r25, 0xFF	; 255
    2372:	2c c0       	rjmp	.+88     	; 0x23cc <fputc+0x6e>
    2374:	22 ff       	sbrs	r18, 2
    2376:	16 c0       	rjmp	.+44     	; 0x23a4 <fputc+0x46>
    2378:	46 81       	ldd	r20, Z+6	; 0x06
    237a:	57 81       	ldd	r21, Z+7	; 0x07
    237c:	24 81       	ldd	r18, Z+4	; 0x04
    237e:	35 81       	ldd	r19, Z+5	; 0x05
    2380:	42 17       	cp	r20, r18
    2382:	53 07       	cpc	r21, r19
    2384:	44 f4       	brge	.+16     	; 0x2396 <fputc+0x38>
    2386:	a0 81       	ld	r26, Z
    2388:	b1 81       	ldd	r27, Z+1	; 0x01
    238a:	9d 01       	movw	r18, r26
    238c:	2f 5f       	subi	r18, 0xFF	; 255
    238e:	3f 4f       	sbci	r19, 0xFF	; 255
    2390:	31 83       	std	Z+1, r19	; 0x01
    2392:	20 83       	st	Z, r18
    2394:	8c 93       	st	X, r24
    2396:	26 81       	ldd	r18, Z+6	; 0x06
    2398:	37 81       	ldd	r19, Z+7	; 0x07
    239a:	2f 5f       	subi	r18, 0xFF	; 255
    239c:	3f 4f       	sbci	r19, 0xFF	; 255
    239e:	37 83       	std	Z+7, r19	; 0x07
    23a0:	26 83       	std	Z+6, r18	; 0x06
    23a2:	14 c0       	rjmp	.+40     	; 0x23cc <fputc+0x6e>
    23a4:	8b 01       	movw	r16, r22
    23a6:	ec 01       	movw	r28, r24
    23a8:	fb 01       	movw	r30, r22
    23aa:	00 84       	ldd	r0, Z+8	; 0x08
    23ac:	f1 85       	ldd	r31, Z+9	; 0x09
    23ae:	e0 2d       	mov	r30, r0
    23b0:	09 95       	icall
    23b2:	89 2b       	or	r24, r25
    23b4:	e1 f6       	brne	.-72     	; 0x236e <fputc+0x10>
    23b6:	d8 01       	movw	r26, r16
    23b8:	16 96       	adiw	r26, 0x06	; 6
    23ba:	8d 91       	ld	r24, X+
    23bc:	9c 91       	ld	r25, X
    23be:	17 97       	sbiw	r26, 0x07	; 7
    23c0:	01 96       	adiw	r24, 0x01	; 1
    23c2:	17 96       	adiw	r26, 0x07	; 7
    23c4:	9c 93       	st	X, r25
    23c6:	8e 93       	st	-X, r24
    23c8:	16 97       	sbiw	r26, 0x06	; 6
    23ca:	ce 01       	movw	r24, r28
    23cc:	df 91       	pop	r29
    23ce:	cf 91       	pop	r28
    23d0:	1f 91       	pop	r17
    23d2:	0f 91       	pop	r16
    23d4:	08 95       	ret

000023d6 <__ultoa_invert>:
    23d6:	fa 01       	movw	r30, r20
    23d8:	aa 27       	eor	r26, r26
    23da:	28 30       	cpi	r18, 0x08	; 8
    23dc:	51 f1       	breq	.+84     	; 0x2432 <__ultoa_invert+0x5c>
    23de:	20 31       	cpi	r18, 0x10	; 16
    23e0:	81 f1       	breq	.+96     	; 0x2442 <__ultoa_invert+0x6c>
    23e2:	e8 94       	clt
    23e4:	6f 93       	push	r22
    23e6:	6e 7f       	andi	r22, 0xFE	; 254
    23e8:	6e 5f       	subi	r22, 0xFE	; 254
    23ea:	7f 4f       	sbci	r23, 0xFF	; 255
    23ec:	8f 4f       	sbci	r24, 0xFF	; 255
    23ee:	9f 4f       	sbci	r25, 0xFF	; 255
    23f0:	af 4f       	sbci	r26, 0xFF	; 255
    23f2:	b1 e0       	ldi	r27, 0x01	; 1
    23f4:	3e d0       	rcall	.+124    	; 0x2472 <__ultoa_invert+0x9c>
    23f6:	b4 e0       	ldi	r27, 0x04	; 4
    23f8:	3c d0       	rcall	.+120    	; 0x2472 <__ultoa_invert+0x9c>
    23fa:	67 0f       	add	r22, r23
    23fc:	78 1f       	adc	r23, r24
    23fe:	89 1f       	adc	r24, r25
    2400:	9a 1f       	adc	r25, r26
    2402:	a1 1d       	adc	r26, r1
    2404:	68 0f       	add	r22, r24
    2406:	79 1f       	adc	r23, r25
    2408:	8a 1f       	adc	r24, r26
    240a:	91 1d       	adc	r25, r1
    240c:	a1 1d       	adc	r26, r1
    240e:	6a 0f       	add	r22, r26
    2410:	71 1d       	adc	r23, r1
    2412:	81 1d       	adc	r24, r1
    2414:	91 1d       	adc	r25, r1
    2416:	a1 1d       	adc	r26, r1
    2418:	20 d0       	rcall	.+64     	; 0x245a <__ultoa_invert+0x84>
    241a:	09 f4       	brne	.+2      	; 0x241e <__ultoa_invert+0x48>
    241c:	68 94       	set
    241e:	3f 91       	pop	r19
    2420:	2a e0       	ldi	r18, 0x0A	; 10
    2422:	26 9f       	mul	r18, r22
    2424:	11 24       	eor	r1, r1
    2426:	30 19       	sub	r19, r0
    2428:	30 5d       	subi	r19, 0xD0	; 208
    242a:	31 93       	st	Z+, r19
    242c:	de f6       	brtc	.-74     	; 0x23e4 <__ultoa_invert+0xe>
    242e:	cf 01       	movw	r24, r30
    2430:	08 95       	ret
    2432:	46 2f       	mov	r20, r22
    2434:	47 70       	andi	r20, 0x07	; 7
    2436:	40 5d       	subi	r20, 0xD0	; 208
    2438:	41 93       	st	Z+, r20
    243a:	b3 e0       	ldi	r27, 0x03	; 3
    243c:	0f d0       	rcall	.+30     	; 0x245c <__ultoa_invert+0x86>
    243e:	c9 f7       	brne	.-14     	; 0x2432 <__ultoa_invert+0x5c>
    2440:	f6 cf       	rjmp	.-20     	; 0x242e <__ultoa_invert+0x58>
    2442:	46 2f       	mov	r20, r22
    2444:	4f 70       	andi	r20, 0x0F	; 15
    2446:	40 5d       	subi	r20, 0xD0	; 208
    2448:	4a 33       	cpi	r20, 0x3A	; 58
    244a:	18 f0       	brcs	.+6      	; 0x2452 <__ultoa_invert+0x7c>
    244c:	49 5d       	subi	r20, 0xD9	; 217
    244e:	31 fd       	sbrc	r19, 1
    2450:	40 52       	subi	r20, 0x20	; 32
    2452:	41 93       	st	Z+, r20
    2454:	02 d0       	rcall	.+4      	; 0x245a <__ultoa_invert+0x84>
    2456:	a9 f7       	brne	.-22     	; 0x2442 <__ultoa_invert+0x6c>
    2458:	ea cf       	rjmp	.-44     	; 0x242e <__ultoa_invert+0x58>
    245a:	b4 e0       	ldi	r27, 0x04	; 4
    245c:	a6 95       	lsr	r26
    245e:	97 95       	ror	r25
    2460:	87 95       	ror	r24
    2462:	77 95       	ror	r23
    2464:	67 95       	ror	r22
    2466:	ba 95       	dec	r27
    2468:	c9 f7       	brne	.-14     	; 0x245c <__ultoa_invert+0x86>
    246a:	00 97       	sbiw	r24, 0x00	; 0
    246c:	61 05       	cpc	r22, r1
    246e:	71 05       	cpc	r23, r1
    2470:	08 95       	ret
    2472:	9b 01       	movw	r18, r22
    2474:	ac 01       	movw	r20, r24
    2476:	0a 2e       	mov	r0, r26
    2478:	06 94       	lsr	r0
    247a:	57 95       	ror	r21
    247c:	47 95       	ror	r20
    247e:	37 95       	ror	r19
    2480:	27 95       	ror	r18
    2482:	ba 95       	dec	r27
    2484:	c9 f7       	brne	.-14     	; 0x2478 <__ultoa_invert+0xa2>
    2486:	62 0f       	add	r22, r18
    2488:	73 1f       	adc	r23, r19
    248a:	84 1f       	adc	r24, r20
    248c:	95 1f       	adc	r25, r21
    248e:	a0 1d       	adc	r26, r0
    2490:	08 95       	ret

00002492 <eeprom_read_word>:
    2492:	a8 e1       	ldi	r26, 0x18	; 24
    2494:	b0 e0       	ldi	r27, 0x00	; 0
    2496:	42 e0       	ldi	r20, 0x02	; 2
    2498:	50 e0       	ldi	r21, 0x00	; 0
    249a:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <eeprom_read_blraw>

0000249e <eeprom_write_word>:
    249e:	0e 94 64 12 	call	0x24c8	; 0x24c8 <eeprom_write_byte>
    24a2:	27 2f       	mov	r18, r23
    24a4:	0c 94 65 12 	jmp	0x24ca	; 0x24ca <eeprom_write_r18>

000024a8 <eeprom_read_block>:
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22

000024ac <eeprom_read_blraw>:
    24ac:	fc 01       	movw	r30, r24
    24ae:	e1 99       	sbic	0x1c, 1	; 28
    24b0:	fe cf       	rjmp	.-4      	; 0x24ae <eeprom_read_blraw+0x2>
    24b2:	06 c0       	rjmp	.+12     	; 0x24c0 <eeprom_read_blraw+0x14>
    24b4:	ff bb       	out	0x1f, r31	; 31
    24b6:	ee bb       	out	0x1e, r30	; 30
    24b8:	e0 9a       	sbi	0x1c, 0	; 28
    24ba:	31 96       	adiw	r30, 0x01	; 1
    24bc:	0d b2       	in	r0, 0x1d	; 29
    24be:	0d 92       	st	X+, r0
    24c0:	41 50       	subi	r20, 0x01	; 1
    24c2:	50 40       	sbci	r21, 0x00	; 0
    24c4:	b8 f7       	brcc	.-18     	; 0x24b4 <eeprom_read_blraw+0x8>
    24c6:	08 95       	ret

000024c8 <eeprom_write_byte>:
    24c8:	26 2f       	mov	r18, r22

000024ca <eeprom_write_r18>:
    24ca:	e1 99       	sbic	0x1c, 1	; 28
    24cc:	fe cf       	rjmp	.-4      	; 0x24ca <eeprom_write_r18>
    24ce:	9f bb       	out	0x1f, r25	; 31
    24d0:	8e bb       	out	0x1e, r24	; 30
    24d2:	2d bb       	out	0x1d, r18	; 29
    24d4:	0f b6       	in	r0, 0x3f	; 63
    24d6:	f8 94       	cli
    24d8:	e2 9a       	sbi	0x1c, 2	; 28
    24da:	e1 9a       	sbi	0x1c, 1	; 28
    24dc:	0f be       	out	0x3f, r0	; 63
    24de:	01 96       	adiw	r24, 0x01	; 1
    24e0:	08 95       	ret

000024e2 <__prologue_saves__>:
    24e2:	2f 92       	push	r2
    24e4:	3f 92       	push	r3
    24e6:	4f 92       	push	r4
    24e8:	5f 92       	push	r5
    24ea:	6f 92       	push	r6
    24ec:	7f 92       	push	r7
    24ee:	8f 92       	push	r8
    24f0:	9f 92       	push	r9
    24f2:	af 92       	push	r10
    24f4:	bf 92       	push	r11
    24f6:	cf 92       	push	r12
    24f8:	df 92       	push	r13
    24fa:	ef 92       	push	r14
    24fc:	ff 92       	push	r15
    24fe:	0f 93       	push	r16
    2500:	1f 93       	push	r17
    2502:	cf 93       	push	r28
    2504:	df 93       	push	r29
    2506:	cd b7       	in	r28, 0x3d	; 61
    2508:	de b7       	in	r29, 0x3e	; 62
    250a:	ca 1b       	sub	r28, r26
    250c:	db 0b       	sbc	r29, r27
    250e:	0f b6       	in	r0, 0x3f	; 63
    2510:	f8 94       	cli
    2512:	de bf       	out	0x3e, r29	; 62
    2514:	0f be       	out	0x3f, r0	; 63
    2516:	cd bf       	out	0x3d, r28	; 61
    2518:	09 94       	ijmp

0000251a <__epilogue_restores__>:
    251a:	2a 88       	ldd	r2, Y+18	; 0x12
    251c:	39 88       	ldd	r3, Y+17	; 0x11
    251e:	48 88       	ldd	r4, Y+16	; 0x10
    2520:	5f 84       	ldd	r5, Y+15	; 0x0f
    2522:	6e 84       	ldd	r6, Y+14	; 0x0e
    2524:	7d 84       	ldd	r7, Y+13	; 0x0d
    2526:	8c 84       	ldd	r8, Y+12	; 0x0c
    2528:	9b 84       	ldd	r9, Y+11	; 0x0b
    252a:	aa 84       	ldd	r10, Y+10	; 0x0a
    252c:	b9 84       	ldd	r11, Y+9	; 0x09
    252e:	c8 84       	ldd	r12, Y+8	; 0x08
    2530:	df 80       	ldd	r13, Y+7	; 0x07
    2532:	ee 80       	ldd	r14, Y+6	; 0x06
    2534:	fd 80       	ldd	r15, Y+5	; 0x05
    2536:	0c 81       	ldd	r16, Y+4	; 0x04
    2538:	1b 81       	ldd	r17, Y+3	; 0x03
    253a:	aa 81       	ldd	r26, Y+2	; 0x02
    253c:	b9 81       	ldd	r27, Y+1	; 0x01
    253e:	ce 0f       	add	r28, r30
    2540:	d1 1d       	adc	r29, r1
    2542:	0f b6       	in	r0, 0x3f	; 63
    2544:	f8 94       	cli
    2546:	de bf       	out	0x3e, r29	; 62
    2548:	0f be       	out	0x3f, r0	; 63
    254a:	cd bf       	out	0x3d, r28	; 61
    254c:	ed 01       	movw	r28, r26
    254e:	08 95       	ret

00002550 <_exit>:
    2550:	f8 94       	cli

00002552 <__stop_program>:
    2552:	ff cf       	rjmp	.-2      	; 0x2552 <__stop_program>
