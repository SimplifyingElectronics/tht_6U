
tht_U6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  000004bc  00000550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  008000a6  008000a6  00000596  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000596  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000608  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001512  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090b  00000000  00000000  00001c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000abf  00000000  00000000  00002585  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b4  00000000  00000000  00003044  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c3  00000000  00000000  000032f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000950  00000000  00000000  000038bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000420b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec eb       	ldi	r30, 0xBC	; 188
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3a       	cpi	r26, 0xA6	; 166
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 ea       	ldi	r26, 0xA6	; 166
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 3b       	cpi	r26, 0xB9	; 185
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e7 01 	call	0x3ce	; 0x3ce <main>
  8a:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Command>:
	LCD_Char('.'); // '.'

	LCD_Char((value / 10) % 10 + 48); //'8'

	LCD_Char((value) % 10 + 48); //'5'
}
  92:	85 bb       	out	0x15, r24	; 21
  94:	82 b3       	in	r24, 0x12	; 18
  96:	8f 7b       	andi	r24, 0xBF	; 191
  98:	82 bb       	out	0x12, r24	; 18
  9a:	82 b3       	in	r24, 0x12	; 18
  9c:	80 68       	ori	r24, 0x80	; 128
  9e:	82 bb       	out	0x12, r24	; 18
  a0:	25 e3       	ldi	r18, 0x35	; 53
  a2:	2a 95       	dec	r18
  a4:	f1 f7       	brne	.-4      	; 0xa2 <LCD_Command+0x10>
  a6:	00 00       	nop
  a8:	82 b3       	in	r24, 0x12	; 18
  aa:	8f 77       	andi	r24, 0x7F	; 127
  ac:	82 bb       	out	0x12, r24	; 18
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	96 e7       	ldi	r25, 0x76	; 118
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	81 50       	subi	r24, 0x01	; 1
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	20 40       	sbci	r18, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <LCD_Command+0x22>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <LCD_Command+0x2c>
  be:	00 00       	nop
  c0:	08 95       	ret

000000c2 <LCD_Char>:
  c2:	85 bb       	out	0x15, r24	; 21
  c4:	82 b3       	in	r24, 0x12	; 18
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	82 bb       	out	0x12, r24	; 18
  ca:	82 b3       	in	r24, 0x12	; 18
  cc:	80 68       	ori	r24, 0x80	; 128
  ce:	82 bb       	out	0x12, r24	; 18
  d0:	85 e3       	ldi	r24, 0x35	; 53
  d2:	8a 95       	dec	r24
  d4:	f1 f7       	brne	.-4      	; 0xd2 <LCD_Char+0x10>
  d6:	00 00       	nop
  d8:	82 b3       	in	r24, 0x12	; 18
  da:	8f 77       	andi	r24, 0x7F	; 127
  dc:	82 bb       	out	0x12, r24	; 18
  de:	8f e3       	ldi	r24, 0x3F	; 63
  e0:	9c e9       	ldi	r25, 0x9C	; 156
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <LCD_Char+0x20>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <LCD_Char+0x26>
  e8:	00 00       	nop
  ea:	08 95       	ret

000000ec <LCD_write>:
  ec:	85 bb       	out	0x15, r24	; 21
  ee:	82 b3       	in	r24, 0x12	; 18
  f0:	80 64       	ori	r24, 0x40	; 64
  f2:	82 bb       	out	0x12, r24	; 18
  f4:	82 b3       	in	r24, 0x12	; 18
  f6:	80 68       	ori	r24, 0x80	; 128
  f8:	82 bb       	out	0x12, r24	; 18
  fa:	85 e3       	ldi	r24, 0x35	; 53
  fc:	8a 95       	dec	r24
  fe:	f1 f7       	brne	.-4      	; 0xfc <LCD_write+0x10>
 100:	00 00       	nop
 102:	82 b3       	in	r24, 0x12	; 18
 104:	8f 77       	andi	r24, 0x7F	; 127
 106:	82 bb       	out	0x12, r24	; 18
 108:	8f e3       	ldi	r24, 0x3F	; 63
 10a:	9c e9       	ldi	r25, 0x9C	; 156
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCD_write+0x20>
 110:	00 c0       	rjmp	.+0      	; 0x112 <LCD_write+0x26>
 112:	00 00       	nop
 114:	08 95       	ret

00000116 <LCD_Init>:
 116:	81 b3       	in	r24, 0x11	; 17
 118:	80 6c       	ori	r24, 0xC0	; 192
 11a:	81 bb       	out	0x11, r24	; 17
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	84 bb       	out	0x14, r24	; 20
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	83 ec       	ldi	r24, 0xC3	; 195
 124:	99 e0       	ldi	r25, 0x09	; 9
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <LCD_Init+0x10>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <LCD_Init+0x1a>
 130:	00 00       	nop
 132:	88 e3       	ldi	r24, 0x38	; 56
 134:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 138:	25 e3       	ldi	r18, 0x35	; 53
 13a:	2a 95       	dec	r18
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCD_Init+0x24>
 13e:	00 00       	nop
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 146:	85 e3       	ldi	r24, 0x35	; 53
 148:	8a 95       	dec	r24
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCD_Init+0x32>
 14c:	00 00       	nop
 14e:	8e e0       	ldi	r24, 0x0E	; 14
 150:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 154:	95 e3       	ldi	r25, 0x35	; 53
 156:	9a 95       	dec	r25
 158:	f1 f7       	brne	.-4      	; 0x156 <LCD_Init+0x40>
 15a:	00 00       	nop
 15c:	80 e8       	ldi	r24, 0x80	; 128
 15e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 162:	8f ec       	ldi	r24, 0xCF	; 207
 164:	97 e0       	ldi	r25, 0x07	; 7
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <LCD_Init+0x50>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <LCD_Init+0x56>
 16c:	00 00       	nop
 16e:	08 95       	ret

00000170 <LCD_write_string>:
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	8c 01       	movw	r16, r24
 17a:	c0 e0       	ldi	r28, 0x00	; 0
 17c:	d0 e0       	ldi	r29, 0x00	; 0
 17e:	03 c0       	rjmp	.+6      	; 0x186 <LCD_write_string+0x16>
 180:	0e 94 76 00 	call	0xec	; 0xec <LCD_write>
 184:	21 96       	adiw	r28, 0x01	; 1
 186:	f8 01       	movw	r30, r16
 188:	ec 0f       	add	r30, r28
 18a:	fd 1f       	adc	r31, r29
 18c:	80 81       	ld	r24, Z
 18e:	81 11       	cpse	r24, r1
 190:	f7 cf       	rjmp	.-18     	; 0x180 <LCD_write_string+0x10>
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	1f 91       	pop	r17
 198:	0f 91       	pop	r16
 19a:	08 95       	ret

0000019c <LCD_location>:
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	00 d0       	rcall	.+0      	; 0x1a2 <LCD_location+0x6>
 1a2:	00 d0       	rcall	.+0      	; 0x1a4 <LCD_location+0x8>
 1a4:	cd b7       	in	r28, 0x3d	; 61
 1a6:	de b7       	in	r29, 0x3e	; 62
 1a8:	90 e8       	ldi	r25, 0x80	; 128
 1aa:	99 83       	std	Y+1, r25	; 0x01
 1ac:	90 ec       	ldi	r25, 0xC0	; 192
 1ae:	9a 83       	std	Y+2, r25	; 0x02
 1b0:	94 e9       	ldi	r25, 0x94	; 148
 1b2:	9b 83       	std	Y+3, r25	; 0x03
 1b4:	94 ed       	ldi	r25, 0xD4	; 212
 1b6:	9c 83       	std	Y+4, r25	; 0x04
 1b8:	e8 2f       	mov	r30, r24
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	31 97       	sbiw	r30, 0x01	; 1
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	8c 0f       	add	r24, r28
 1c4:	9d 1f       	adc	r25, r29
 1c6:	e8 0f       	add	r30, r24
 1c8:	f9 1f       	adc	r31, r25
 1ca:	80 81       	ld	r24, Z
 1cc:	86 0f       	add	r24, r22
 1ce:	81 50       	subi	r24, 0x01	; 1
 1d0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 1d4:	9f ef       	ldi	r25, 0xFF	; 255
 1d6:	21 ee       	ldi	r18, 0xE1	; 225
 1d8:	84 e0       	ldi	r24, 0x04	; 4
 1da:	91 50       	subi	r25, 0x01	; 1
 1dc:	20 40       	sbci	r18, 0x00	; 0
 1de:	80 40       	sbci	r24, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <LCD_location+0x3e>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <LCD_location+0x48>
 1e4:	00 00       	nop
 1e6:	0f 90       	pop	r0
 1e8:	0f 90       	pop	r0
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <LCD_Clear>:
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 1fa:	80 e8       	ldi	r24, 0x80	; 128
 1fc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 200:	08 95       	ret

00000202 <LCD_showvalue>:

void LCD_showvalue(uint16_t data)
{
 202:	0f 93       	push	r16
 204:	1f 93       	push	r17
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	8c 01       	movw	r16, r24
	LCD_write(((data / 100) % 10) + 0x30);
 20c:	9c 01       	movw	r18, r24
 20e:	36 95       	lsr	r19
 210:	27 95       	ror	r18
 212:	36 95       	lsr	r19
 214:	27 95       	ror	r18
 216:	ab e7       	ldi	r26, 0x7B	; 123
 218:	b4 e1       	ldi	r27, 0x14	; 20
 21a:	0e 94 3b 02 	call	0x476	; 0x476 <__umulhisi3>
 21e:	ac 01       	movw	r20, r24
 220:	56 95       	lsr	r21
 222:	47 95       	ror	r20
 224:	9a 01       	movw	r18, r20
 226:	ad ec       	ldi	r26, 0xCD	; 205
 228:	bc ec       	ldi	r27, 0xCC	; 204
 22a:	0e 94 3b 02 	call	0x476	; 0x476 <__umulhisi3>
 22e:	96 95       	lsr	r25
 230:	87 95       	ror	r24
 232:	96 95       	lsr	r25
 234:	87 95       	ror	r24
 236:	96 95       	lsr	r25
 238:	87 95       	ror	r24
 23a:	9c 01       	movw	r18, r24
 23c:	22 0f       	add	r18, r18
 23e:	33 1f       	adc	r19, r19
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	82 0f       	add	r24, r18
 24e:	93 1f       	adc	r25, r19
 250:	9a 01       	movw	r18, r20
 252:	28 1b       	sub	r18, r24
 254:	39 0b       	sbc	r19, r25
 256:	c9 01       	movw	r24, r18
 258:	80 5d       	subi	r24, 0xD0	; 208
 25a:	0e 94 76 00 	call	0xec	; 0xec <LCD_write>
	LCD_write(((data / 10) % 10) + 0x30);
 25e:	98 01       	movw	r18, r16
 260:	ad ec       	ldi	r26, 0xCD	; 205
 262:	bc ec       	ldi	r27, 0xCC	; 204
 264:	0e 94 3b 02 	call	0x476	; 0x476 <__umulhisi3>
 268:	ec 01       	movw	r28, r24
 26a:	d6 95       	lsr	r29
 26c:	c7 95       	ror	r28
 26e:	d6 95       	lsr	r29
 270:	c7 95       	ror	r28
 272:	d6 95       	lsr	r29
 274:	c7 95       	ror	r28
 276:	9e 01       	movw	r18, r28
 278:	0e 94 3b 02 	call	0x476	; 0x476 <__umulhisi3>
 27c:	96 95       	lsr	r25
 27e:	87 95       	ror	r24
 280:	96 95       	lsr	r25
 282:	87 95       	ror	r24
 284:	96 95       	lsr	r25
 286:	87 95       	ror	r24
 288:	9c 01       	movw	r18, r24
 28a:	22 0f       	add	r18, r18
 28c:	33 1f       	adc	r19, r19
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	82 0f       	add	r24, r18
 29c:	93 1f       	adc	r25, r19
 29e:	9e 01       	movw	r18, r28
 2a0:	28 1b       	sub	r18, r24
 2a2:	39 0b       	sbc	r19, r25
 2a4:	c9 01       	movw	r24, r18
 2a6:	80 5d       	subi	r24, 0xD0	; 208
 2a8:	0e 94 76 00 	call	0xec	; 0xec <LCD_write>
	LCD_Char('.');
 2ac:	8e e2       	ldi	r24, 0x2E	; 46
 2ae:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_Char>
	LCD_write(((data / 1) % 10) + 0x30);
 2b2:	ce 01       	movw	r24, r28
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	cc 0f       	add	r28, r28
 2ba:	dd 1f       	adc	r29, r29
 2bc:	cc 0f       	add	r28, r28
 2be:	dd 1f       	adc	r29, r29
 2c0:	cc 0f       	add	r28, r28
 2c2:	dd 1f       	adc	r29, r29
 2c4:	c8 0f       	add	r28, r24
 2c6:	d9 1f       	adc	r29, r25
 2c8:	c8 01       	movw	r24, r16
 2ca:	8c 1b       	sub	r24, r28
 2cc:	9d 0b       	sbc	r25, r29
 2ce:	80 5d       	subi	r24, 0xD0	; 208
 2d0:	0e 94 76 00 	call	0xec	; 0xec <LCD_write>
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	1f 91       	pop	r17
 2da:	0f 91       	pop	r16
 2dc:	08 95       	ret

000002de <__vector_3>:
	/*  */
	DDRD &= (~(1<<5));
}

ISR(TIMER2_COMP_vect)
{
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	0f 92       	push	r0
 2e6:	11 24       	eor	r1, r1
 2e8:	2f 93       	push	r18
 2ea:	3f 93       	push	r19
 2ec:	4f 93       	push	r20
 2ee:	5f 93       	push	r21
 2f0:	6f 93       	push	r22
 2f2:	7f 93       	push	r23
 2f4:	8f 93       	push	r24
 2f6:	9f 93       	push	r25
 2f8:	af 93       	push	r26
 2fa:	bf 93       	push	r27
 2fc:	ef 93       	push	r30
 2fe:	ff 93       	push	r31
	fcnt_millis++;
 300:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <fcnt_millis>
 304:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <fcnt_millis+0x1>
 308:	a0 91 aa 00 	lds	r26, 0x00AA	; 0x8000aa <fcnt_millis+0x2>
 30c:	b0 91 ab 00 	lds	r27, 0x00AB	; 0x8000ab <fcnt_millis+0x3>
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	a1 1d       	adc	r26, r1
 314:	b1 1d       	adc	r27, r1
 316:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <fcnt_millis>
 31a:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <fcnt_millis+0x1>
 31e:	a0 93 aa 00 	sts	0x00AA, r26	; 0x8000aa <fcnt_millis+0x2>
 322:	b0 93 ab 00 	sts	0x00AB, r27	; 0x8000ab <fcnt_millis+0x3>
	callback();
 326:	0e 94 3a 02 	call	0x474	; 0x474 <callback>
}
 32a:	ff 91       	pop	r31
 32c:	ef 91       	pop	r30
 32e:	bf 91       	pop	r27
 330:	af 91       	pop	r26
 332:	9f 91       	pop	r25
 334:	8f 91       	pop	r24
 336:	7f 91       	pop	r23
 338:	6f 91       	pop	r22
 33a:	5f 91       	pop	r21
 33c:	4f 91       	pop	r20
 33e:	3f 91       	pop	r19
 340:	2f 91       	pop	r18
 342:	0f 90       	pop	r0
 344:	0f be       	out	0x3f, r0	; 63
 346:	0f 90       	pop	r0
 348:	1f 90       	pop	r1
 34a:	18 95       	reti

0000034c <eeprom_init>:
// 		
// 	}
// 	
// 	else
// 	{
		setTemp = TEMP_DEFAULT;
 34c:	8d e1       	ldi	r24, 0x1D	; 29
 34e:	91 e0       	ldi	r25, 0x01	; 1
 350:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 354:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		eeprom_write_word(EEPROM_TEMP_ADD, setTemp);
 358:	6d e1       	ldi	r22, 0x1D	; 29
 35a:	71 e0       	ldi	r23, 0x01	; 1
 35c:	82 e8       	ldi	r24, 0x82	; 130
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 4a 02 	call	0x494	; 0x494 <eeprom_write_word>
		
		setKp = K_P_DEFAULT;
 364:	8c ed       	ldi	r24, 0xDC	; 220
 366:	95 e0       	ldi	r25, 0x05	; 5
 368:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <setKp+0x1>
 36c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <setKp>
		eeprom_write_word(EEPROM_K_P_ADD, setKp);
 370:	6c ed       	ldi	r22, 0xDC	; 220
 372:	75 e0       	ldi	r23, 0x05	; 5
 374:	86 e9       	ldi	r24, 0x96	; 150
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 4a 02 	call	0x494	; 0x494 <eeprom_write_word>
		
		setKi = K_I_DEFAULT;
 37c:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__data_end+0x1>
 380:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end>
		eeprom_write_word(EEPROM_K_I_ADD, setKi);
 384:	60 e0       	ldi	r22, 0x00	; 0
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	8a ea       	ldi	r24, 0xAA	; 170
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 4a 02 	call	0x494	; 0x494 <eeprom_write_word>
		
		setKd = K_D_DEFAULT;
 390:	85 e0       	ldi	r24, 0x05	; 5
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <setKd+0x1>
 398:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <setKd>
		eeprom_write_word(EEPROM_K_D_ADD, setKd);
 39c:	65 e0       	ldi	r22, 0x05	; 5
 39e:	70 e0       	ldi	r23, 0x00	; 0
 3a0:	8e eb       	ldi	r24, 0xBE	; 190
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 94 4a 02 	call	0x494	; 0x494 <eeprom_write_word>
		
		flagDebugMode = 0;		
 3a8:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <flagDebugMode+0x1>
 3ac:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <flagDebugMode>
		eeprom_write_word(EEPROM_DEBUG_ADD, flagDebugMode);
 3b0:	60 91 b0 00 	lds	r22, 0x00B0	; 0x8000b0 <flagDebugMode>
 3b4:	70 91 b1 00 	lds	r23, 0x00B1	; 0x8000b1 <flagDebugMode+0x1>
 3b8:	82 ed       	ldi	r24, 0xD2	; 210
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 4a 02 	call	0x494	; 0x494 <eeprom_write_word>
		
		eeprom_write_word(EEPROM_CHECKSUM_ADD, EEPROM_CHECKSUM);
 3c0:	65 ec       	ldi	r22, 0xC5	; 197
 3c2:	7d e1       	ldi	r23, 0x1D	; 29
 3c4:	8e e6       	ldi	r24, 0x6E	; 110
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 4a 02 	call	0x494	; 0x494 <eeprom_write_word>
 3cc:	08 95       	ret

000003ce <main>:
float lastcurrentPoint = 0.00;

int main(void)
{
/*	_delay_ms(50);*/
	KEY_INIT;
 3ce:	8a b3       	in	r24, 0x1a	; 26
 3d0:	81 7e       	andi	r24, 0xE1	; 225
 3d2:	8a bb       	out	0x1a, r24	; 26
	KEY_PULLUP_INIT;
 3d4:	8b b3       	in	r24, 0x1b	; 27
 3d6:	8e 61       	ori	r24, 0x1E	; 30
 3d8:	8b bb       	out	0x1b, r24	; 27

	/* EEPROM write */
	eeprom_init();
 3da:	0e 94 a6 01 	call	0x34c	; 0x34c <eeprom_init>
 
// 	 while(USART_init(115200) == USART_ERROR);
// 	 
	 LCD_Init();
 3de:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_Init>
	 
	 
	 if(flagDebugMode)
 3e2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <flagDebugMode>
 3e6:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <flagDebugMode+0x1>
 3ea:	89 2b       	or	r24, r25
 3ec:	e1 f0       	breq	.+56     	; 0x426 <__DATA_REGION_LENGTH__+0x26>
	 {
		 LCD_location(1,1);
 3ee:	61 e0       	ldi	r22, 0x01	; 1
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_location>
		 LCD_write_string("         = ");
 3f6:	86 e6       	ldi	r24, 0x66	; 102
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_write_string>
		 LCD_showvalue(setTemp);
 3fe:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 402:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 406:	0e 94 01 01 	call	0x202	; 0x202 <LCD_showvalue>
		 LCD_location(2,1);
 40a:	61 e0       	ldi	r22, 0x01	; 1
 40c:	82 e0       	ldi	r24, 0x02	; 2
 40e:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_location>
		 LCD_write_string("         = ");
 412:	86 e6       	ldi	r24, 0x66	; 102
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_write_string>
		 LCD_showvalue(setTemp);
 41a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 41e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 422:	0e 94 01 01 	call	0x202	; 0x202 <LCD_showvalue>
// 	 long pidUpdateTimeout = milli();
	
    /* Replace with your application code */
    while (1) 
    {
		LCD_Clear();
 426:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_Clear>
		if(((PINA & (1<<INC_KEY)) == 0))
 42a:	ca 99       	sbic	0x19, 2	; 25
 42c:	05 c0       	rjmp	.+10     	; 0x438 <__DATA_REGION_LENGTH__+0x38>
		{
			LCD_write_string("INC pressed");
 42e:	82 e7       	ldi	r24, 0x72	; 114
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_write_string>
 436:	14 c0       	rjmp	.+40     	; 0x460 <__stack+0x1>
		}
		
		else if(((PINA & (1<<DEC_KEY)) == 0))
 438:	cb 99       	sbic	0x19, 3	; 25
 43a:	05 c0       	rjmp	.+10     	; 0x446 <__DATA_REGION_LENGTH__+0x46>
		{
			LCD_write_string("DEC pressed");
 43c:	8e e7       	ldi	r24, 0x7E	; 126
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_write_string>
 444:	0d c0       	rjmp	.+26     	; 0x460 <__stack+0x1>
		}
		
		else if(((PINA & (1<<PROG_KEY)) == 0))
 446:	c9 99       	sbic	0x19, 1	; 25
 448:	05 c0       	rjmp	.+10     	; 0x454 <__DATA_REGION_LENGTH__+0x54>
		{
			LCD_write_string("PROG pressed");
 44a:	8a e8       	ldi	r24, 0x8A	; 138
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_write_string>
 452:	06 c0       	rjmp	.+12     	; 0x460 <__stack+0x1>
		}
		
		else if(((PINA & (1<<ENTER_KEY)) == 0))
 454:	cc 99       	sbic	0x19, 4	; 25
 456:	04 c0       	rjmp	.+8      	; 0x460 <__stack+0x1>
		{
			LCD_write_string("ENTER pressed");
 458:	87 e9       	ldi	r24, 0x97	; 151
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_write_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 460:	2f ef       	ldi	r18, 0xFF	; 255
 462:	87 ea       	ldi	r24, 0xA7	; 167
 464:	91 e6       	ldi	r25, 0x61	; 97
 466:	21 50       	subi	r18, 0x01	; 1
 468:	80 40       	sbci	r24, 0x00	; 0
 46a:	90 40       	sbci	r25, 0x00	; 0
 46c:	e1 f7       	brne	.-8      	; 0x466 <__stack+0x7>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <__stack+0x11>
 470:	00 00       	nop
 472:	d9 cf       	rjmp	.-78     	; 0x426 <__DATA_REGION_LENGTH__+0x26>

00000474 <callback>:
		eeprom_write_word(EEPROM_CHECKSUM_ADD, EEPROM_CHECKSUM);
// 	}
}
// 
void callback (void)
{
 474:	08 95       	ret

00000476 <__umulhisi3>:
 476:	a2 9f       	mul	r26, r18
 478:	b0 01       	movw	r22, r0
 47a:	b3 9f       	mul	r27, r19
 47c:	c0 01       	movw	r24, r0
 47e:	a3 9f       	mul	r26, r19
 480:	70 0d       	add	r23, r0
 482:	81 1d       	adc	r24, r1
 484:	11 24       	eor	r1, r1
 486:	91 1d       	adc	r25, r1
 488:	b2 9f       	mul	r27, r18
 48a:	70 0d       	add	r23, r0
 48c:	81 1d       	adc	r24, r1
 48e:	11 24       	eor	r1, r1
 490:	91 1d       	adc	r25, r1
 492:	08 95       	ret

00000494 <eeprom_write_word>:
 494:	0e 94 4f 02 	call	0x49e	; 0x49e <eeprom_write_byte>
 498:	27 2f       	mov	r18, r23
 49a:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <eeprom_write_r18>

0000049e <eeprom_write_byte>:
 49e:	26 2f       	mov	r18, r22

000004a0 <eeprom_write_r18>:
 4a0:	e1 99       	sbic	0x1c, 1	; 28
 4a2:	fe cf       	rjmp	.-4      	; 0x4a0 <eeprom_write_r18>
 4a4:	9f bb       	out	0x1f, r25	; 31
 4a6:	8e bb       	out	0x1e, r24	; 30
 4a8:	2d bb       	out	0x1d, r18	; 29
 4aa:	0f b6       	in	r0, 0x3f	; 63
 4ac:	f8 94       	cli
 4ae:	e2 9a       	sbi	0x1c, 2	; 28
 4b0:	e1 9a       	sbi	0x1c, 1	; 28
 4b2:	0f be       	out	0x3f, r0	; 63
 4b4:	01 96       	adiw	r24, 0x01	; 1
 4b6:	08 95       	ret

000004b8 <_exit>:
 4b8:	f8 94       	cli

000004ba <__stop_program>:
 4ba:	ff cf       	rjmp	.-2      	; 0x4ba <__stop_program>
