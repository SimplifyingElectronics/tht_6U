
tht_U6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  000008e6  0000097a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000066  00800092  00800092  000009ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00000a18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e72  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab6  00000000  00000000  00002a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001110  00000000  00000000  00003500  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a8  00000000  00000000  00004610  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000694  00000000  00000000  000049b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001062  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  000060ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 39       	cpi	r26, 0x92	; 146
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e9       	ldi	r26, 0x92	; 146
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3f       	cpi	r26, 0xF8	; 248
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0f 04 	call	0x81e	; 0x81e <main>
  8a:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Command>:
void LCD_Pos_xy (char row, char pos)
{
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);
  92:	85 bb       	out	0x15, r24	; 21
  94:	82 b3       	in	r24, 0x12	; 18
  96:	8f 7b       	andi	r24, 0xBF	; 191
  98:	82 bb       	out	0x12, r24	; 18
  9a:	82 b3       	in	r24, 0x12	; 18
  9c:	80 68       	ori	r24, 0x80	; 128
  9e:	82 bb       	out	0x12, r24	; 18
  a0:	85 e0       	ldi	r24, 0x05	; 5
  a2:	8a 95       	dec	r24
  a4:	f1 f7       	brne	.-4      	; 0xa2 <LCD_Command+0x10>
  a6:	00 00       	nop
  a8:	82 b3       	in	r24, 0x12	; 18
  aa:	8f 77       	andi	r24, 0x7F	; 127
  ac:	82 bb       	out	0x12, r24	; 18
  ae:	8f ed       	ldi	r24, 0xDF	; 223
  b0:	9e e2       	ldi	r25, 0x2E	; 46
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <LCD_Command+0x20>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <LCD_Command+0x26>
  b8:	00 00       	nop
  ba:	08 95       	ret

000000bc <LCD_Char>:
  bc:	85 bb       	out	0x15, r24	; 21
  be:	82 b3       	in	r24, 0x12	; 18
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	82 bb       	out	0x12, r24	; 18
  c4:	82 b3       	in	r24, 0x12	; 18
  c6:	80 68       	ori	r24, 0x80	; 128
  c8:	82 bb       	out	0x12, r24	; 18
  ca:	85 e0       	ldi	r24, 0x05	; 5
  cc:	8a 95       	dec	r24
  ce:	f1 f7       	brne	.-4      	; 0xcc <LCD_Char+0x10>
  d0:	00 00       	nop
  d2:	82 b3       	in	r24, 0x12	; 18
  d4:	8f 77       	andi	r24, 0x7F	; 127
  d6:	82 bb       	out	0x12, r24	; 18
  d8:	8f e9       	ldi	r24, 0x9F	; 159
  da:	9f e0       	ldi	r25, 0x0F	; 15
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <LCD_Char+0x20>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <LCD_Char+0x26>
  e2:	00 00       	nop
  e4:	08 95       	ret

000000e6 <LCD_write>:
  e6:	85 bb       	out	0x15, r24	; 21
  e8:	82 b3       	in	r24, 0x12	; 18
  ea:	80 64       	ori	r24, 0x40	; 64
  ec:	82 bb       	out	0x12, r24	; 18
  ee:	82 b3       	in	r24, 0x12	; 18
  f0:	80 68       	ori	r24, 0x80	; 128
  f2:	82 bb       	out	0x12, r24	; 18
  f4:	85 e0       	ldi	r24, 0x05	; 5
  f6:	8a 95       	dec	r24
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCD_write+0x10>
  fa:	00 00       	nop
  fc:	82 b3       	in	r24, 0x12	; 18
  fe:	8f 77       	andi	r24, 0x7F	; 127
 100:	82 bb       	out	0x12, r24	; 18
 102:	8f e9       	ldi	r24, 0x9F	; 159
 104:	9f e0       	ldi	r25, 0x0F	; 15
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <LCD_write+0x20>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <LCD_write+0x26>
 10c:	00 00       	nop
 10e:	08 95       	ret

00000110 <LCD_Init>:
 110:	81 b3       	in	r24, 0x11	; 17
 112:	80 6c       	ori	r24, 0xC0	; 192
 114:	81 bb       	out	0x11, r24	; 17
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	84 bb       	out	0x14, r24	; 20
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	89 ef       	ldi	r24, 0xF9	; 249
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <LCD_Init+0x10>
 128:	00 c0       	rjmp	.+0      	; 0x12a <LCD_Init+0x1a>
 12a:	00 00       	nop
 12c:	88 e3       	ldi	r24, 0x38	; 56
 12e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 132:	25 e0       	ldi	r18, 0x05	; 5
 134:	2a 95       	dec	r18
 136:	f1 f7       	brne	.-4      	; 0x134 <LCD_Init+0x24>
 138:	00 00       	nop
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 140:	85 e0       	ldi	r24, 0x05	; 5
 142:	8a 95       	dec	r24
 144:	f1 f7       	brne	.-4      	; 0x142 <LCD_Init+0x32>
 146:	00 00       	nop
 148:	8e e0       	ldi	r24, 0x0E	; 14
 14a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 14e:	95 e0       	ldi	r25, 0x05	; 5
 150:	9a 95       	dec	r25
 152:	f1 f7       	brne	.-4      	; 0x150 <LCD_Init+0x40>
 154:	00 00       	nop
 156:	80 e8       	ldi	r24, 0x80	; 128
 158:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 15c:	87 ec       	ldi	r24, 0xC7	; 199
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <LCD_Init+0x50>
 164:	00 c0       	rjmp	.+0      	; 0x166 <LCD_Init+0x56>
 166:	00 00       	nop
 168:	08 95       	ret

0000016a <LCD_write_string>:
 16a:	0f 93       	push	r16
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	8c 01       	movw	r16, r24
 174:	c0 e0       	ldi	r28, 0x00	; 0
 176:	d0 e0       	ldi	r29, 0x00	; 0
 178:	03 c0       	rjmp	.+6      	; 0x180 <LCD_write_string+0x16>
 17a:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
 17e:	21 96       	adiw	r28, 0x01	; 1
 180:	f8 01       	movw	r30, r16
 182:	ec 0f       	add	r30, r28
 184:	fd 1f       	adc	r31, r29
 186:	80 81       	ld	r24, Z
 188:	81 11       	cpse	r24, r1
 18a:	f7 cf       	rjmp	.-18     	; 0x17a <LCD_write_string+0x10>
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	1f 91       	pop	r17
 192:	0f 91       	pop	r16
 194:	08 95       	ret

00000196 <LCD_location>:
}

void LCD_location(uint8_t x, uint8_t y)
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	00 d0       	rcall	.+0      	; 0x19c <LCD_location+0x6>
 19c:	00 d0       	rcall	.+0      	; 0x19e <LCD_location+0x8>
 19e:	cd b7       	in	r28, 0x3d	; 61
 1a0:	de b7       	in	r29, 0x3e	; 62
	uint8_t firstadress[] = {0x80, 0xC0, 0x94, 0xD4};
 1a2:	90 e8       	ldi	r25, 0x80	; 128
 1a4:	99 83       	std	Y+1, r25	; 0x01
 1a6:	90 ec       	ldi	r25, 0xC0	; 192
 1a8:	9a 83       	std	Y+2, r25	; 0x02
 1aa:	94 e9       	ldi	r25, 0x94	; 148
 1ac:	9b 83       	std	Y+3, r25	; 0x03
 1ae:	94 ed       	ldi	r25, 0xD4	; 212
 1b0:	9c 83       	std	Y+4, r25	; 0x04
	LCD_Command(firstadress[x-1] + y - 1);
 1b2:	e8 2f       	mov	r30, r24
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	31 97       	sbiw	r30, 0x01	; 1
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	8c 0f       	add	r24, r28
 1be:	9d 1f       	adc	r25, r29
 1c0:	e8 0f       	add	r30, r24
 1c2:	f9 1f       	adc	r31, r25
 1c4:	80 81       	ld	r24, Z
 1c6:	86 0f       	add	r24, r22
 1c8:	81 50       	subi	r24, 0x01	; 1
 1ca:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ce:	8f e3       	ldi	r24, 0x3F	; 63
 1d0:	9c e9       	ldi	r25, 0x9C	; 156
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <LCD_location+0x3c>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <LCD_location+0x42>
 1d8:	00 00       	nop
	_delay_ms(10);
}
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
 1de:	0f 90       	pop	r0
 1e0:	0f 90       	pop	r0
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <LCD_Clear>:

void LCD_Clear(void)
{
	LCD_Command (0x01);		
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command (0x80);		
 1ee:	80 e8       	ldi	r24, 0x80	; 128
 1f0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 1f4:	08 95       	ret

000001f6 <__vector_3>:
	/* make pwm as input */
	DDRD &= (~(1<<5));
}

ISR(TIMER2_COMP_vect)
{
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	2f 93       	push	r18
 202:	3f 93       	push	r19
 204:	4f 93       	push	r20
 206:	5f 93       	push	r21
 208:	6f 93       	push	r22
 20a:	7f 93       	push	r23
 20c:	8f 93       	push	r24
 20e:	9f 93       	push	r25
 210:	af 93       	push	r26
 212:	bf 93       	push	r27
 214:	ef 93       	push	r30
 216:	ff 93       	push	r31
	fcnt_millis++;
 218:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <fcnt_millis>
 21c:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <fcnt_millis+0x1>
 220:	a0 91 98 00 	lds	r26, 0x0098	; 0x800098 <fcnt_millis+0x2>
 224:	b0 91 99 00 	lds	r27, 0x0099	; 0x800099 <fcnt_millis+0x3>
 228:	01 96       	adiw	r24, 0x01	; 1
 22a:	a1 1d       	adc	r26, r1
 22c:	b1 1d       	adc	r27, r1
 22e:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <fcnt_millis>
 232:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <fcnt_millis+0x1>
 236:	a0 93 98 00 	sts	0x0098, r26	; 0x800098 <fcnt_millis+0x2>
 23a:	b0 93 99 00 	sts	0x0099, r27	; 0x800099 <fcnt_millis+0x3>
	PORTD ^= (1<<6);
 23e:	92 b3       	in	r25, 0x12	; 18
 240:	80 e4       	ldi	r24, 0x40	; 64
 242:	89 27       	eor	r24, r25
 244:	82 bb       	out	0x12, r24	; 18
	callback();
 246:	0e 94 2d 04 	call	0x85a	; 0x85a <callback>
}
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	bf 91       	pop	r27
 250:	af 91       	pop	r26
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	7f 91       	pop	r23
 258:	6f 91       	pop	r22
 25a:	5f 91       	pop	r21
 25c:	4f 91       	pop	r20
 25e:	3f 91       	pop	r19
 260:	2f 91       	pop	r18
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <USART_init>:
#include "USART.h"

unsigned char USART_init(uint32_t baud_rate)
{
	/* Initialize Q */
	UQFront = UQEnd = -1;
 26c:	2f ef       	ldi	r18, 0xFF	; 255
 26e:	20 93 9d 00 	sts	0x009D, r18	; 0x80009d <UQEnd>
 272:	20 93 9c 00 	sts	0x009C, r18	; 0x80009c <UQFront>
	
	uint16_t ubrrvalue = (F_CPU/(baud_rate * 8) - 1);
 276:	dc 01       	movw	r26, r24
 278:	cb 01       	movw	r24, r22
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	aa 1f       	adc	r26, r26
 280:	bb 1f       	adc	r27, r27
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	aa 1f       	adc	r26, r26
 288:	bb 1f       	adc	r27, r27
 28a:	9c 01       	movw	r18, r24
 28c:	ad 01       	movw	r20, r26
 28e:	22 0f       	add	r18, r18
 290:	33 1f       	adc	r19, r19
 292:	44 1f       	adc	r20, r20
 294:	55 1f       	adc	r21, r21
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	74 e2       	ldi	r23, 0x24	; 36
 29a:	84 ef       	ldi	r24, 0xF4	; 244
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 2e 04 	call	0x85c	; 0x85c <__udivmodsi4>
 2a2:	21 50       	subi	r18, 0x01	; 1
 2a4:	31 09       	sbc	r19, r1
	if(ubrrvalue <= 0)
 2a6:	89 f0       	breq	.+34     	; 0x2ca <USART_init+0x5e>
		return USART_ERROR;
	}
	
	else
	{		
		UBRRH = (unsigned char)(ubrrvalue >> 8);
 2a8:	30 bd       	out	0x20, r19	; 32
		UBRRL = (unsigned char)(ubrrvalue);
 2aa:	29 b9       	out	0x09, r18	; 9
	
		UCSRC |= (1<<URSEL);
 2ac:	80 b5       	in	r24, 0x20	; 32
 2ae:	80 68       	ori	r24, 0x80	; 128
 2b0:	80 bd       	out	0x20, r24	; 32
		UCSRC |= ((3<<UCSZ0));
 2b2:	80 b5       	in	r24, 0x20	; 32
 2b4:	86 60       	ori	r24, 0x06	; 6
 2b6:	80 bd       	out	0x20, r24	; 32
		UCSRB |= ((1<<RXCIE) | (1<<RXEN) | (1 << TXEN));
 2b8:	8a b1       	in	r24, 0x0a	; 10
 2ba:	88 69       	ori	r24, 0x98	; 152
 2bc:	8a b9       	out	0x0a, r24	; 10
		UCSRA |= ((1<<U2X));
 2be:	8b b1       	in	r24, 0x0b	; 11
 2c0:	82 60       	ori	r24, 0x02	; 2
 2c2:	8b b9       	out	0x0b, r24	; 11
		
		sei();
 2c4:	78 94       	sei
		
		return USART_OK;
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	08 95       	ret
	UQFront = UQEnd = -1;
	
	uint16_t ubrrvalue = (F_CPU/(baud_rate * 8) - 1);
	if(ubrrvalue <= 0)
	{
		return USART_ERROR;
 2ca:	80 e0       	ldi	r24, 0x00	; 0
		
		sei();
		
		return USART_OK;
	}
}
 2cc:	08 95       	ret

000002ce <displayUserInfo>:
// 	}
// lastcurrentPoint = currentpoint;
// return (error);
// }
void displayUserInfo(uint16_t data)
{
 2ce:	0f 93       	push	r16
 2d0:	1f 93       	push	r17
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	8c 01       	movw	r16, r24
	if(data>999)
 2d8:	88 3e       	cpi	r24, 0xE8	; 232
 2da:	23 e0       	ldi	r18, 0x03	; 3
 2dc:	92 07       	cpc	r25, r18
 2de:	78 f1       	brcs	.+94     	; 0x33e <displayUserInfo+0x70>
	{
		LCD_Char(((data / 1000) % 10) + 0x30);
 2e0:	9c 01       	movw	r18, r24
 2e2:	36 95       	lsr	r19
 2e4:	27 95       	ror	r18
 2e6:	36 95       	lsr	r19
 2e8:	27 95       	ror	r18
 2ea:	36 95       	lsr	r19
 2ec:	27 95       	ror	r18
 2ee:	a5 ec       	ldi	r26, 0xC5	; 197
 2f0:	b0 e2       	ldi	r27, 0x20	; 32
 2f2:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__umulhisi3>
 2f6:	ac 01       	movw	r20, r24
 2f8:	52 95       	swap	r21
 2fa:	42 95       	swap	r20
 2fc:	4f 70       	andi	r20, 0x0F	; 15
 2fe:	45 27       	eor	r20, r21
 300:	5f 70       	andi	r21, 0x0F	; 15
 302:	45 27       	eor	r20, r21
 304:	9a 01       	movw	r18, r20
 306:	ad ec       	ldi	r26, 0xCD	; 205
 308:	bc ec       	ldi	r27, 0xCC	; 204
 30a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__umulhisi3>
 30e:	96 95       	lsr	r25
 310:	87 95       	ror	r24
 312:	96 95       	lsr	r25
 314:	87 95       	ror	r24
 316:	96 95       	lsr	r25
 318:	87 95       	ror	r24
 31a:	9c 01       	movw	r18, r24
 31c:	22 0f       	add	r18, r18
 31e:	33 1f       	adc	r19, r19
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	82 0f       	add	r24, r18
 32e:	93 1f       	adc	r25, r19
 330:	9a 01       	movw	r18, r20
 332:	28 1b       	sub	r18, r24
 334:	39 0b       	sbc	r19, r25
 336:	c9 01       	movw	r24, r18
 338:	80 5d       	subi	r24, 0xD0	; 208
 33a:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_Char>
	}
	
	LCD_write(((data / 100) % 10) + 0x30);
 33e:	98 01       	movw	r18, r16
 340:	36 95       	lsr	r19
 342:	27 95       	ror	r18
 344:	36 95       	lsr	r19
 346:	27 95       	ror	r18
 348:	ab e7       	ldi	r26, 0x7B	; 123
 34a:	b4 e1       	ldi	r27, 0x14	; 20
 34c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__umulhisi3>
 350:	ac 01       	movw	r20, r24
 352:	56 95       	lsr	r21
 354:	47 95       	ror	r20
 356:	9a 01       	movw	r18, r20
 358:	ad ec       	ldi	r26, 0xCD	; 205
 35a:	bc ec       	ldi	r27, 0xCC	; 204
 35c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__umulhisi3>
 360:	96 95       	lsr	r25
 362:	87 95       	ror	r24
 364:	96 95       	lsr	r25
 366:	87 95       	ror	r24
 368:	96 95       	lsr	r25
 36a:	87 95       	ror	r24
 36c:	9c 01       	movw	r18, r24
 36e:	22 0f       	add	r18, r18
 370:	33 1f       	adc	r19, r19
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	82 0f       	add	r24, r18
 380:	93 1f       	adc	r25, r19
 382:	9a 01       	movw	r18, r20
 384:	28 1b       	sub	r18, r24
 386:	39 0b       	sbc	r19, r25
 388:	c9 01       	movw	r24, r18
 38a:	80 5d       	subi	r24, 0xD0	; 208
 38c:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
	LCD_write(((data / 10) % 10) + 0x30);
 390:	98 01       	movw	r18, r16
 392:	ad ec       	ldi	r26, 0xCD	; 205
 394:	bc ec       	ldi	r27, 0xCC	; 204
 396:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__umulhisi3>
 39a:	ec 01       	movw	r28, r24
 39c:	d6 95       	lsr	r29
 39e:	c7 95       	ror	r28
 3a0:	d6 95       	lsr	r29
 3a2:	c7 95       	ror	r28
 3a4:	d6 95       	lsr	r29
 3a6:	c7 95       	ror	r28
 3a8:	9e 01       	movw	r18, r28
 3aa:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__umulhisi3>
 3ae:	96 95       	lsr	r25
 3b0:	87 95       	ror	r24
 3b2:	96 95       	lsr	r25
 3b4:	87 95       	ror	r24
 3b6:	96 95       	lsr	r25
 3b8:	87 95       	ror	r24
 3ba:	9c 01       	movw	r18, r24
 3bc:	22 0f       	add	r18, r18
 3be:	33 1f       	adc	r19, r19
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	82 0f       	add	r24, r18
 3ce:	93 1f       	adc	r25, r19
 3d0:	9e 01       	movw	r18, r28
 3d2:	28 1b       	sub	r18, r24
 3d4:	39 0b       	sbc	r19, r25
 3d6:	c9 01       	movw	r24, r18
 3d8:	80 5d       	subi	r24, 0xD0	; 208
 3da:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
	LCD_Char('.');
 3de:	8e e2       	ldi	r24, 0x2E	; 46
 3e0:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_Char>
	LCD_write(((data / 1) % 10) + 0x30);
 3e4:	ce 01       	movw	r24, r28
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	cc 0f       	add	r28, r28
 3ec:	dd 1f       	adc	r29, r29
 3ee:	cc 0f       	add	r28, r28
 3f0:	dd 1f       	adc	r29, r29
 3f2:	cc 0f       	add	r28, r28
 3f4:	dd 1f       	adc	r29, r29
 3f6:	c8 0f       	add	r28, r24
 3f8:	d9 1f       	adc	r29, r25
 3fa:	c8 01       	movw	r24, r16
 3fc:	8c 1b       	sub	r24, r28
 3fe:	9d 0b       	sbc	r25, r29
 400:	80 5d       	subi	r24, 0xD0	; 208
 402:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
	LCD_Char(' ');
 406:	80 e2       	ldi	r24, 0x20	; 32
 408:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_Char>
}
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	1f 91       	pop	r17
 412:	0f 91       	pop	r16
 414:	08 95       	ret

00000416 <keyEventExecute>:
void keyEventExecute(void)
{
 416:	cf 93       	push	r28
	if((IS_KEY_INC_PRESSED) && (IS_KEY_DEC_PRESSED))
 418:	ca 99       	sbic	0x19, 2	; 25
 41a:	be c1       	rjmp	.+892    	; 0x798 <__stack+0x339>
 41c:	cb 99       	sbic	0x19, 3	; 25
 41e:	bc c1       	rjmp	.+888    	; 0x798 <__stack+0x339>
	{
// 		timer0_stop();
// 		timer1_stop();
		LCD_Clear();
 420:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_Clear>
 424:	2f ef       	ldi	r18, 0xFF	; 255
 426:	80 e7       	ldi	r24, 0x70	; 112
 428:	92 e0       	ldi	r25, 0x02	; 2
 42a:	21 50       	subi	r18, 0x01	; 1
 42c:	80 40       	sbci	r24, 0x00	; 0
 42e:	90 40       	sbci	r25, 0x00	; 0
 430:	e1 f7       	brne	.-8      	; 0x42a <keyEventExecute+0x14>
 432:	00 c0       	rjmp	.+0      	; 0x434 <keyEventExecute+0x1e>
 434:	00 00       	nop
		_delay_ms(50);
		
		while((!IS_KEY_INC_RELEASED) && (!IS_KEY_DEC_RELEASED));
 436:	ca 99       	sbic	0x19, 2	; 25
 438:	02 c0       	rjmp	.+4      	; 0x43e <keyEventExecute+0x28>
 43a:	cb 9b       	sbis	0x19, 3	; 25
 43c:	fc cf       	rjmp	.-8      	; 0x436 <keyEventExecute+0x20>
		
		LCD_location(2,1);
 43e:	61 e0       	ldi	r22, 0x01	; 1
 440:	82 e0       	ldi	r24, 0x02	; 2
 442:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		LCD_write_string("V - ");
 446:	8c e6       	ldi	r24, 0x6C	; 108
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
		LCD_write(((VERSION / 100) % 10) + 0x30);
 44e:	80 e3       	ldi	r24, 0x30	; 48
 450:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
		LCD_write_string(".");
 454:	81 e7       	ldi	r24, 0x71	; 113
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
		LCD_write(((VERSION / 10) % 10) + 0x30);
 45c:	81 e3       	ldi	r24, 0x31	; 49
 45e:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
		LCD_write_string(".");
 462:	81 e7       	ldi	r24, 0x71	; 113
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
		LCD_write(((VERSION / 1) % 10) + 0x30);
 46a:	86 e3       	ldi	r24, 0x36	; 54
 46c:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
		LCD_location(1,1);
 470:	61 e0       	ldi	r22, 0x01	; 1
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		LCD_write_string("Gain P = ");
 478:	83 e7       	ldi	r24, 0x73	; 115
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
		displayUserInfo(setKp);
 480:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <setKp>
 484:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <setKp+0x1>
 488:	0e 94 67 01 	call	0x2ce	; 0x2ce <displayUserInfo>
		
		uint8_t fcntSpeedInc = 0, fcntSpeedDec = 0;
 48c:	c0 e0       	ldi	r28, 0x00	; 0
 48e:	20 e0       	ldi	r18, 0x00	; 0
		
		while(IS_KEY_PROG_RELEASED)
 490:	62 c0       	rjmp	.+196    	; 0x556 <__stack+0xf7>
		{
			if(IS_KEY_INC_PRESSED)
 492:	ca 99       	sbic	0x19, 2	; 25
 494:	2c c0       	rjmp	.+88     	; 0x4ee <__stack+0x8f>
			{
				fcntSpeedDec = 0;
				setKp = setKp + 1 + fcntSpeedInc++;
 496:	c1 e0       	ldi	r28, 0x01	; 1
 498:	c2 0f       	add	r28, r18
 49a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <setKp>
 49e:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <setKp+0x1>
 4a2:	82 0f       	add	r24, r18
 4a4:	91 1d       	adc	r25, r1
 4a6:	01 96       	adiw	r24, 0x01	; 1
 4a8:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <setKp+0x1>
 4ac:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <setKp>
			
				if(setKp > K_P_HIGH)
 4b0:	8d 34       	cpi	r24, 0x4D	; 77
 4b2:	9d 41       	sbci	r25, 0x1D	; 29
 4b4:	30 f0       	brcs	.+12     	; 0x4c2 <__stack+0x63>
					setKp = K_P_HIGH;
 4b6:	8c e4       	ldi	r24, 0x4C	; 76
 4b8:	9d e1       	ldi	r25, 0x1D	; 29
 4ba:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <setKp+0x1>
 4be:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <setKp>
			
				LCD_location(1,10);
 4c2:	6a e0       	ldi	r22, 0x0A	; 10
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				displayUserInfo(setKp);
 4ca:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <setKp>
 4ce:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <setKp+0x1>
 4d2:	0e 94 67 01 	call	0x2ce	; 0x2ce <displayUserInfo>
 4d6:	8f ef       	ldi	r24, 0xFF	; 255
 4d8:	94 e3       	ldi	r25, 0x34	; 52
 4da:	2c e0       	ldi	r18, 0x0C	; 12
 4dc:	81 50       	subi	r24, 0x01	; 1
 4de:	90 40       	sbci	r25, 0x00	; 0
 4e0:	20 40       	sbci	r18, 0x00	; 0
 4e2:	e1 f7       	brne	.-8      	; 0x4dc <__stack+0x7d>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <__stack+0x87>
 4e6:	00 00       	nop
		while(IS_KEY_PROG_RELEASED)
		{
			if(IS_KEY_INC_PRESSED)
			{
				fcntSpeedDec = 0;
				setKp = setKp + 1 + fcntSpeedInc++;
 4e8:	2c 2f       	mov	r18, r28
		
		while(IS_KEY_PROG_RELEASED)
		{
			if(IS_KEY_INC_PRESSED)
			{
				fcntSpeedDec = 0;
 4ea:	c0 e0       	ldi	r28, 0x00	; 0
 4ec:	30 c0       	rjmp	.+96     	; 0x54e <__stack+0xef>
				LCD_location(1,10);
				displayUserInfo(setKp);
				_delay_ms(250);
			}
		
			else if(IS_KEY_DEC_PRESSED)
 4ee:	cb 99       	sbic	0x19, 3	; 25
 4f0:	2e c0       	rjmp	.+92     	; 0x54e <__stack+0xef>
			{
				fcntSpeedInc = 0;
				if(setKp > (K_P_LOW + 1 + fcntSpeedDec))
 4f2:	2c 2f       	mov	r18, r28
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	25 5f       	subi	r18, 0xF5	; 245
 4f8:	3f 4f       	sbci	r19, 0xFF	; 255
 4fa:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <setKp>
 4fe:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <setKp+0x1>
 502:	28 17       	cp	r18, r24
 504:	39 07       	cpc	r19, r25
 506:	48 f4       	brcc	.+18     	; 0x51a <__stack+0xbb>
				setKp = setKp - 1 - fcntSpeedDec++;
 508:	8c 1b       	sub	r24, r28
 50a:	91 09       	sbc	r25, r1
 50c:	01 97       	sbiw	r24, 0x01	; 1
 50e:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <setKp+0x1>
 512:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <setKp>
 516:	cf 5f       	subi	r28, 0xFF	; 255
 518:	06 c0       	rjmp	.+12     	; 0x526 <__stack+0xc7>
			
				else
				setKp = K_P_LOW;
 51a:	8a e0       	ldi	r24, 0x0A	; 10
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <setKp+0x1>
 522:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <setKp>
			
				LCD_location(1,10);
 526:	6a e0       	ldi	r22, 0x0A	; 10
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				displayUserInfo(setKp);
 52e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <setKp>
 532:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <setKp+0x1>
 536:	0e 94 67 01 	call	0x2ce	; 0x2ce <displayUserInfo>
 53a:	8f ef       	ldi	r24, 0xFF	; 255
 53c:	94 e3       	ldi	r25, 0x34	; 52
 53e:	2c e0       	ldi	r18, 0x0C	; 12
 540:	81 50       	subi	r24, 0x01	; 1
 542:	90 40       	sbci	r25, 0x00	; 0
 544:	20 40       	sbci	r18, 0x00	; 0
 546:	e1 f7       	brne	.-8      	; 0x540 <__stack+0xe1>
 548:	00 c0       	rjmp	.+0      	; 0x54a <__stack+0xeb>
 54a:	00 00       	nop
				_delay_ms(250);
			}
		
			else if(IS_KEY_DEC_PRESSED)
			{
				fcntSpeedInc = 0;
 54c:	20 e0       	ldi	r18, 0x00	; 0
				LCD_location(1,10);
				displayUserInfo(setKp);
				_delay_ms(250);
			}
		
			if(IS_KEY_INC_RELEASED)
 54e:	ca 99       	sbic	0x19, 2	; 25
			fcntSpeedInc = 0;
 550:	20 e0       	ldi	r18, 0x00	; 0
			
			if(IS_KEY_DEC_RELEASED)
 552:	cb 99       	sbic	0x19, 3	; 25
			fcntSpeedDec = 0;
 554:	c0 e0       	ldi	r28, 0x00	; 0
		LCD_write_string("Gain P = ");
		displayUserInfo(setKp);
		
		uint8_t fcntSpeedInc = 0, fcntSpeedDec = 0;
		
		while(IS_KEY_PROG_RELEASED)
 556:	c9 99       	sbic	0x19, 1	; 25
 558:	9c cf       	rjmp	.-200    	; 0x492 <__stack+0x33>
			
			if(IS_KEY_DEC_RELEASED)
			fcntSpeedDec = 0;
		}
		
		eeprom_write_word(EEPROM_K_P_ADD, setKp);
 55a:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <setKp>
 55e:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <setKp+0x1>
 562:	86 e9       	ldi	r24, 0x96	; 150
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	0e 94 5f 04 	call	0x8be	; 0x8be <eeprom_write_word>
 56a:	8f ef       	ldi	r24, 0xFF	; 255
 56c:	90 e7       	ldi	r25, 0x70	; 112
 56e:	22 e0       	ldi	r18, 0x02	; 2
 570:	81 50       	subi	r24, 0x01	; 1
 572:	90 40       	sbci	r25, 0x00	; 0
 574:	20 40       	sbci	r18, 0x00	; 0
 576:	e1 f7       	brne	.-8      	; 0x570 <__stack+0x111>
 578:	00 c0       	rjmp	.+0      	; 0x57a <__stack+0x11b>
 57a:	00 00       	nop
		_delay_ms(50);
		while(IS_KEY_PROG_PRESSED);
 57c:	c9 9b       	sbis	0x19, 1	; 25
 57e:	fe cf       	rjmp	.-4      	; 0x57c <__stack+0x11d>
		
		fcntSpeedInc = 0, fcntSpeedDec = 0;
		
		LCD_location(1,1);
 580:	61 e0       	ldi	r22, 0x01	; 1
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		LCD_write_string("Gain I = ");
 588:	8d e7       	ldi	r24, 0x7D	; 125
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
		displayUserInfo(setKi);
 590:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <setKi>
 594:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <setKi+0x1>
 598:	0e 94 67 01 	call	0x2ce	; 0x2ce <displayUserInfo>
		
		eeprom_write_word(EEPROM_K_P_ADD, setKp);
		_delay_ms(50);
		while(IS_KEY_PROG_PRESSED);
		
		fcntSpeedInc = 0, fcntSpeedDec = 0;
 59c:	c0 e0       	ldi	r28, 0x00	; 0
 59e:	20 e0       	ldi	r18, 0x00	; 0
		
		LCD_location(1,1);
		LCD_write_string("Gain I = ");
		displayUserInfo(setKi);
		
		while(IS_KEY_PROG_RELEASED)
 5a0:	60 c0       	rjmp	.+192    	; 0x662 <__stack+0x203>
		{
			if(IS_KEY_INC_PRESSED)
 5a2:	ca 99       	sbic	0x19, 2	; 25
 5a4:	2c c0       	rjmp	.+88     	; 0x5fe <__stack+0x19f>
			{
				fcntSpeedDec = 0;
				setKi = setKi + 1 + fcntSpeedInc++;
 5a6:	c1 e0       	ldi	r28, 0x01	; 1
 5a8:	c2 0f       	add	r28, r18
 5aa:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <setKi>
 5ae:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <setKi+0x1>
 5b2:	82 0f       	add	r24, r18
 5b4:	91 1d       	adc	r25, r1
 5b6:	01 96       	adiw	r24, 0x01	; 1
 5b8:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <setKi+0x1>
 5bc:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <setKi>
				
				if(setKi > K_I_HIGH)
 5c0:	85 3f       	cpi	r24, 0xF5	; 245
 5c2:	91 40       	sbci	r25, 0x01	; 1
 5c4:	30 f0       	brcs	.+12     	; 0x5d2 <__stack+0x173>
				setKi = K_I_HIGH;
 5c6:	84 ef       	ldi	r24, 0xF4	; 244
 5c8:	91 e0       	ldi	r25, 0x01	; 1
 5ca:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <setKi+0x1>
 5ce:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <setKi>
				
				LCD_location(1,10);
 5d2:	6a e0       	ldi	r22, 0x0A	; 10
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				displayUserInfo(setKi);
 5da:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <setKi>
 5de:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <setKi+0x1>
 5e2:	0e 94 67 01 	call	0x2ce	; 0x2ce <displayUserInfo>
 5e6:	8f ef       	ldi	r24, 0xFF	; 255
 5e8:	94 e3       	ldi	r25, 0x34	; 52
 5ea:	2c e0       	ldi	r18, 0x0C	; 12
 5ec:	81 50       	subi	r24, 0x01	; 1
 5ee:	90 40       	sbci	r25, 0x00	; 0
 5f0:	20 40       	sbci	r18, 0x00	; 0
 5f2:	e1 f7       	brne	.-8      	; 0x5ec <__stack+0x18d>
 5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <__stack+0x197>
 5f6:	00 00       	nop
		while(IS_KEY_PROG_RELEASED)
		{
			if(IS_KEY_INC_PRESSED)
			{
				fcntSpeedDec = 0;
				setKi = setKi + 1 + fcntSpeedInc++;
 5f8:	2c 2f       	mov	r18, r28
		
		while(IS_KEY_PROG_RELEASED)
		{
			if(IS_KEY_INC_PRESSED)
			{
				fcntSpeedDec = 0;
 5fa:	c0 e0       	ldi	r28, 0x00	; 0
 5fc:	2e c0       	rjmp	.+92     	; 0x65a <__stack+0x1fb>
				LCD_location(1,10);
				displayUserInfo(setKi);
				_delay_ms(250);
			}
			
			else if(IS_KEY_DEC_PRESSED)
 5fe:	cb 99       	sbic	0x19, 3	; 25
 600:	2c c0       	rjmp	.+88     	; 0x65a <__stack+0x1fb>
			{
				fcntSpeedInc = 0;
				if(setKi > (K_I_LOW + 1 + fcntSpeedDec))
 602:	2c 2f       	mov	r18, r28
 604:	30 e0       	ldi	r19, 0x00	; 0
 606:	2f 5f       	subi	r18, 0xFF	; 255
 608:	3f 4f       	sbci	r19, 0xFF	; 255
 60a:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <setKi>
 60e:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <setKi+0x1>
 612:	28 17       	cp	r18, r24
 614:	39 07       	cpc	r19, r25
 616:	48 f4       	brcc	.+18     	; 0x62a <__stack+0x1cb>
				setKi = setKi - 1 - fcntSpeedDec++;
 618:	8c 1b       	sub	r24, r28
 61a:	91 09       	sbc	r25, r1
 61c:	01 97       	sbiw	r24, 0x01	; 1
 61e:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <setKi+0x1>
 622:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <setKi>
 626:	cf 5f       	subi	r28, 0xFF	; 255
 628:	04 c0       	rjmp	.+8      	; 0x632 <__stack+0x1d3>
				
				else
				setKi = K_I_LOW;
 62a:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <setKi+0x1>
 62e:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <setKi>
				
				LCD_location(1,10);
 632:	6a e0       	ldi	r22, 0x0A	; 10
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				displayUserInfo(setKi);
 63a:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <setKi>
 63e:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <setKi+0x1>
 642:	0e 94 67 01 	call	0x2ce	; 0x2ce <displayUserInfo>
 646:	8f ef       	ldi	r24, 0xFF	; 255
 648:	94 e3       	ldi	r25, 0x34	; 52
 64a:	2c e0       	ldi	r18, 0x0C	; 12
 64c:	81 50       	subi	r24, 0x01	; 1
 64e:	90 40       	sbci	r25, 0x00	; 0
 650:	20 40       	sbci	r18, 0x00	; 0
 652:	e1 f7       	brne	.-8      	; 0x64c <__stack+0x1ed>
 654:	00 c0       	rjmp	.+0      	; 0x656 <__stack+0x1f7>
 656:	00 00       	nop
				_delay_ms(250);
			}
			
			else if(IS_KEY_DEC_PRESSED)
			{
				fcntSpeedInc = 0;
 658:	20 e0       	ldi	r18, 0x00	; 0
				LCD_location(1,10);
				displayUserInfo(setKi);
				_delay_ms(250);
			}
			
			if(IS_KEY_INC_RELEASED)
 65a:	ca 99       	sbic	0x19, 2	; 25
			fcntSpeedInc = 0;
 65c:	20 e0       	ldi	r18, 0x00	; 0
			
			if(IS_KEY_DEC_RELEASED)
 65e:	cb 99       	sbic	0x19, 3	; 25
			fcntSpeedDec = 0;
 660:	c0 e0       	ldi	r28, 0x00	; 0
		
		LCD_location(1,1);
		LCD_write_string("Gain I = ");
		displayUserInfo(setKi);
		
		while(IS_KEY_PROG_RELEASED)
 662:	c9 99       	sbic	0x19, 1	; 25
 664:	9e cf       	rjmp	.-196    	; 0x5a2 <__stack+0x143>
			
			if(IS_KEY_DEC_RELEASED)
			fcntSpeedDec = 0;
		}
		
		eeprom_write_word(EEPROM_K_I_ADD, setKi);
 666:	60 91 94 00 	lds	r22, 0x0094	; 0x800094 <setKi>
 66a:	70 91 95 00 	lds	r23, 0x0095	; 0x800095 <setKi+0x1>
 66e:	8a ea       	ldi	r24, 0xAA	; 170
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	0e 94 5f 04 	call	0x8be	; 0x8be <eeprom_write_word>
 676:	8f ef       	ldi	r24, 0xFF	; 255
 678:	94 e3       	ldi	r25, 0x34	; 52
 67a:	2c e0       	ldi	r18, 0x0C	; 12
 67c:	81 50       	subi	r24, 0x01	; 1
 67e:	90 40       	sbci	r25, 0x00	; 0
 680:	20 40       	sbci	r18, 0x00	; 0
 682:	e1 f7       	brne	.-8      	; 0x67c <__stack+0x21d>
 684:	00 c0       	rjmp	.+0      	; 0x686 <__stack+0x227>
 686:	00 00       	nop
		_delay_ms(250);
		while(IS_KEY_PROG_PRESSED);
 688:	c9 9b       	sbis	0x19, 1	; 25
 68a:	fe cf       	rjmp	.-4      	; 0x688 <__stack+0x229>
		
		fcntSpeedInc = 0, fcntSpeedDec = 0;
		
		LCD_location(1,1);
 68c:	61 e0       	ldi	r22, 0x01	; 1
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		LCD_write_string("Gain D = ");
 694:	87 e8       	ldi	r24, 0x87	; 135
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
		displayUserInfo(setKd);
 69c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <setKd>
 6a0:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <setKd+0x1>
 6a4:	0e 94 67 01 	call	0x2ce	; 0x2ce <displayUserInfo>
		
		eeprom_write_word(EEPROM_K_I_ADD, setKi);
		_delay_ms(250);
		while(IS_KEY_PROG_PRESSED);
		
		fcntSpeedInc = 0, fcntSpeedDec = 0;
 6a8:	c0 e0       	ldi	r28, 0x00	; 0
 6aa:	20 e0       	ldi	r18, 0x00	; 0
		
		LCD_location(1,1);
		LCD_write_string("Gain D = ");
		displayUserInfo(setKd);
		
		while(IS_KEY_PROG_RELEASED)
 6ac:	60 c0       	rjmp	.+192    	; 0x76e <__stack+0x30f>
		{
			if(IS_KEY_INC_PRESSED)
 6ae:	ca 99       	sbic	0x19, 2	; 25
 6b0:	2c c0       	rjmp	.+88     	; 0x70a <__stack+0x2ab>
			{
				fcntSpeedDec = 0;
				setKd = setKd + 1 + fcntSpeedInc++;
 6b2:	c1 e0       	ldi	r28, 0x01	; 1
 6b4:	c2 0f       	add	r28, r18
 6b6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <setKd>
 6ba:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <setKd+0x1>
 6be:	82 0f       	add	r24, r18
 6c0:	91 1d       	adc	r25, r1
 6c2:	01 96       	adiw	r24, 0x01	; 1
 6c4:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <setKd+0x1>
 6c8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <setKd>
				
				if(setKd > K_D_HIGH)
 6cc:	85 3f       	cpi	r24, 0xF5	; 245
 6ce:	91 40       	sbci	r25, 0x01	; 1
 6d0:	30 f0       	brcs	.+12     	; 0x6de <__stack+0x27f>
				setKd = K_D_HIGH;
 6d2:	84 ef       	ldi	r24, 0xF4	; 244
 6d4:	91 e0       	ldi	r25, 0x01	; 1
 6d6:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <setKd+0x1>
 6da:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <setKd>
				
				LCD_location(1,10);
 6de:	6a e0       	ldi	r22, 0x0A	; 10
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				displayUserInfo(setKd);
 6e6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <setKd>
 6ea:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <setKd+0x1>
 6ee:	0e 94 67 01 	call	0x2ce	; 0x2ce <displayUserInfo>
 6f2:	8f ef       	ldi	r24, 0xFF	; 255
 6f4:	94 e3       	ldi	r25, 0x34	; 52
 6f6:	2c e0       	ldi	r18, 0x0C	; 12
 6f8:	81 50       	subi	r24, 0x01	; 1
 6fa:	90 40       	sbci	r25, 0x00	; 0
 6fc:	20 40       	sbci	r18, 0x00	; 0
 6fe:	e1 f7       	brne	.-8      	; 0x6f8 <__stack+0x299>
 700:	00 c0       	rjmp	.+0      	; 0x702 <__stack+0x2a3>
 702:	00 00       	nop
		while(IS_KEY_PROG_RELEASED)
		{
			if(IS_KEY_INC_PRESSED)
			{
				fcntSpeedDec = 0;
				setKd = setKd + 1 + fcntSpeedInc++;
 704:	2c 2f       	mov	r18, r28
		
		while(IS_KEY_PROG_RELEASED)
		{
			if(IS_KEY_INC_PRESSED)
			{
				fcntSpeedDec = 0;
 706:	c0 e0       	ldi	r28, 0x00	; 0
 708:	2e c0       	rjmp	.+92     	; 0x766 <__stack+0x307>
				LCD_location(1,10);
				displayUserInfo(setKd);
				_delay_ms(250);
			}
			
			else if(IS_KEY_DEC_PRESSED)
 70a:	cb 99       	sbic	0x19, 3	; 25
 70c:	2c c0       	rjmp	.+88     	; 0x766 <__stack+0x307>
			{
				fcntSpeedInc = 0;
				if(setKd > (K_D_LOW + 1 + fcntSpeedDec))
 70e:	2c 2f       	mov	r18, r28
 710:	30 e0       	ldi	r19, 0x00	; 0
 712:	2f 5f       	subi	r18, 0xFF	; 255
 714:	3f 4f       	sbci	r19, 0xFF	; 255
 716:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <setKd>
 71a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <setKd+0x1>
 71e:	28 17       	cp	r18, r24
 720:	39 07       	cpc	r19, r25
 722:	48 f4       	brcc	.+18     	; 0x736 <__stack+0x2d7>
				setKd = setKd - 1 - fcntSpeedDec++;
 724:	8c 1b       	sub	r24, r28
 726:	91 09       	sbc	r25, r1
 728:	01 97       	sbiw	r24, 0x01	; 1
 72a:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <setKd+0x1>
 72e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <setKd>
 732:	cf 5f       	subi	r28, 0xFF	; 255
 734:	04 c0       	rjmp	.+8      	; 0x73e <__stack+0x2df>
				
				else
				setKi = K_D_LOW;
 736:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <setKi+0x1>
 73a:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <setKi>
				
				LCD_location(1,10);
 73e:	6a e0       	ldi	r22, 0x0A	; 10
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				displayUserInfo(setKd);
 746:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <setKd>
 74a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <setKd+0x1>
 74e:	0e 94 67 01 	call	0x2ce	; 0x2ce <displayUserInfo>
 752:	8f ef       	ldi	r24, 0xFF	; 255
 754:	94 e3       	ldi	r25, 0x34	; 52
 756:	2c e0       	ldi	r18, 0x0C	; 12
 758:	81 50       	subi	r24, 0x01	; 1
 75a:	90 40       	sbci	r25, 0x00	; 0
 75c:	20 40       	sbci	r18, 0x00	; 0
 75e:	e1 f7       	brne	.-8      	; 0x758 <__stack+0x2f9>
 760:	00 c0       	rjmp	.+0      	; 0x762 <__stack+0x303>
 762:	00 00       	nop
				_delay_ms(250);
			}
			
			else if(IS_KEY_DEC_PRESSED)
			{
				fcntSpeedInc = 0;
 764:	20 e0       	ldi	r18, 0x00	; 0
				LCD_location(1,10);
				displayUserInfo(setKd);
				_delay_ms(250);
			}
			
			if(IS_KEY_INC_RELEASED)
 766:	ca 99       	sbic	0x19, 2	; 25
			fcntSpeedInc = 0;
 768:	20 e0       	ldi	r18, 0x00	; 0
			
			if(IS_KEY_DEC_RELEASED)
 76a:	cb 99       	sbic	0x19, 3	; 25
			fcntSpeedDec = 0;
 76c:	c0 e0       	ldi	r28, 0x00	; 0
		
		LCD_location(1,1);
		LCD_write_string("Gain D = ");
		displayUserInfo(setKd);
		
		while(IS_KEY_PROG_RELEASED)
 76e:	c9 99       	sbic	0x19, 1	; 25
 770:	9e cf       	rjmp	.-196    	; 0x6ae <__stack+0x24f>
			
			if(IS_KEY_DEC_RELEASED)
			fcntSpeedDec = 0;
		}
		
		eeprom_write_word(EEPROM_K_D_ADD, setKd);
 772:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <setKd>
 776:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <setKd+0x1>
 77a:	8e eb       	ldi	r24, 0xBE	; 190
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	0e 94 5f 04 	call	0x8be	; 0x8be <eeprom_write_word>
 782:	8f ef       	ldi	r24, 0xFF	; 255
 784:	94 e3       	ldi	r25, 0x34	; 52
 786:	2c e0       	ldi	r18, 0x0C	; 12
 788:	81 50       	subi	r24, 0x01	; 1
 78a:	90 40       	sbci	r25, 0x00	; 0
 78c:	20 40       	sbci	r18, 0x00	; 0
 78e:	e1 f7       	brne	.-8      	; 0x788 <__stack+0x329>
 790:	00 c0       	rjmp	.+0      	; 0x792 <__stack+0x333>
 792:	00 00       	nop
		_delay_ms(250);
		while(IS_KEY_PROG_PRESSED);
 794:	c9 9b       	sbis	0x19, 1	; 25
 796:	fe cf       	rjmp	.-4      	; 0x794 <__stack+0x335>
	}
}
 798:	cf 91       	pop	r28
 79a:	08 95       	ret

0000079c <eeprom_init>:
// 		
// 	}
// 	
// 	else
// 	{
		setTemp = TEMP_DEFAULT;
 79c:	8d e1       	ldi	r24, 0x1D	; 29
 79e:	91 e0       	ldi	r25, 0x01	; 1
 7a0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 7a4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		eeprom_write_word(EEPROM_TEMP_ADD, setTemp);
 7a8:	6d e1       	ldi	r22, 0x1D	; 29
 7aa:	71 e0       	ldi	r23, 0x01	; 1
 7ac:	82 e8       	ldi	r24, 0x82	; 130
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	0e 94 5f 04 	call	0x8be	; 0x8be <eeprom_write_word>
		
		setKp = K_P_DEFAULT;
 7b4:	8c ed       	ldi	r24, 0xDC	; 220
 7b6:	95 e0       	ldi	r25, 0x05	; 5
 7b8:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <setKp+0x1>
 7bc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <setKp>
		eeprom_write_word(EEPROM_K_P_ADD, setKp);
 7c0:	6c ed       	ldi	r22, 0xDC	; 220
 7c2:	75 e0       	ldi	r23, 0x05	; 5
 7c4:	86 e9       	ldi	r24, 0x96	; 150
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	0e 94 5f 04 	call	0x8be	; 0x8be <eeprom_write_word>
		
		setKi = K_I_DEFAULT;
 7cc:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <setKi+0x1>
 7d0:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <setKi>
		eeprom_write_word(EEPROM_K_I_ADD, setKi);
 7d4:	60 e0       	ldi	r22, 0x00	; 0
 7d6:	70 e0       	ldi	r23, 0x00	; 0
 7d8:	8a ea       	ldi	r24, 0xAA	; 170
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	0e 94 5f 04 	call	0x8be	; 0x8be <eeprom_write_word>
		
		setKd = K_D_DEFAULT;
 7e0:	85 e0       	ldi	r24, 0x05	; 5
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <setKd+0x1>
 7e8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <setKd>
		eeprom_write_word(EEPROM_K_D_ADD, setKd);
 7ec:	65 e0       	ldi	r22, 0x05	; 5
 7ee:	70 e0       	ldi	r23, 0x00	; 0
 7f0:	8e eb       	ldi	r24, 0xBE	; 190
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	0e 94 5f 04 	call	0x8be	; 0x8be <eeprom_write_word>
		
		flagDebugMode = 0;		
 7f8:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <__data_end+0x1>
 7fc:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__data_end>
		eeprom_write_word(EEPROM_DEBUG_ADD, flagDebugMode);
 800:	60 91 92 00 	lds	r22, 0x0092	; 0x800092 <__data_end>
 804:	70 91 93 00 	lds	r23, 0x0093	; 0x800093 <__data_end+0x1>
 808:	82 ed       	ldi	r24, 0xD2	; 210
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	0e 94 5f 04 	call	0x8be	; 0x8be <eeprom_write_word>
		
		eeprom_write_word(EEPROM_CHECKSUM_ADD, EEPROM_CHECKSUM);
 810:	65 ec       	ldi	r22, 0xC5	; 197
 812:	7d e1       	ldi	r23, 0x1D	; 29
 814:	8e e6       	ldi	r24, 0x6E	; 110
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	0e 94 5f 04 	call	0x8be	; 0x8be <eeprom_write_word>
 81c:	08 95       	ret

0000081e <main>:
 81e:	2f ef       	ldi	r18, 0xFF	; 255
 820:	80 e7       	ldi	r24, 0x70	; 112
 822:	92 e0       	ldi	r25, 0x02	; 2
 824:	21 50       	subi	r18, 0x01	; 1
 826:	80 40       	sbci	r24, 0x00	; 0
 828:	90 40       	sbci	r25, 0x00	; 0
 82a:	e1 f7       	brne	.-8      	; 0x824 <main+0x6>
 82c:	00 c0       	rjmp	.+0      	; 0x82e <main+0x10>
 82e:	00 00       	nop
float lastcurrentPoint = 0.00;

int main(void)
{
	_delay_ms(50);
	KEY_INIT;
 830:	8a b3       	in	r24, 0x1a	; 26
 832:	81 7e       	andi	r24, 0xE1	; 225
 834:	8a bb       	out	0x1a, r24	; 26
	KEY_PULLUP_INIT;
 836:	8b b3       	in	r24, 0x1b	; 27
 838:	8e 61       	ori	r24, 0x1E	; 30
 83a:	8b bb       	out	0x1b, r24	; 27

	/* EEPROM write */
	eeprom_init();
 83c:	0e 94 ce 03 	call	0x79c	; 0x79c <eeprom_init>
 
	 while(USART_init(115200) == USART_ERROR);
 840:	60 e0       	ldi	r22, 0x00	; 0
 842:	72 ec       	ldi	r23, 0xC2	; 194
 844:	81 e0       	ldi	r24, 0x01	; 1
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	0e 94 36 01 	call	0x26c	; 0x26c <USART_init>
 84c:	88 23       	and	r24, r24
 84e:	c1 f3       	breq	.-16     	; 0x840 <main+0x22>
  	 
	 LCD_Init();
 850:	0e 94 88 00 	call	0x110	; 0x110 <LCD_Init>
// 				processTempUpdate();
// 				LCD_location(1,16);
// 				LCD_write(' ');
// 			}
// 		}
 		keyEventExecute();	
 854:	0e 94 0b 02 	call	0x416	; 0x416 <keyEventExecute>
 858:	fd cf       	rjmp	.-6      	; 0x854 <main+0x36>

0000085a <callback>:
		eeprom_write_word(EEPROM_CHECKSUM_ADD, EEPROM_CHECKSUM);
// 	}
}
// 
void callback (void)
{
 85a:	08 95       	ret

0000085c <__udivmodsi4>:
 85c:	a1 e2       	ldi	r26, 0x21	; 33
 85e:	1a 2e       	mov	r1, r26
 860:	aa 1b       	sub	r26, r26
 862:	bb 1b       	sub	r27, r27
 864:	fd 01       	movw	r30, r26
 866:	0d c0       	rjmp	.+26     	; 0x882 <__udivmodsi4_ep>

00000868 <__udivmodsi4_loop>:
 868:	aa 1f       	adc	r26, r26
 86a:	bb 1f       	adc	r27, r27
 86c:	ee 1f       	adc	r30, r30
 86e:	ff 1f       	adc	r31, r31
 870:	a2 17       	cp	r26, r18
 872:	b3 07       	cpc	r27, r19
 874:	e4 07       	cpc	r30, r20
 876:	f5 07       	cpc	r31, r21
 878:	20 f0       	brcs	.+8      	; 0x882 <__udivmodsi4_ep>
 87a:	a2 1b       	sub	r26, r18
 87c:	b3 0b       	sbc	r27, r19
 87e:	e4 0b       	sbc	r30, r20
 880:	f5 0b       	sbc	r31, r21

00000882 <__udivmodsi4_ep>:
 882:	66 1f       	adc	r22, r22
 884:	77 1f       	adc	r23, r23
 886:	88 1f       	adc	r24, r24
 888:	99 1f       	adc	r25, r25
 88a:	1a 94       	dec	r1
 88c:	69 f7       	brne	.-38     	; 0x868 <__udivmodsi4_loop>
 88e:	60 95       	com	r22
 890:	70 95       	com	r23
 892:	80 95       	com	r24
 894:	90 95       	com	r25
 896:	9b 01       	movw	r18, r22
 898:	ac 01       	movw	r20, r24
 89a:	bd 01       	movw	r22, r26
 89c:	cf 01       	movw	r24, r30
 89e:	08 95       	ret

000008a0 <__umulhisi3>:
 8a0:	a2 9f       	mul	r26, r18
 8a2:	b0 01       	movw	r22, r0
 8a4:	b3 9f       	mul	r27, r19
 8a6:	c0 01       	movw	r24, r0
 8a8:	a3 9f       	mul	r26, r19
 8aa:	70 0d       	add	r23, r0
 8ac:	81 1d       	adc	r24, r1
 8ae:	11 24       	eor	r1, r1
 8b0:	91 1d       	adc	r25, r1
 8b2:	b2 9f       	mul	r27, r18
 8b4:	70 0d       	add	r23, r0
 8b6:	81 1d       	adc	r24, r1
 8b8:	11 24       	eor	r1, r1
 8ba:	91 1d       	adc	r25, r1
 8bc:	08 95       	ret

000008be <eeprom_write_word>:
 8be:	0e 94 64 04 	call	0x8c8	; 0x8c8 <eeprom_write_byte>
 8c2:	27 2f       	mov	r18, r23
 8c4:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <eeprom_write_r18>

000008c8 <eeprom_write_byte>:
 8c8:	26 2f       	mov	r18, r22

000008ca <eeprom_write_r18>:
 8ca:	e1 99       	sbic	0x1c, 1	; 28
 8cc:	fe cf       	rjmp	.-4      	; 0x8ca <eeprom_write_r18>
 8ce:	9f bb       	out	0x1f, r25	; 31
 8d0:	8e bb       	out	0x1e, r24	; 30
 8d2:	2d bb       	out	0x1d, r18	; 29
 8d4:	0f b6       	in	r0, 0x3f	; 63
 8d6:	f8 94       	cli
 8d8:	e2 9a       	sbi	0x1c, 2	; 28
 8da:	e1 9a       	sbi	0x1c, 1	; 28
 8dc:	0f be       	out	0x3f, r0	; 63
 8de:	01 96       	adiw	r24, 0x01	; 1
 8e0:	08 95       	ret

000008e2 <_exit>:
 8e2:	f8 94       	cli

000008e4 <__stop_program>:
 8e4:	ff cf       	rjmp	.-2      	; 0x8e4 <__stop_program>
