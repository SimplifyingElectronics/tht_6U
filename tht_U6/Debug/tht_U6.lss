
tht_U6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000638  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00800060  00000638  000006cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000071  008000c4  008000c4  00000730  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000760  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  000007a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022c9  00000000  00000000  00000968  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ac6  00000000  00000000  00002c31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001332  00000000  00000000  000036f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e8  00000000  00000000  00004a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ab  00000000  00000000  00004e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000125e  00000000  00000000  000054bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  0000671d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e3       	ldi	r30, 0x38	; 56
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3c       	cpi	r26, 0xC4	; 196
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a4 ec       	ldi	r26, 0xC4	; 196
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 33       	cpi	r26, 0x35	; 53
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8b 02 	call	0x516	; 0x516 <main>
  8a:	0c 94 1a 03 	jmp	0x634	; 0x634 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Command>:
	LCD_Char('.'); // '.'

	LCD_Char((value / 10) % 10 + 48); //'8'

	LCD_Char((value) % 10 + 48); //'5'
}
  92:	85 bb       	out	0x15, r24	; 21
  94:	82 b3       	in	r24, 0x12	; 18
  96:	8f 7b       	andi	r24, 0xBF	; 191
  98:	82 bb       	out	0x12, r24	; 18
  9a:	82 b3       	in	r24, 0x12	; 18
  9c:	80 68       	ori	r24, 0x80	; 128
  9e:	82 bb       	out	0x12, r24	; 18
  a0:	85 e0       	ldi	r24, 0x05	; 5
  a2:	8a 95       	dec	r24
  a4:	f1 f7       	brne	.-4      	; 0xa2 <LCD_Command+0x10>
  a6:	00 00       	nop
  a8:	82 b3       	in	r24, 0x12	; 18
  aa:	8f 77       	andi	r24, 0x7F	; 127
  ac:	82 bb       	out	0x12, r24	; 18
  ae:	8f ed       	ldi	r24, 0xDF	; 223
  b0:	9e e2       	ldi	r25, 0x2E	; 46
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <LCD_Command+0x20>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <LCD_Command+0x26>
  b8:	00 00       	nop
  ba:	08 95       	ret

000000bc <LCD_Char>:
  bc:	85 bb       	out	0x15, r24	; 21
  be:	82 b3       	in	r24, 0x12	; 18
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	82 bb       	out	0x12, r24	; 18
  c4:	82 b3       	in	r24, 0x12	; 18
  c6:	80 68       	ori	r24, 0x80	; 128
  c8:	82 bb       	out	0x12, r24	; 18
  ca:	85 e0       	ldi	r24, 0x05	; 5
  cc:	8a 95       	dec	r24
  ce:	f1 f7       	brne	.-4      	; 0xcc <LCD_Char+0x10>
  d0:	00 00       	nop
  d2:	82 b3       	in	r24, 0x12	; 18
  d4:	8f 77       	andi	r24, 0x7F	; 127
  d6:	82 bb       	out	0x12, r24	; 18
  d8:	8f e9       	ldi	r24, 0x9F	; 159
  da:	9f e0       	ldi	r25, 0x0F	; 15
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <LCD_Char+0x20>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <LCD_Char+0x26>
  e2:	00 00       	nop
  e4:	08 95       	ret

000000e6 <LCD_write>:
  e6:	85 bb       	out	0x15, r24	; 21
  e8:	82 b3       	in	r24, 0x12	; 18
  ea:	80 64       	ori	r24, 0x40	; 64
  ec:	82 bb       	out	0x12, r24	; 18
  ee:	82 b3       	in	r24, 0x12	; 18
  f0:	80 68       	ori	r24, 0x80	; 128
  f2:	82 bb       	out	0x12, r24	; 18
  f4:	85 e0       	ldi	r24, 0x05	; 5
  f6:	8a 95       	dec	r24
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCD_write+0x10>
  fa:	00 00       	nop
  fc:	82 b3       	in	r24, 0x12	; 18
  fe:	8f 77       	andi	r24, 0x7F	; 127
 100:	82 bb       	out	0x12, r24	; 18
 102:	8f e9       	ldi	r24, 0x9F	; 159
 104:	9f e0       	ldi	r25, 0x0F	; 15
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <LCD_write+0x20>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <LCD_write+0x26>
 10c:	00 00       	nop
 10e:	08 95       	ret

00000110 <LCD_Init>:
 110:	81 b3       	in	r24, 0x11	; 17
 112:	80 6c       	ori	r24, 0xC0	; 192
 114:	81 bb       	out	0x11, r24	; 17
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	84 bb       	out	0x14, r24	; 20
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	89 ef       	ldi	r24, 0xF9	; 249
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <LCD_Init+0x10>
 128:	00 c0       	rjmp	.+0      	; 0x12a <LCD_Init+0x1a>
 12a:	00 00       	nop
 12c:	88 e3       	ldi	r24, 0x38	; 56
 12e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 132:	25 e0       	ldi	r18, 0x05	; 5
 134:	2a 95       	dec	r18
 136:	f1 f7       	brne	.-4      	; 0x134 <LCD_Init+0x24>
 138:	00 00       	nop
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 140:	85 e0       	ldi	r24, 0x05	; 5
 142:	8a 95       	dec	r24
 144:	f1 f7       	brne	.-4      	; 0x142 <LCD_Init+0x32>
 146:	00 00       	nop
 148:	8e e0       	ldi	r24, 0x0E	; 14
 14a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 14e:	95 e0       	ldi	r25, 0x05	; 5
 150:	9a 95       	dec	r25
 152:	f1 f7       	brne	.-4      	; 0x150 <LCD_Init+0x40>
 154:	00 00       	nop
 156:	80 e8       	ldi	r24, 0x80	; 128
 158:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 15c:	87 ec       	ldi	r24, 0xC7	; 199
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <LCD_Init+0x50>
 164:	00 c0       	rjmp	.+0      	; 0x166 <LCD_Init+0x56>
 166:	00 00       	nop
 168:	08 95       	ret

0000016a <LCD_showvalue>:

void LCD_showvalue(uint16_t data)
{
 16a:	0f 93       	push	r16
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	8c 01       	movw	r16, r24
	LCD_write(((data / 100) % 10) + 0x30);
 174:	9c 01       	movw	r18, r24
 176:	36 95       	lsr	r19
 178:	27 95       	ror	r18
 17a:	36 95       	lsr	r19
 17c:	27 95       	ror	r18
 17e:	ab e7       	ldi	r26, 0x7B	; 123
 180:	b4 e1       	ldi	r27, 0x14	; 20
 182:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__umulhisi3>
 186:	ac 01       	movw	r20, r24
 188:	56 95       	lsr	r21
 18a:	47 95       	ror	r20
 18c:	9a 01       	movw	r18, r20
 18e:	ad ec       	ldi	r26, 0xCD	; 205
 190:	bc ec       	ldi	r27, 0xCC	; 204
 192:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__umulhisi3>
 196:	96 95       	lsr	r25
 198:	87 95       	ror	r24
 19a:	96 95       	lsr	r25
 19c:	87 95       	ror	r24
 19e:	96 95       	lsr	r25
 1a0:	87 95       	ror	r24
 1a2:	9c 01       	movw	r18, r24
 1a4:	22 0f       	add	r18, r18
 1a6:	33 1f       	adc	r19, r19
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	82 0f       	add	r24, r18
 1b6:	93 1f       	adc	r25, r19
 1b8:	9a 01       	movw	r18, r20
 1ba:	28 1b       	sub	r18, r24
 1bc:	39 0b       	sbc	r19, r25
 1be:	c9 01       	movw	r24, r18
 1c0:	80 5d       	subi	r24, 0xD0	; 208
 1c2:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
	LCD_write(((data / 10) % 10) + 0x30);
 1c6:	98 01       	movw	r18, r16
 1c8:	ad ec       	ldi	r26, 0xCD	; 205
 1ca:	bc ec       	ldi	r27, 0xCC	; 204
 1cc:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__umulhisi3>
 1d0:	ec 01       	movw	r28, r24
 1d2:	d6 95       	lsr	r29
 1d4:	c7 95       	ror	r28
 1d6:	d6 95       	lsr	r29
 1d8:	c7 95       	ror	r28
 1da:	d6 95       	lsr	r29
 1dc:	c7 95       	ror	r28
 1de:	9e 01       	movw	r18, r28
 1e0:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__umulhisi3>
 1e4:	96 95       	lsr	r25
 1e6:	87 95       	ror	r24
 1e8:	96 95       	lsr	r25
 1ea:	87 95       	ror	r24
 1ec:	96 95       	lsr	r25
 1ee:	87 95       	ror	r24
 1f0:	9c 01       	movw	r18, r24
 1f2:	22 0f       	add	r18, r18
 1f4:	33 1f       	adc	r19, r19
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	82 0f       	add	r24, r18
 204:	93 1f       	adc	r25, r19
 206:	9e 01       	movw	r18, r28
 208:	28 1b       	sub	r18, r24
 20a:	39 0b       	sbc	r19, r25
 20c:	c9 01       	movw	r24, r18
 20e:	80 5d       	subi	r24, 0xD0	; 208
 210:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
	LCD_Char('.');
 214:	8e e2       	ldi	r24, 0x2E	; 46
 216:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_Char>
	LCD_write(((data / 1) % 10) + 0x30);
 21a:	ce 01       	movw	r24, r28
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	cc 0f       	add	r28, r28
 222:	dd 1f       	adc	r29, r29
 224:	cc 0f       	add	r28, r28
 226:	dd 1f       	adc	r29, r29
 228:	cc 0f       	add	r28, r28
 22a:	dd 1f       	adc	r29, r29
 22c:	c8 0f       	add	r28, r24
 22e:	d9 1f       	adc	r29, r25
 230:	c8 01       	movw	r24, r16
 232:	8c 1b       	sub	r24, r28
 234:	9d 0b       	sbc	r25, r29
 236:	80 5d       	subi	r24, 0xD0	; 208
 238:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	08 95       	ret

00000246 <timer2_init>:
{
	/* Clear OC0 on compare match, set OC0 at BOTTOM, (non-inverting mode) */
	TCCR0 &= (~((1<<COM1A0) | (1<<COM1A1)));
	
	/* make pwm as input */
	DDRD &= (~(1<<5));
 246:	85 b5       	in	r24, 0x25	; 37
 248:	8d 60       	ori	r24, 0x0D	; 13
 24a:	85 bd       	out	0x25, r24	; 37
 24c:	8c e7       	ldi	r24, 0x7C	; 124
 24e:	83 bd       	out	0x23, r24	; 35
 250:	89 b7       	in	r24, 0x39	; 57
 252:	80 68       	ori	r24, 0x80	; 128
 254:	89 bf       	out	0x39, r24	; 57
 256:	14 bc       	out	0x24, r1	; 36
 258:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <fcnt_millis>
 25c:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <fcnt_millis+0x1>
 260:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <fcnt_millis+0x2>
 264:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <fcnt_millis+0x3>
 268:	78 94       	sei
 26a:	08 95       	ret

0000026c <__vector_3>:
}

ISR(TIMER2_COMP_vect)
{
 26c:	1f 92       	push	r1
 26e:	0f 92       	push	r0
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	0f 92       	push	r0
 274:	11 24       	eor	r1, r1
 276:	2f 93       	push	r18
 278:	3f 93       	push	r19
 27a:	4f 93       	push	r20
 27c:	5f 93       	push	r21
 27e:	6f 93       	push	r22
 280:	7f 93       	push	r23
 282:	8f 93       	push	r24
 284:	9f 93       	push	r25
 286:	af 93       	push	r26
 288:	bf 93       	push	r27
 28a:	ef 93       	push	r30
 28c:	ff 93       	push	r31
	fcnt_millis++;
 28e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <fcnt_millis>
 292:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <fcnt_millis+0x1>
 296:	a0 91 ca 00 	lds	r26, 0x00CA	; 0x8000ca <fcnt_millis+0x2>
 29a:	b0 91 cb 00 	lds	r27, 0x00CB	; 0x8000cb <fcnt_millis+0x3>
 29e:	01 96       	adiw	r24, 0x01	; 1
 2a0:	a1 1d       	adc	r26, r1
 2a2:	b1 1d       	adc	r27, r1
 2a4:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <fcnt_millis>
 2a8:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <fcnt_millis+0x1>
 2ac:	a0 93 ca 00 	sts	0x00CA, r26	; 0x8000ca <fcnt_millis+0x2>
 2b0:	b0 93 cb 00 	sts	0x00CB, r27	; 0x8000cb <fcnt_millis+0x3>
	callback();
 2b4:	0e 94 ad 02 	call	0x55a	; 0x55a <callback>
}
 2b8:	ff 91       	pop	r31
 2ba:	ef 91       	pop	r30
 2bc:	bf 91       	pop	r27
 2be:	af 91       	pop	r26
 2c0:	9f 91       	pop	r25
 2c2:	8f 91       	pop	r24
 2c4:	7f 91       	pop	r23
 2c6:	6f 91       	pop	r22
 2c8:	5f 91       	pop	r21
 2ca:	4f 91       	pop	r20
 2cc:	3f 91       	pop	r19
 2ce:	2f 91       	pop	r18
 2d0:	0f 90       	pop	r0
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	0f 90       	pop	r0
 2d6:	1f 90       	pop	r1
 2d8:	18 95       	reti

000002da <USART_init>:
	{
		UWriteData(str[i]);
		i++;
	}
	
}
 2da:	2f ef       	ldi	r18, 0xFF	; 255
 2dc:	20 93 cf 00 	sts	0x00CF, r18	; 0x8000cf <UQEnd>
 2e0:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <UQFront>
 2e4:	dc 01       	movw	r26, r24
 2e6:	cb 01       	movw	r24, r22
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	aa 1f       	adc	r26, r26
 2ee:	bb 1f       	adc	r27, r27
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	aa 1f       	adc	r26, r26
 2f6:	bb 1f       	adc	r27, r27
 2f8:	9c 01       	movw	r18, r24
 2fa:	ad 01       	movw	r20, r26
 2fc:	22 0f       	add	r18, r18
 2fe:	33 1f       	adc	r19, r19
 300:	44 1f       	adc	r20, r20
 302:	55 1f       	adc	r21, r21
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	74 e2       	ldi	r23, 0x24	; 36
 308:	84 ef       	ldi	r24, 0xF4	; 244
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__udivmodsi4>
 310:	21 50       	subi	r18, 0x01	; 1
 312:	31 09       	sbc	r19, r1
 314:	71 f0       	breq	.+28     	; 0x332 <USART_init+0x58>
 316:	8a b1       	in	r24, 0x0a	; 10
 318:	88 69       	ori	r24, 0x98	; 152
 31a:	8a b9       	out	0x0a, r24	; 10
 31c:	80 b5       	in	r24, 0x20	; 32
 31e:	86 68       	ori	r24, 0x86	; 134
 320:	80 bd       	out	0x20, r24	; 32
 322:	8b b1       	in	r24, 0x0b	; 11
 324:	82 60       	ori	r24, 0x02	; 2
 326:	8b b9       	out	0x0b, r24	; 11
 328:	29 b9       	out	0x09, r18	; 9
 32a:	30 bd       	out	0x20, r19	; 32
 32c:	78 94       	sei
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	08 95       	ret
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	08 95       	ret

00000336 <UWriteData>:
 336:	5d 9b       	sbis	0x0b, 5	; 11
 338:	fe cf       	rjmp	.-4      	; 0x336 <UWriteData>
 33a:	8c b9       	out	0x0c, r24	; 12
 33c:	08 95       	ret

0000033e <UWriteData_string>:
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	ec 01       	movw	r28, r24
 344:	03 c0       	rjmp	.+6      	; 0x34c <UWriteData_string+0xe>
 346:	0e 94 9b 01 	call	0x336	; 0x336 <UWriteData>
 34a:	21 96       	adiw	r28, 0x01	; 1
 34c:	88 81       	ld	r24, Y
 34e:	81 11       	cpse	r24, r1
 350:	fa cf       	rjmp	.-12     	; 0x346 <UWriteData_string+0x8>
 352:	0e 94 9b 01 	call	0x336	; 0x336 <UWriteData>
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	08 95       	ret

0000035c <__vector_11>:

ISR(USART_RXC_vect)
{
 35c:	1f 92       	push	r1
 35e:	0f 92       	push	r0
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	0f 92       	push	r0
 364:	11 24       	eor	r1, r1
 366:	2f 93       	push	r18
 368:	3f 93       	push	r19
 36a:	4f 93       	push	r20
 36c:	8f 93       	push	r24
 36e:	9f 93       	push	r25
 370:	ef 93       	push	r30
 372:	ff 93       	push	r31
	char data = UDR;
 374:	4c b1       	in	r20, 0x0c	; 12
	
	if(((UQEnd == (RECEIVE_BUFFER_SIZE - 1)) && (UQFront == 0)) || ((UQEnd+1)==UQFront))
 376:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <UQEnd>
 37a:	89 35       	cpi	r24, 0x59	; 89
 37c:	21 f4       	brne	.+8      	; 0x386 <__vector_11+0x2a>
 37e:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <UQFront>
 382:	88 23       	and	r24, r24
 384:	71 f0       	breq	.+28     	; 0x3a2 <__vector_11+0x46>
 386:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <UQEnd>
 38a:	08 2e       	mov	r0, r24
 38c:	00 0c       	add	r0, r0
 38e:	99 0b       	sbc	r25, r25
 390:	01 96       	adiw	r24, 0x01	; 1
 392:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <UQFront>
 396:	02 2e       	mov	r0, r18
 398:	00 0c       	add	r0, r0
 39a:	33 0b       	sbc	r19, r19
 39c:	82 17       	cp	r24, r18
 39e:	93 07       	cpc	r25, r19
 3a0:	59 f4       	brne	.+22     	; 0x3b8 <__vector_11+0x5c>
	{
		UQFront++;
 3a2:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <UQFront>
 3a6:	8f 5f       	subi	r24, 0xFF	; 255
 3a8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <UQFront>
		
		if(UQFront==RECEIVE_BUFFER_SIZE) UQFront = 0;
 3ac:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <UQFront>
 3b0:	8a 35       	cpi	r24, 0x5A	; 90
 3b2:	11 f4       	brne	.+4      	; 0x3b8 <__vector_11+0x5c>
 3b4:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <UQFront>
	}
	
	if(UQEnd==(RECEIVE_BUFFER_SIZE-1)) UQEnd = 0;
 3b8:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <UQEnd>
 3bc:	89 35       	cpi	r24, 0x59	; 89
 3be:	19 f4       	brne	.+6      	; 0x3c6 <__vector_11+0x6a>
 3c0:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <UQEnd>
 3c4:	05 c0       	rjmp	.+10     	; 0x3d0 <__vector_11+0x74>
	
	else
	UQEnd++;
 3c6:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <UQEnd>
 3ca:	8f 5f       	subi	r24, 0xFF	; 255
 3cc:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <UQEnd>
	
	URbuff[UQEnd] = data;
 3d0:	e0 91 cf 00 	lds	r30, 0x00CF	; 0x8000cf <UQEnd>
 3d4:	0e 2e       	mov	r0, r30
 3d6:	00 0c       	add	r0, r0
 3d8:	ff 0b       	sbc	r31, r31
 3da:	e0 53       	subi	r30, 0x30	; 48
 3dc:	ff 4f       	sbci	r31, 0xFF	; 255
 3de:	40 83       	st	Z, r20
	
	if(UQFront == -1) UQFront = 0;
 3e0:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <UQFront>
 3e4:	8f 3f       	cpi	r24, 0xFF	; 255
 3e6:	11 f4       	brne	.+4      	; 0x3ec <__vector_11+0x90>
 3e8:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <UQFront>
	
}
 3ec:	ff 91       	pop	r31
 3ee:	ef 91       	pop	r30
 3f0:	9f 91       	pop	r25
 3f2:	8f 91       	pop	r24
 3f4:	4f 91       	pop	r20
 3f6:	3f 91       	pop	r19
 3f8:	2f 91       	pop	r18
 3fa:	0f 90       	pop	r0
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	0f 90       	pop	r0
 400:	1f 90       	pop	r1
 402:	18 95       	reti

00000404 <UReadData>:

char UReadData(void)
{
	char data;
	
	if(UQFront == -1)
 404:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <UQFront>
 408:	8f 3f       	cpi	r24, 0xFF	; 255
 40a:	11 f4       	brne	.+4      	; 0x410 <UReadData+0xc>
	UQFront = 0;
 40c:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <UQFront>
	
	data = URbuff[UQFront];
 410:	e0 91 ce 00 	lds	r30, 0x00CE	; 0x8000ce <UQFront>
 414:	0e 2e       	mov	r0, r30
 416:	00 0c       	add	r0, r0
 418:	ff 0b       	sbc	r31, r31
 41a:	e0 53       	subi	r30, 0x30	; 48
 41c:	ff 4f       	sbci	r31, 0xFF	; 255
 41e:	80 81       	ld	r24, Z
	
	if(UQFront == UQEnd)
 420:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <UQFront>
 424:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <UQEnd>
 428:	29 13       	cpse	r18, r25
 42a:	06 c0       	rjmp	.+12     	; 0x438 <UReadData+0x34>
	UQFront = UQEnd = -1;
 42c:	9f ef       	ldi	r25, 0xFF	; 255
 42e:	90 93 cf 00 	sts	0x00CF, r25	; 0x8000cf <UQEnd>
 432:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <UQFront>
 436:	08 95       	ret
	
	else
	{
		UQFront++;
 438:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <UQFront>
 43c:	9f 5f       	subi	r25, 0xFF	; 255
 43e:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <UQFront>
		
		if(UQFront == RECEIVE_BUFFER_SIZE)
 442:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <UQFront>
 446:	9a 35       	cpi	r25, 0x5A	; 90
 448:	11 f4       	brne	.+4      	; 0x44e <UReadData+0x4a>
		UQFront = 0;
 44a:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <UQFront>
	}
	return data;	
}
 44e:	08 95       	ret

00000450 <UAvailableData>:

uint8_t UAvailableData(void)
{
	if(UQFront == -1) return 0;
 450:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <UQFront>
 454:	8f 3f       	cpi	r24, 0xFF	; 255
 456:	d1 f0       	breq	.+52     	; 0x48c <__stack+0x2d>
	if(UQFront < UQEnd) return (UQEnd - UQFront + 1);
 458:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <UQFront>
 45c:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <UQEnd>
 460:	98 17       	cp	r25, r24
 462:	3c f4       	brge	.+14     	; 0x472 <__stack+0x13>
 464:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <UQEnd>
 468:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <UQFront>
 46c:	89 1b       	sub	r24, r25
 46e:	8f 5f       	subi	r24, 0xFF	; 255
 470:	08 95       	ret
	else if (UQFront > UQEnd) return (RECEIVE_BUFFER_SIZE - UQFront + UQEnd + 1);
 472:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <UQFront>
 476:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <UQEnd>
 47a:	89 17       	cp	r24, r25
 47c:	4c f4       	brge	.+18     	; 0x490 <__stack+0x31>
 47e:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <UQEnd>
 482:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <UQFront>
 486:	89 1b       	sub	r24, r25
 488:	85 5a       	subi	r24, 0xA5	; 165
 48a:	08 95       	ret
	return data;	
}

uint8_t UAvailableData(void)
{
	if(UQFront == -1) return 0;
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	08 95       	ret
	if(UQFront < UQEnd) return (UQEnd - UQFront + 1);
	else if (UQFront > UQEnd) return (RECEIVE_BUFFER_SIZE - UQFront + UQEnd + 1);
	else return 1;
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	08 95       	ret

00000494 <eeprom_init>:
// 		
// 	}
// 	
// 	else
// 	{
		setTemp = TEMP_DEFAULT;
 494:	8d e1       	ldi	r24, 0x1D	; 29
 496:	91 e0       	ldi	r25, 0x01	; 1
 498:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 49c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		eeprom_write_word(EEPROM_TEMP_ADD, setTemp);
 4a0:	6d e1       	ldi	r22, 0x1D	; 29
 4a2:	71 e0       	ldi	r23, 0x01	; 1
 4a4:	82 e8       	ldi	r24, 0x82	; 130
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	0e 94 08 03 	call	0x610	; 0x610 <eeprom_write_word>
		
		setKp = K_P_DEFAULT;
 4ac:	8c ed       	ldi	r24, 0xDC	; 220
 4ae:	95 e0       	ldi	r25, 0x05	; 5
 4b0:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <setKp+0x1>
 4b4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <setKp>
		eeprom_write_word(EEPROM_K_P_ADD, setKp);
 4b8:	6c ed       	ldi	r22, 0xDC	; 220
 4ba:	75 e0       	ldi	r23, 0x05	; 5
 4bc:	86 e9       	ldi	r24, 0x96	; 150
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 08 03 	call	0x610	; 0x610 <eeprom_write_word>
		
		setKi = K_I_DEFAULT;
 4c4:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <setKi+0x1>
 4c8:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <setKi>
		eeprom_write_word(EEPROM_K_I_ADD, setKi);
 4cc:	60 e0       	ldi	r22, 0x00	; 0
 4ce:	70 e0       	ldi	r23, 0x00	; 0
 4d0:	8a ea       	ldi	r24, 0xAA	; 170
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 08 03 	call	0x610	; 0x610 <eeprom_write_word>
		
		setKd = K_D_DEFAULT;
 4d8:	85 e0       	ldi	r24, 0x05	; 5
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <setKd+0x1>
 4e0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <setKd>
		eeprom_write_word(EEPROM_K_D_ADD, setKd);
 4e4:	65 e0       	ldi	r22, 0x05	; 5
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	8e eb       	ldi	r24, 0xBE	; 190
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 08 03 	call	0x610	; 0x610 <eeprom_write_word>
		
		flagDebugMode = 0;		
 4f0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__data_end+0x1>
 4f4:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__data_end>
		eeprom_write_word(EEPROM_DEBUG_ADD, flagDebugMode);
 4f8:	60 91 c4 00 	lds	r22, 0x00C4	; 0x8000c4 <__data_end>
 4fc:	70 91 c5 00 	lds	r23, 0x00C5	; 0x8000c5 <__data_end+0x1>
 500:	82 ed       	ldi	r24, 0xD2	; 210
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 08 03 	call	0x610	; 0x610 <eeprom_write_word>
		
		eeprom_write_word(EEPROM_CHECKSUM_ADD, EEPROM_CHECKSUM);
 508:	65 ec       	ldi	r22, 0xC5	; 197
 50a:	7d e1       	ldi	r23, 0x1D	; 29
 50c:	8e e6       	ldi	r24, 0x6E	; 110
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	0e 94 08 03 	call	0x610	; 0x610 <eeprom_write_word>
 514:	08 95       	ret

00000516 <main>:
float lastcurrentPoint = 0.00;
extern uint8_t flg;
int main(void)
{
/*	_delay_ms(50);*/
	KEY_INIT;
 516:	8a b3       	in	r24, 0x1a	; 26
 518:	81 7e       	andi	r24, 0xE1	; 225
 51a:	8a bb       	out	0x1a, r24	; 26
	KEY_PULLUP_INIT;
 51c:	8b b3       	in	r24, 0x1b	; 27
 51e:	8e 61       	ori	r24, 0x1E	; 30
 520:	8b bb       	out	0x1b, r24	; 27

	/* EEPROM write */
	eeprom_init();
 522:	0e 94 4a 02 	call	0x494	; 0x494 <eeprom_init>
 
	 while(USART_init(115200) == USART_ERROR);
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	72 ec       	ldi	r23, 0xC2	; 194
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 6d 01 	call	0x2da	; 0x2da <USART_init>
 532:	88 23       	and	r24, r24
 534:	c1 f3       	breq	.-16     	; 0x526 <main+0x10>
  	 
	 LCD_Init();
 536:	0e 94 88 00 	call	0x110	; 0x110 <LCD_Init>

	UWriteData_string("\n\t Echo Test ");
 53a:	85 eb       	ldi	r24, 0xB5	; 181
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 9f 01 	call	0x33e	; 0x33e <UWriteData_string>
// 		LCD_showvalue(((float) setTemp));
// 	 }
// 	 
// 	 timer0_init();
// 	 timer1_init();
	 timer2_init();
 542:	0e 94 23 01 	call	0x246	; 0x246 <timer2_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 546:	2f ef       	ldi	r18, 0xFF	; 255
 548:	87 e8       	ldi	r24, 0x87	; 135
 54a:	93 e1       	ldi	r25, 0x13	; 19
 54c:	21 50       	subi	r18, 0x01	; 1
 54e:	80 40       	sbci	r24, 0x00	; 0
 550:	90 40       	sbci	r25, 0x00	; 0
 552:	e1 f7       	brne	.-8      	; 0x54c <main+0x36>
 554:	00 c0       	rjmp	.+0      	; 0x556 <main+0x40>
 556:	00 00       	nop
 558:	f6 cf       	rjmp	.-20     	; 0x546 <main+0x30>

0000055a <callback>:
		eeprom_write_word(EEPROM_CHECKSUM_ADD, EEPROM_CHECKSUM);
// 	}
}
void callback (void)
{
	if(UAvailableData() % 2)
 55a:	0e 94 28 02 	call	0x450	; 0x450 <UAvailableData>
 55e:	80 fd       	sbrc	r24, 0
	{
		UReadData();
 560:	0e 94 02 02 	call	0x404	; 0x404 <UReadData>
	}
	
	if(UAvailableData() >= 2)
 564:	0e 94 28 02 	call	0x450	; 0x450 <UAvailableData>
 568:	82 30       	cpi	r24, 0x02	; 2
 56a:	00 f1       	brcs	.+64     	; 0x5ac <callback+0x52>
	{
		high = UReadData();
 56c:	0e 94 02 02 	call	0x404	; 0x404 <UReadData>
 570:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <high>
		low = UReadData();
 574:	0e 94 02 02 	call	0x404	; 0x404 <UReadData>
 578:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <low>
		temp1 = ((high << 8) | low);
 57c:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <high>
 580:	30 e0       	ldi	r19, 0x00	; 0
 582:	32 2f       	mov	r19, r18
 584:	22 27       	eor	r18, r18
 586:	a9 01       	movw	r20, r18
 588:	48 2b       	or	r20, r24
 58a:	ca 01       	movw	r24, r20
 58c:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <temp1+0x1>
 590:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <temp1>
		
		LCD_Command(0x01);
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
		LCD_Command(0x80);
 59a:	80 e8       	ldi	r24, 0x80	; 128
 59c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
		LCD_showvalue(temp1);
 5a0:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <temp1>
 5a4:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <temp1+0x1>
 5a8:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_showvalue>
 5ac:	08 95       	ret

000005ae <__udivmodsi4>:
 5ae:	a1 e2       	ldi	r26, 0x21	; 33
 5b0:	1a 2e       	mov	r1, r26
 5b2:	aa 1b       	sub	r26, r26
 5b4:	bb 1b       	sub	r27, r27
 5b6:	fd 01       	movw	r30, r26
 5b8:	0d c0       	rjmp	.+26     	; 0x5d4 <__udivmodsi4_ep>

000005ba <__udivmodsi4_loop>:
 5ba:	aa 1f       	adc	r26, r26
 5bc:	bb 1f       	adc	r27, r27
 5be:	ee 1f       	adc	r30, r30
 5c0:	ff 1f       	adc	r31, r31
 5c2:	a2 17       	cp	r26, r18
 5c4:	b3 07       	cpc	r27, r19
 5c6:	e4 07       	cpc	r30, r20
 5c8:	f5 07       	cpc	r31, r21
 5ca:	20 f0       	brcs	.+8      	; 0x5d4 <__udivmodsi4_ep>
 5cc:	a2 1b       	sub	r26, r18
 5ce:	b3 0b       	sbc	r27, r19
 5d0:	e4 0b       	sbc	r30, r20
 5d2:	f5 0b       	sbc	r31, r21

000005d4 <__udivmodsi4_ep>:
 5d4:	66 1f       	adc	r22, r22
 5d6:	77 1f       	adc	r23, r23
 5d8:	88 1f       	adc	r24, r24
 5da:	99 1f       	adc	r25, r25
 5dc:	1a 94       	dec	r1
 5de:	69 f7       	brne	.-38     	; 0x5ba <__udivmodsi4_loop>
 5e0:	60 95       	com	r22
 5e2:	70 95       	com	r23
 5e4:	80 95       	com	r24
 5e6:	90 95       	com	r25
 5e8:	9b 01       	movw	r18, r22
 5ea:	ac 01       	movw	r20, r24
 5ec:	bd 01       	movw	r22, r26
 5ee:	cf 01       	movw	r24, r30
 5f0:	08 95       	ret

000005f2 <__umulhisi3>:
 5f2:	a2 9f       	mul	r26, r18
 5f4:	b0 01       	movw	r22, r0
 5f6:	b3 9f       	mul	r27, r19
 5f8:	c0 01       	movw	r24, r0
 5fa:	a3 9f       	mul	r26, r19
 5fc:	70 0d       	add	r23, r0
 5fe:	81 1d       	adc	r24, r1
 600:	11 24       	eor	r1, r1
 602:	91 1d       	adc	r25, r1
 604:	b2 9f       	mul	r27, r18
 606:	70 0d       	add	r23, r0
 608:	81 1d       	adc	r24, r1
 60a:	11 24       	eor	r1, r1
 60c:	91 1d       	adc	r25, r1
 60e:	08 95       	ret

00000610 <eeprom_write_word>:
 610:	0e 94 0d 03 	call	0x61a	; 0x61a <eeprom_write_byte>
 614:	27 2f       	mov	r18, r23
 616:	0c 94 0e 03 	jmp	0x61c	; 0x61c <eeprom_write_r18>

0000061a <eeprom_write_byte>:
 61a:	26 2f       	mov	r18, r22

0000061c <eeprom_write_r18>:
 61c:	e1 99       	sbic	0x1c, 1	; 28
 61e:	fe cf       	rjmp	.-4      	; 0x61c <eeprom_write_r18>
 620:	9f bb       	out	0x1f, r25	; 31
 622:	8e bb       	out	0x1e, r24	; 30
 624:	2d bb       	out	0x1d, r18	; 29
 626:	0f b6       	in	r0, 0x3f	; 63
 628:	f8 94       	cli
 62a:	e2 9a       	sbi	0x1c, 2	; 28
 62c:	e1 9a       	sbi	0x1c, 1	; 28
 62e:	0f be       	out	0x3f, r0	; 63
 630:	01 96       	adiw	r24, 0x01	; 1
 632:	08 95       	ret

00000634 <_exit>:
 634:	f8 94       	cli

00000636 <__stop_program>:
 636:	ff cf       	rjmp	.-2      	; 0x636 <__stop_program>
