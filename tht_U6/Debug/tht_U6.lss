
tht_U6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000254a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000072  00800060  0000254a  000025de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000080  008000d2  008000d2  00002650  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002650  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000026ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  000026e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002acd  00000000  00000000  000028f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b36  00000000  00000000  000053c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017e9  00000000  00000000  00005efb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b0  00000000  00000000  000076e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000070d  00000000  00000000  00007b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000179b  00000000  00000000  000082a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00009a3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 b9 01 	jmp	0x372	; 0x372 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e4       	ldi	r30, 0x4A	; 74
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 3d       	cpi	r26, 0xD2	; 210
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a2 ed       	ldi	r26, 0xD2	; 210
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 35       	cpi	r26, 0x52	; 82
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4f 0c 	call	0x189e	; 0x189e <main>
      8a:	0c 94 a3 12 	jmp	0x2546	; 0x2546 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Command>:
	LCD_Char('.'); // '.'

	LCD_Char((value / 10) % 10 + 48); //'8'

	LCD_Char((value) % 10 + 48); //'5'
}
      92:	85 bb       	out	0x15, r24	; 21
      94:	82 b3       	in	r24, 0x12	; 18
      96:	8f 7b       	andi	r24, 0xBF	; 191
      98:	82 bb       	out	0x12, r24	; 18
      9a:	82 b3       	in	r24, 0x12	; 18
      9c:	80 68       	ori	r24, 0x80	; 128
      9e:	82 bb       	out	0x12, r24	; 18
      a0:	85 e0       	ldi	r24, 0x05	; 5
      a2:	8a 95       	dec	r24
      a4:	f1 f7       	brne	.-4      	; 0xa2 <LCD_Command+0x10>
      a6:	00 00       	nop
      a8:	82 b3       	in	r24, 0x12	; 18
      aa:	8f 77       	andi	r24, 0x7F	; 127
      ac:	82 bb       	out	0x12, r24	; 18
      ae:	8f ed       	ldi	r24, 0xDF	; 223
      b0:	9e e2       	ldi	r25, 0x2E	; 46
      b2:	01 97       	sbiw	r24, 0x01	; 1
      b4:	f1 f7       	brne	.-4      	; 0xb2 <LCD_Command+0x20>
      b6:	00 c0       	rjmp	.+0      	; 0xb8 <LCD_Command+0x26>
      b8:	00 00       	nop
      ba:	08 95       	ret

000000bc <LCD_Char>:
      bc:	85 bb       	out	0x15, r24	; 21
      be:	82 b3       	in	r24, 0x12	; 18
      c0:	80 64       	ori	r24, 0x40	; 64
      c2:	82 bb       	out	0x12, r24	; 18
      c4:	82 b3       	in	r24, 0x12	; 18
      c6:	80 68       	ori	r24, 0x80	; 128
      c8:	82 bb       	out	0x12, r24	; 18
      ca:	85 e0       	ldi	r24, 0x05	; 5
      cc:	8a 95       	dec	r24
      ce:	f1 f7       	brne	.-4      	; 0xcc <LCD_Char+0x10>
      d0:	00 00       	nop
      d2:	82 b3       	in	r24, 0x12	; 18
      d4:	8f 77       	andi	r24, 0x7F	; 127
      d6:	82 bb       	out	0x12, r24	; 18
      d8:	8f e9       	ldi	r24, 0x9F	; 159
      da:	9f e0       	ldi	r25, 0x0F	; 15
      dc:	01 97       	sbiw	r24, 0x01	; 1
      de:	f1 f7       	brne	.-4      	; 0xdc <LCD_Char+0x20>
      e0:	00 c0       	rjmp	.+0      	; 0xe2 <LCD_Char+0x26>
      e2:	00 00       	nop
      e4:	08 95       	ret

000000e6 <LCD_write>:
      e6:	85 bb       	out	0x15, r24	; 21
      e8:	82 b3       	in	r24, 0x12	; 18
      ea:	80 64       	ori	r24, 0x40	; 64
      ec:	82 bb       	out	0x12, r24	; 18
      ee:	82 b3       	in	r24, 0x12	; 18
      f0:	80 68       	ori	r24, 0x80	; 128
      f2:	82 bb       	out	0x12, r24	; 18
      f4:	85 e0       	ldi	r24, 0x05	; 5
      f6:	8a 95       	dec	r24
      f8:	f1 f7       	brne	.-4      	; 0xf6 <LCD_write+0x10>
      fa:	00 00       	nop
      fc:	82 b3       	in	r24, 0x12	; 18
      fe:	8f 77       	andi	r24, 0x7F	; 127
     100:	82 bb       	out	0x12, r24	; 18
     102:	8f e9       	ldi	r24, 0x9F	; 159
     104:	9f e0       	ldi	r25, 0x0F	; 15
     106:	01 97       	sbiw	r24, 0x01	; 1
     108:	f1 f7       	brne	.-4      	; 0x106 <LCD_write+0x20>
     10a:	00 c0       	rjmp	.+0      	; 0x10c <LCD_write+0x26>
     10c:	00 00       	nop
     10e:	08 95       	ret

00000110 <LCD_Init>:
     110:	81 b3       	in	r24, 0x11	; 17
     112:	80 6c       	ori	r24, 0xC0	; 192
     114:	81 bb       	out	0x11, r24	; 17
     116:	8f ef       	ldi	r24, 0xFF	; 255
     118:	84 bb       	out	0x14, r24	; 20
     11a:	2f ef       	ldi	r18, 0xFF	; 255
     11c:	89 ef       	ldi	r24, 0xF9	; 249
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	21 50       	subi	r18, 0x01	; 1
     122:	80 40       	sbci	r24, 0x00	; 0
     124:	90 40       	sbci	r25, 0x00	; 0
     126:	e1 f7       	brne	.-8      	; 0x120 <LCD_Init+0x10>
     128:	00 c0       	rjmp	.+0      	; 0x12a <LCD_Init+0x1a>
     12a:	00 00       	nop
     12c:	88 e3       	ldi	r24, 0x38	; 56
     12e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     132:	25 e0       	ldi	r18, 0x05	; 5
     134:	2a 95       	dec	r18
     136:	f1 f7       	brne	.-4      	; 0x134 <LCD_Init+0x24>
     138:	00 00       	nop
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     140:	85 e0       	ldi	r24, 0x05	; 5
     142:	8a 95       	dec	r24
     144:	f1 f7       	brne	.-4      	; 0x142 <LCD_Init+0x32>
     146:	00 00       	nop
     148:	8e e0       	ldi	r24, 0x0E	; 14
     14a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     14e:	95 e0       	ldi	r25, 0x05	; 5
     150:	9a 95       	dec	r25
     152:	f1 f7       	brne	.-4      	; 0x150 <LCD_Init+0x40>
     154:	00 00       	nop
     156:	80 e8       	ldi	r24, 0x80	; 128
     158:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     15c:	87 ec       	ldi	r24, 0xC7	; 199
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	01 97       	sbiw	r24, 0x01	; 1
     162:	f1 f7       	brne	.-4      	; 0x160 <LCD_Init+0x50>
     164:	00 c0       	rjmp	.+0      	; 0x166 <LCD_Init+0x56>
     166:	00 00       	nop
     168:	08 95       	ret

0000016a <LCD_write_string>:
     16a:	0f 93       	push	r16
     16c:	1f 93       	push	r17
     16e:	cf 93       	push	r28
     170:	df 93       	push	r29
     172:	8c 01       	movw	r16, r24
     174:	c0 e0       	ldi	r28, 0x00	; 0
     176:	d0 e0       	ldi	r29, 0x00	; 0
     178:	03 c0       	rjmp	.+6      	; 0x180 <LCD_write_string+0x16>
     17a:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
     17e:	21 96       	adiw	r28, 0x01	; 1
     180:	f8 01       	movw	r30, r16
     182:	ec 0f       	add	r30, r28
     184:	fd 1f       	adc	r31, r29
     186:	80 81       	ld	r24, Z
     188:	81 11       	cpse	r24, r1
     18a:	f7 cf       	rjmp	.-18     	; 0x17a <LCD_write_string+0x10>
     18c:	df 91       	pop	r29
     18e:	cf 91       	pop	r28
     190:	1f 91       	pop	r17
     192:	0f 91       	pop	r16
     194:	08 95       	ret

00000196 <LCD_location>:
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	00 d0       	rcall	.+0      	; 0x19c <LCD_location+0x6>
     19c:	00 d0       	rcall	.+0      	; 0x19e <LCD_location+0x8>
     19e:	cd b7       	in	r28, 0x3d	; 61
     1a0:	de b7       	in	r29, 0x3e	; 62
     1a2:	90 e8       	ldi	r25, 0x80	; 128
     1a4:	99 83       	std	Y+1, r25	; 0x01
     1a6:	90 ec       	ldi	r25, 0xC0	; 192
     1a8:	9a 83       	std	Y+2, r25	; 0x02
     1aa:	94 e9       	ldi	r25, 0x94	; 148
     1ac:	9b 83       	std	Y+3, r25	; 0x03
     1ae:	94 ed       	ldi	r25, 0xD4	; 212
     1b0:	9c 83       	std	Y+4, r25	; 0x04
     1b2:	e8 2f       	mov	r30, r24
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	31 97       	sbiw	r30, 0x01	; 1
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	8c 0f       	add	r24, r28
     1be:	9d 1f       	adc	r25, r29
     1c0:	e8 0f       	add	r30, r24
     1c2:	f9 1f       	adc	r31, r25
     1c4:	80 81       	ld	r24, Z
     1c6:	86 0f       	add	r24, r22
     1c8:	81 50       	subi	r24, 0x01	; 1
     1ca:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     1ce:	8f e3       	ldi	r24, 0x3F	; 63
     1d0:	9c e9       	ldi	r25, 0x9C	; 156
     1d2:	01 97       	sbiw	r24, 0x01	; 1
     1d4:	f1 f7       	brne	.-4      	; 0x1d2 <LCD_location+0x3c>
     1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <LCD_location+0x42>
     1d8:	00 00       	nop
     1da:	0f 90       	pop	r0
     1dc:	0f 90       	pop	r0
     1de:	0f 90       	pop	r0
     1e0:	0f 90       	pop	r0
     1e2:	df 91       	pop	r29
     1e4:	cf 91       	pop	r28
     1e6:	08 95       	ret

000001e8 <LCD_Clear>:
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     1ee:	80 e8       	ldi	r24, 0x80	; 128
     1f0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     1f4:	08 95       	ret

000001f6 <LCD_showvalue>:

void LCD_showvalue(uint16_t data)
{
     1f6:	0f 93       	push	r16
     1f8:	1f 93       	push	r17
     1fa:	cf 93       	push	r28
     1fc:	df 93       	push	r29
     1fe:	8c 01       	movw	r16, r24
	LCD_write(((data / 100) % 10) + 0x30);
     200:	9c 01       	movw	r18, r24
     202:	36 95       	lsr	r19
     204:	27 95       	ror	r18
     206:	36 95       	lsr	r19
     208:	27 95       	ror	r18
     20a:	ab e7       	ldi	r26, 0x7B	; 123
     20c:	b4 e1       	ldi	r27, 0x14	; 20
     20e:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__umulhisi3>
     212:	ac 01       	movw	r20, r24
     214:	56 95       	lsr	r21
     216:	47 95       	ror	r20
     218:	9a 01       	movw	r18, r20
     21a:	ad ec       	ldi	r26, 0xCD	; 205
     21c:	bc ec       	ldi	r27, 0xCC	; 204
     21e:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__umulhisi3>
     222:	96 95       	lsr	r25
     224:	87 95       	ror	r24
     226:	96 95       	lsr	r25
     228:	87 95       	ror	r24
     22a:	96 95       	lsr	r25
     22c:	87 95       	ror	r24
     22e:	9c 01       	movw	r18, r24
     230:	22 0f       	add	r18, r18
     232:	33 1f       	adc	r19, r19
     234:	88 0f       	add	r24, r24
     236:	99 1f       	adc	r25, r25
     238:	88 0f       	add	r24, r24
     23a:	99 1f       	adc	r25, r25
     23c:	88 0f       	add	r24, r24
     23e:	99 1f       	adc	r25, r25
     240:	82 0f       	add	r24, r18
     242:	93 1f       	adc	r25, r19
     244:	9a 01       	movw	r18, r20
     246:	28 1b       	sub	r18, r24
     248:	39 0b       	sbc	r19, r25
     24a:	c9 01       	movw	r24, r18
     24c:	80 5d       	subi	r24, 0xD0	; 208
     24e:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
	LCD_write(((data / 10) % 10) + 0x30);
     252:	98 01       	movw	r18, r16
     254:	ad ec       	ldi	r26, 0xCD	; 205
     256:	bc ec       	ldi	r27, 0xCC	; 204
     258:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__umulhisi3>
     25c:	ec 01       	movw	r28, r24
     25e:	d6 95       	lsr	r29
     260:	c7 95       	ror	r28
     262:	d6 95       	lsr	r29
     264:	c7 95       	ror	r28
     266:	d6 95       	lsr	r29
     268:	c7 95       	ror	r28
     26a:	9e 01       	movw	r18, r28
     26c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__umulhisi3>
     270:	96 95       	lsr	r25
     272:	87 95       	ror	r24
     274:	96 95       	lsr	r25
     276:	87 95       	ror	r24
     278:	96 95       	lsr	r25
     27a:	87 95       	ror	r24
     27c:	9c 01       	movw	r18, r24
     27e:	22 0f       	add	r18, r18
     280:	33 1f       	adc	r19, r19
     282:	88 0f       	add	r24, r24
     284:	99 1f       	adc	r25, r25
     286:	88 0f       	add	r24, r24
     288:	99 1f       	adc	r25, r25
     28a:	88 0f       	add	r24, r24
     28c:	99 1f       	adc	r25, r25
     28e:	82 0f       	add	r24, r18
     290:	93 1f       	adc	r25, r19
     292:	9e 01       	movw	r18, r28
     294:	28 1b       	sub	r18, r24
     296:	39 0b       	sbc	r19, r25
     298:	c9 01       	movw	r24, r18
     29a:	80 5d       	subi	r24, 0xD0	; 208
     29c:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
	LCD_Char('.');
     2a0:	8e e2       	ldi	r24, 0x2E	; 46
     2a2:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_Char>
	LCD_write(((data / 1) % 10) + 0x30);
     2a6:	ce 01       	movw	r24, r28
     2a8:	88 0f       	add	r24, r24
     2aa:	99 1f       	adc	r25, r25
     2ac:	cc 0f       	add	r28, r28
     2ae:	dd 1f       	adc	r29, r29
     2b0:	cc 0f       	add	r28, r28
     2b2:	dd 1f       	adc	r29, r29
     2b4:	cc 0f       	add	r28, r28
     2b6:	dd 1f       	adc	r29, r29
     2b8:	c8 0f       	add	r28, r24
     2ba:	d9 1f       	adc	r29, r25
     2bc:	c8 01       	movw	r24, r16
     2be:	8c 1b       	sub	r24, r28
     2c0:	9d 0b       	sbc	r25, r29
     2c2:	80 5d       	subi	r24, 0xD0	; 208
     2c4:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	1f 91       	pop	r17
     2ce:	0f 91       	pop	r16
     2d0:	08 95       	ret

000002d2 <timer0_init>:
{
	/* Clear OC0 on compare match, set OC0 at BOTTOM, (non-inverting mode) */
	TCCR0 &= (~((1<<COM1A0) | (1<<COM1A1)));
	
	/* make pwm as input */
	DDRD &= (~(1<<5));
     2d2:	87 b3       	in	r24, 0x17	; 23
     2d4:	88 60       	ori	r24, 0x08	; 8
     2d6:	87 bb       	out	0x17, r24	; 23
     2d8:	83 b7       	in	r24, 0x33	; 51
     2da:	8b 64       	ori	r24, 0x4B	; 75
     2dc:	83 bf       	out	0x33, r24	; 51
     2de:	12 be       	out	0x32, r1	; 50
     2e0:	78 94       	sei
     2e2:	08 95       	ret

000002e4 <timer0_start>:
     2e4:	83 b7       	in	r24, 0x33	; 51
     2e6:	80 62       	ori	r24, 0x20	; 32
     2e8:	83 bf       	out	0x33, r24	; 51
     2ea:	12 be       	out	0x32, r1	; 50
     2ec:	08 95       	ret

000002ee <timer0_stop>:
     2ee:	83 b7       	in	r24, 0x33	; 51
     2f0:	8f 7c       	andi	r24, 0xCF	; 207
     2f2:	83 bf       	out	0x33, r24	; 51
     2f4:	88 b3       	in	r24, 0x18	; 24
     2f6:	87 7f       	andi	r24, 0xF7	; 247
     2f8:	88 bb       	out	0x18, r24	; 24
     2fa:	08 95       	ret

000002fc <timer1_init>:
     2fc:	81 b3       	in	r24, 0x11	; 17
     2fe:	80 62       	ori	r24, 0x20	; 32
     300:	81 bb       	out	0x11, r24	; 17
     302:	8f ef       	ldi	r24, 0xFF	; 255
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	97 bd       	out	0x27, r25	; 39
     308:	86 bd       	out	0x26, r24	; 38
     30a:	8f b5       	in	r24, 0x2f	; 47
     30c:	8e 73       	andi	r24, 0x3E	; 62
     30e:	8f bd       	out	0x2f, r24	; 47
     310:	8e b5       	in	r24, 0x2e	; 46
     312:	8b 7f       	andi	r24, 0xFB	; 251
     314:	8e bd       	out	0x2e, r24	; 46
     316:	8f b5       	in	r24, 0x2f	; 47
     318:	82 60       	ori	r24, 0x02	; 2
     31a:	8f bd       	out	0x2f, r24	; 47
     31c:	8e b5       	in	r24, 0x2e	; 46
     31e:	8b 61       	ori	r24, 0x1B	; 27
     320:	8e bd       	out	0x2e, r24	; 46
     322:	1b bc       	out	0x2b, r1	; 43
     324:	1a bc       	out	0x2a, r1	; 42
     326:	1d bc       	out	0x2d, r1	; 45
     328:	1c bc       	out	0x2c, r1	; 44
     32a:	78 94       	sei
     32c:	08 95       	ret

0000032e <timer1_start>:
     32e:	8f b5       	in	r24, 0x2f	; 47
     330:	80 68       	ori	r24, 0x80	; 128
     332:	8f bd       	out	0x2f, r24	; 47
     334:	1d bc       	out	0x2d, r1	; 45
     336:	1c bc       	out	0x2c, r1	; 44
     338:	08 95       	ret

0000033a <timer1_stop>:
     33a:	8f b5       	in	r24, 0x2f	; 47
     33c:	8f 73       	andi	r24, 0x3F	; 63
     33e:	8f bd       	out	0x2f, r24	; 47
     340:	82 b3       	in	r24, 0x12	; 18
     342:	8f 7d       	andi	r24, 0xDF	; 223
     344:	82 bb       	out	0x12, r24	; 18
     346:	08 95       	ret

00000348 <timer2_init>:
     348:	85 b5       	in	r24, 0x25	; 37
     34a:	8d 60       	ori	r24, 0x0D	; 13
     34c:	85 bd       	out	0x25, r24	; 37
     34e:	8c e7       	ldi	r24, 0x7C	; 124
     350:	83 bd       	out	0x23, r24	; 35
     352:	8f ef       	ldi	r24, 0xFF	; 255
     354:	83 bd       	out	0x23, r24	; 35
     356:	89 b7       	in	r24, 0x39	; 57
     358:	80 68       	ori	r24, 0x80	; 128
     35a:	89 bf       	out	0x39, r24	; 57
     35c:	14 bc       	out	0x24, r1	; 36
     35e:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <fcnt_millis>
     362:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <fcnt_millis+0x1>
     366:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <fcnt_millis+0x2>
     36a:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <fcnt_millis+0x3>
     36e:	78 94       	sei
     370:	08 95       	ret

00000372 <__vector_3>:
}

ISR(TIMER2_COMP_vect)
{
     372:	1f 92       	push	r1
     374:	0f 92       	push	r0
     376:	0f b6       	in	r0, 0x3f	; 63
     378:	0f 92       	push	r0
     37a:	11 24       	eor	r1, r1
     37c:	2f 93       	push	r18
     37e:	3f 93       	push	r19
     380:	4f 93       	push	r20
     382:	5f 93       	push	r21
     384:	6f 93       	push	r22
     386:	7f 93       	push	r23
     388:	8f 93       	push	r24
     38a:	9f 93       	push	r25
     38c:	af 93       	push	r26
     38e:	bf 93       	push	r27
     390:	ef 93       	push	r30
     392:	ff 93       	push	r31
	fcnt_millis++;
     394:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <fcnt_millis>
     398:	90 91 e6 00 	lds	r25, 0x00E6	; 0x8000e6 <fcnt_millis+0x1>
     39c:	a0 91 e7 00 	lds	r26, 0x00E7	; 0x8000e7 <fcnt_millis+0x2>
     3a0:	b0 91 e8 00 	lds	r27, 0x00E8	; 0x8000e8 <fcnt_millis+0x3>
     3a4:	01 96       	adiw	r24, 0x01	; 1
     3a6:	a1 1d       	adc	r26, r1
     3a8:	b1 1d       	adc	r27, r1
     3aa:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <fcnt_millis>
     3ae:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <fcnt_millis+0x1>
     3b2:	a0 93 e7 00 	sts	0x00E7, r26	; 0x8000e7 <fcnt_millis+0x2>
     3b6:	b0 93 e8 00 	sts	0x00E8, r27	; 0x8000e8 <fcnt_millis+0x3>
	callback();
     3ba:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <callback>
}
     3be:	ff 91       	pop	r31
     3c0:	ef 91       	pop	r30
     3c2:	bf 91       	pop	r27
     3c4:	af 91       	pop	r26
     3c6:	9f 91       	pop	r25
     3c8:	8f 91       	pop	r24
     3ca:	7f 91       	pop	r23
     3cc:	6f 91       	pop	r22
     3ce:	5f 91       	pop	r21
     3d0:	4f 91       	pop	r20
     3d2:	3f 91       	pop	r19
     3d4:	2f 91       	pop	r18
     3d6:	0f 90       	pop	r0
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	0f 90       	pop	r0
     3dc:	1f 90       	pop	r1
     3de:	18 95       	reti

000003e0 <milli>:
long milli(void)
{
	return fcnt_millis;
     3e0:	60 91 e5 00 	lds	r22, 0x00E5	; 0x8000e5 <fcnt_millis>
     3e4:	70 91 e6 00 	lds	r23, 0x00E6	; 0x8000e6 <fcnt_millis+0x1>
     3e8:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <fcnt_millis+0x2>
     3ec:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <fcnt_millis+0x3>
	
}
     3f0:	08 95       	ret

000003f2 <USART_init>:
	{
		UWriteData(str[i]);
		i++;
	}
	
}
     3f2:	2f ef       	ldi	r18, 0xFF	; 255
     3f4:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <UQEnd>
     3f8:	20 93 eb 00 	sts	0x00EB, r18	; 0x8000eb <UQFront>
     3fc:	dc 01       	movw	r26, r24
     3fe:	cb 01       	movw	r24, r22
     400:	88 0f       	add	r24, r24
     402:	99 1f       	adc	r25, r25
     404:	aa 1f       	adc	r26, r26
     406:	bb 1f       	adc	r27, r27
     408:	88 0f       	add	r24, r24
     40a:	99 1f       	adc	r25, r25
     40c:	aa 1f       	adc	r26, r26
     40e:	bb 1f       	adc	r27, r27
     410:	9c 01       	movw	r18, r24
     412:	ad 01       	movw	r20, r26
     414:	22 0f       	add	r18, r18
     416:	33 1f       	adc	r19, r19
     418:	44 1f       	adc	r20, r20
     41a:	55 1f       	adc	r21, r21
     41c:	60 e0       	ldi	r22, 0x00	; 0
     41e:	74 e2       	ldi	r23, 0x24	; 36
     420:	84 ef       	ldi	r24, 0xF4	; 244
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__udivmodsi4>
     428:	21 50       	subi	r18, 0x01	; 1
     42a:	31 09       	sbc	r19, r1
     42c:	71 f0       	breq	.+28     	; 0x44a <__DATA_REGION_LENGTH__+0x4a>
     42e:	8a b1       	in	r24, 0x0a	; 10
     430:	88 69       	ori	r24, 0x98	; 152
     432:	8a b9       	out	0x0a, r24	; 10
     434:	80 b5       	in	r24, 0x20	; 32
     436:	86 68       	ori	r24, 0x86	; 134
     438:	80 bd       	out	0x20, r24	; 32
     43a:	8b b1       	in	r24, 0x0b	; 11
     43c:	82 60       	ori	r24, 0x02	; 2
     43e:	8b b9       	out	0x0b, r24	; 11
     440:	29 b9       	out	0x09, r18	; 9
     442:	30 bd       	out	0x20, r19	; 32
     444:	78 94       	sei
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	08 95       	ret
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	08 95       	ret

0000044e <__vector_11>:

ISR(USART_RXC_vect)
{
     44e:	1f 92       	push	r1
     450:	0f 92       	push	r0
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	0f 92       	push	r0
     456:	11 24       	eor	r1, r1
     458:	2f 93       	push	r18
     45a:	3f 93       	push	r19
     45c:	4f 93       	push	r20
     45e:	8f 93       	push	r24
     460:	9f 93       	push	r25
     462:	ef 93       	push	r30
     464:	ff 93       	push	r31
	char data = UDR;
     466:	4c b1       	in	r20, 0x0c	; 12
	
	if(((UQEnd == (RECEIVE_BUFFER_SIZE - 1)) && (UQFront == 0)) || ((UQEnd+1)==UQFront))
     468:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <UQEnd>
     46c:	89 35       	cpi	r24, 0x59	; 89
     46e:	21 f4       	brne	.+8      	; 0x478 <__stack+0x19>
     470:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <UQFront>
     474:	88 23       	and	r24, r24
     476:	71 f0       	breq	.+28     	; 0x494 <__stack+0x35>
     478:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <UQEnd>
     47c:	08 2e       	mov	r0, r24
     47e:	00 0c       	add	r0, r0
     480:	99 0b       	sbc	r25, r25
     482:	01 96       	adiw	r24, 0x01	; 1
     484:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <UQFront>
     488:	02 2e       	mov	r0, r18
     48a:	00 0c       	add	r0, r0
     48c:	33 0b       	sbc	r19, r19
     48e:	82 17       	cp	r24, r18
     490:	93 07       	cpc	r25, r19
     492:	59 f4       	brne	.+22     	; 0x4aa <__stack+0x4b>
	{
		UQFront++;
     494:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <UQFront>
     498:	8f 5f       	subi	r24, 0xFF	; 255
     49a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <UQFront>
		
		if(UQFront==RECEIVE_BUFFER_SIZE) UQFront = 0;
     49e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <UQFront>
     4a2:	8a 35       	cpi	r24, 0x5A	; 90
     4a4:	11 f4       	brne	.+4      	; 0x4aa <__stack+0x4b>
     4a6:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <UQFront>
	}
	
	if(UQEnd==(RECEIVE_BUFFER_SIZE-1)) UQEnd = 0;
     4aa:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <UQEnd>
     4ae:	89 35       	cpi	r24, 0x59	; 89
     4b0:	19 f4       	brne	.+6      	; 0x4b8 <__stack+0x59>
     4b2:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <UQEnd>
     4b6:	05 c0       	rjmp	.+10     	; 0x4c2 <__stack+0x63>
	
	else
	UQEnd++;
     4b8:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <UQEnd>
     4bc:	8f 5f       	subi	r24, 0xFF	; 255
     4be:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <UQEnd>
	
	URbuff[UQEnd] = data;
     4c2:	e0 91 ec 00 	lds	r30, 0x00EC	; 0x8000ec <UQEnd>
     4c6:	0e 2e       	mov	r0, r30
     4c8:	00 0c       	add	r0, r0
     4ca:	ff 0b       	sbc	r31, r31
     4cc:	e3 51       	subi	r30, 0x13	; 19
     4ce:	ff 4f       	sbci	r31, 0xFF	; 255
     4d0:	40 83       	st	Z, r20
	
	if(UQFront == -1) UQFront = 0;
     4d2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <UQFront>
     4d6:	8f 3f       	cpi	r24, 0xFF	; 255
     4d8:	11 f4       	brne	.+4      	; 0x4de <__stack+0x7f>
     4da:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <UQFront>
	
}
     4de:	ff 91       	pop	r31
     4e0:	ef 91       	pop	r30
     4e2:	9f 91       	pop	r25
     4e4:	8f 91       	pop	r24
     4e6:	4f 91       	pop	r20
     4e8:	3f 91       	pop	r19
     4ea:	2f 91       	pop	r18
     4ec:	0f 90       	pop	r0
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	0f 90       	pop	r0
     4f2:	1f 90       	pop	r1
     4f4:	18 95       	reti

000004f6 <UReadData>:

char UReadData(void)
{
	char data;
	
	if(UQFront == -1)
     4f6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <UQFront>
     4fa:	8f 3f       	cpi	r24, 0xFF	; 255
     4fc:	11 f4       	brne	.+4      	; 0x502 <UReadData+0xc>
	UQFront = 0;
     4fe:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <UQFront>
	
	data = URbuff[UQFront];
     502:	e0 91 eb 00 	lds	r30, 0x00EB	; 0x8000eb <UQFront>
     506:	0e 2e       	mov	r0, r30
     508:	00 0c       	add	r0, r0
     50a:	ff 0b       	sbc	r31, r31
     50c:	e3 51       	subi	r30, 0x13	; 19
     50e:	ff 4f       	sbci	r31, 0xFF	; 255
     510:	80 81       	ld	r24, Z
	
	if(UQFront == UQEnd)
     512:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <UQFront>
     516:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <UQEnd>
     51a:	29 13       	cpse	r18, r25
     51c:	06 c0       	rjmp	.+12     	; 0x52a <UReadData+0x34>
	UQFront = UQEnd = -1;
     51e:	9f ef       	ldi	r25, 0xFF	; 255
     520:	90 93 ec 00 	sts	0x00EC, r25	; 0x8000ec <UQEnd>
     524:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <UQFront>
     528:	08 95       	ret
	
	else
	{
		UQFront++;
     52a:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <UQFront>
     52e:	9f 5f       	subi	r25, 0xFF	; 255
     530:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <UQFront>
		
		if(UQFront == RECEIVE_BUFFER_SIZE)
     534:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <UQFront>
     538:	9a 35       	cpi	r25, 0x5A	; 90
     53a:	11 f4       	brne	.+4      	; 0x540 <UReadData+0x4a>
		UQFront = 0;
     53c:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <UQFront>
	}
	return data;	
}
     540:	08 95       	ret

00000542 <UAvailableData>:

uint8_t UAvailableData(void)
{
	if(UQFront == -1) return 0;
     542:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <UQFront>
     546:	8f 3f       	cpi	r24, 0xFF	; 255
     548:	d1 f0       	breq	.+52     	; 0x57e <UAvailableData+0x3c>
	if(UQFront < UQEnd) return (UQEnd - UQFront + 1);
     54a:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <UQFront>
     54e:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <UQEnd>
     552:	98 17       	cp	r25, r24
     554:	3c f4       	brge	.+14     	; 0x564 <UAvailableData+0x22>
     556:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <UQEnd>
     55a:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <UQFront>
     55e:	89 1b       	sub	r24, r25
     560:	8f 5f       	subi	r24, 0xFF	; 255
     562:	08 95       	ret
	else if (UQFront > UQEnd) return (RECEIVE_BUFFER_SIZE - UQFront + UQEnd + 1);
     564:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <UQFront>
     568:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <UQEnd>
     56c:	89 17       	cp	r24, r25
     56e:	4c f4       	brge	.+18     	; 0x582 <UAvailableData+0x40>
     570:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <UQEnd>
     574:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <UQFront>
     578:	89 1b       	sub	r24, r25
     57a:	85 5a       	subi	r24, 0xA5	; 165
     57c:	08 95       	ret
	return data;	
}

uint8_t UAvailableData(void)
{
	if(UQFront == -1) return 0;
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	08 95       	ret
	if(UQFront < UQEnd) return (UQEnd - UQFront + 1);
	else if (UQFront > UQEnd) return (RECEIVE_BUFFER_SIZE - UQFront + UQEnd + 1);
	else return 1;
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	08 95       	ret

00000586 <displayDebugInfo>:
		pid_Controller((float) (setTemp/10), (float) (currTemp/10), (float) (setKp/10), (float) (setKi/10), (float) (setKd/10));
	}

} 
void displayDebugInfo(float data)
{
     586:	0f 93       	push	r16
     588:	1f 93       	push	r17
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	cd b7       	in	r28, 0x3d	; 61
     590:	de b7       	in	r29, 0x3e	; 62
     592:	2a 97       	sbiw	r28, 0x0a	; 10
     594:	0f b6       	in	r0, 0x3f	; 63
     596:	f8 94       	cli
     598:	de bf       	out	0x3e, r29	; 62
     59a:	0f be       	out	0x3f, r0	; 63
     59c:	cd bf       	out	0x3d, r28	; 61
	LCD_location(1,1);
     59e:	61 e0       	ldi	r22, 0x01	; 1
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
	
	if((operationStatus == 1) || (operationStatus == 3))
     5a6:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <operationStatus>
     5aa:	81 30       	cpi	r24, 0x01	; 1
     5ac:	11 f0       	breq	.+4      	; 0x5b2 <displayDebugInfo+0x2c>
     5ae:	83 30       	cpi	r24, 0x03	; 3
     5b0:	91 f5       	brne	.+100    	; 0x616 <displayDebugInfo+0x90>
	{
		LCD_write((OCR0 / 100) % 10 + 0x30);
     5b2:	8c b7       	in	r24, 0x3c	; 60
     5b4:	99 e2       	ldi	r25, 0x29	; 41
     5b6:	89 9f       	mul	r24, r25
     5b8:	81 2d       	mov	r24, r1
     5ba:	11 24       	eor	r1, r1
     5bc:	1d ec       	ldi	r17, 0xCD	; 205
     5be:	82 95       	swap	r24
     5c0:	8f 70       	andi	r24, 0x0F	; 15
     5c2:	80 5d       	subi	r24, 0xD0	; 208
     5c4:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
		LCD_write((OCR0 / 10) % 10 + 0x30);
     5c8:	8c b7       	in	r24, 0x3c	; 60
     5ca:	81 9f       	mul	r24, r17
     5cc:	81 2d       	mov	r24, r1
     5ce:	11 24       	eor	r1, r1
     5d0:	86 95       	lsr	r24
     5d2:	86 95       	lsr	r24
     5d4:	86 95       	lsr	r24
     5d6:	81 9f       	mul	r24, r17
     5d8:	91 2d       	mov	r25, r1
     5da:	11 24       	eor	r1, r1
     5dc:	96 95       	lsr	r25
     5de:	96 95       	lsr	r25
     5e0:	96 95       	lsr	r25
     5e2:	99 0f       	add	r25, r25
     5e4:	29 2f       	mov	r18, r25
     5e6:	22 0f       	add	r18, r18
     5e8:	22 0f       	add	r18, r18
     5ea:	92 0f       	add	r25, r18
     5ec:	89 1b       	sub	r24, r25
     5ee:	80 5d       	subi	r24, 0xD0	; 208
     5f0:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
		LCD_write((OCR0 / 1) % 10 + 0x30);
     5f4:	8c b7       	in	r24, 0x3c	; 60
     5f6:	81 9f       	mul	r24, r17
     5f8:	11 2d       	mov	r17, r1
     5fa:	11 24       	eor	r1, r1
     5fc:	16 95       	lsr	r17
     5fe:	16 95       	lsr	r17
     600:	16 95       	lsr	r17
     602:	11 0f       	add	r17, r17
     604:	91 2f       	mov	r25, r17
     606:	99 0f       	add	r25, r25
     608:	99 0f       	add	r25, r25
     60a:	19 0f       	add	r17, r25
     60c:	81 1b       	sub	r24, r17
     60e:	80 5d       	subi	r24, 0xD0	; 208
     610:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
     614:	71 c0       	rjmp	.+226    	; 0x6f8 <displayDebugInfo+0x172>
	}
	else
	{
		LCD_write((OCR1A / 100) % 10 + 0x30);
     616:	2a b5       	in	r18, 0x2a	; 42
     618:	3b b5       	in	r19, 0x2b	; 43
     61a:	36 95       	lsr	r19
     61c:	27 95       	ror	r18
     61e:	36 95       	lsr	r19
     620:	27 95       	ror	r18
     622:	ab e7       	ldi	r26, 0x7B	; 123
     624:	b4 e1       	ldi	r27, 0x14	; 20
     626:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__umulhisi3>
     62a:	ac 01       	movw	r20, r24
     62c:	56 95       	lsr	r21
     62e:	47 95       	ror	r20
     630:	9a 01       	movw	r18, r20
     632:	ad ec       	ldi	r26, 0xCD	; 205
     634:	bc ec       	ldi	r27, 0xCC	; 204
     636:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__umulhisi3>
     63a:	96 95       	lsr	r25
     63c:	87 95       	ror	r24
     63e:	96 95       	lsr	r25
     640:	87 95       	ror	r24
     642:	96 95       	lsr	r25
     644:	87 95       	ror	r24
     646:	9c 01       	movw	r18, r24
     648:	22 0f       	add	r18, r18
     64a:	33 1f       	adc	r19, r19
     64c:	88 0f       	add	r24, r24
     64e:	99 1f       	adc	r25, r25
     650:	88 0f       	add	r24, r24
     652:	99 1f       	adc	r25, r25
     654:	88 0f       	add	r24, r24
     656:	99 1f       	adc	r25, r25
     658:	82 0f       	add	r24, r18
     65a:	93 1f       	adc	r25, r19
     65c:	9a 01       	movw	r18, r20
     65e:	28 1b       	sub	r18, r24
     660:	39 0b       	sbc	r19, r25
     662:	c9 01       	movw	r24, r18
     664:	80 5d       	subi	r24, 0xD0	; 208
     666:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
		LCD_write((OCR1A / 10) % 10 + 0x30);
     66a:	2a b5       	in	r18, 0x2a	; 42
     66c:	3b b5       	in	r19, 0x2b	; 43
     66e:	ad ec       	ldi	r26, 0xCD	; 205
     670:	bc ec       	ldi	r27, 0xCC	; 204
     672:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__umulhisi3>
     676:	ac 01       	movw	r20, r24
     678:	56 95       	lsr	r21
     67a:	47 95       	ror	r20
     67c:	56 95       	lsr	r21
     67e:	47 95       	ror	r20
     680:	56 95       	lsr	r21
     682:	47 95       	ror	r20
     684:	9a 01       	movw	r18, r20
     686:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__umulhisi3>
     68a:	96 95       	lsr	r25
     68c:	87 95       	ror	r24
     68e:	96 95       	lsr	r25
     690:	87 95       	ror	r24
     692:	96 95       	lsr	r25
     694:	87 95       	ror	r24
     696:	9c 01       	movw	r18, r24
     698:	22 0f       	add	r18, r18
     69a:	33 1f       	adc	r19, r19
     69c:	88 0f       	add	r24, r24
     69e:	99 1f       	adc	r25, r25
     6a0:	88 0f       	add	r24, r24
     6a2:	99 1f       	adc	r25, r25
     6a4:	88 0f       	add	r24, r24
     6a6:	99 1f       	adc	r25, r25
     6a8:	82 0f       	add	r24, r18
     6aa:	93 1f       	adc	r25, r19
     6ac:	9a 01       	movw	r18, r20
     6ae:	28 1b       	sub	r18, r24
     6b0:	39 0b       	sbc	r19, r25
     6b2:	c9 01       	movw	r24, r18
     6b4:	80 5d       	subi	r24, 0xD0	; 208
     6b6:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
		LCD_write((OCR1A / 1) % 10 + 0x30);
     6ba:	4a b5       	in	r20, 0x2a	; 42
     6bc:	5b b5       	in	r21, 0x2b	; 43
     6be:	9a 01       	movw	r18, r20
     6c0:	ad ec       	ldi	r26, 0xCD	; 205
     6c2:	bc ec       	ldi	r27, 0xCC	; 204
     6c4:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__umulhisi3>
     6c8:	96 95       	lsr	r25
     6ca:	87 95       	ror	r24
     6cc:	96 95       	lsr	r25
     6ce:	87 95       	ror	r24
     6d0:	96 95       	lsr	r25
     6d2:	87 95       	ror	r24
     6d4:	9c 01       	movw	r18, r24
     6d6:	22 0f       	add	r18, r18
     6d8:	33 1f       	adc	r19, r19
     6da:	88 0f       	add	r24, r24
     6dc:	99 1f       	adc	r25, r25
     6de:	88 0f       	add	r24, r24
     6e0:	99 1f       	adc	r25, r25
     6e2:	88 0f       	add	r24, r24
     6e4:	99 1f       	adc	r25, r25
     6e6:	82 0f       	add	r24, r18
     6e8:	93 1f       	adc	r25, r19
     6ea:	9a 01       	movw	r18, r20
     6ec:	28 1b       	sub	r18, r24
     6ee:	39 0b       	sbc	r19, r25
     6f0:	c9 01       	movw	r24, r18
     6f2:	80 5d       	subi	r24, 0xD0	; 208
     6f4:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
	}
	
	LCD_write(',');
     6f8:	8c e2       	ldi	r24, 0x2C	; 44
     6fa:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
	LCD_location(1,6);
     6fe:	66 e0       	ldi	r22, 0x06	; 6
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
	LCD_write('>');
     706:	8e e3       	ldi	r24, 0x3E	; 62
     708:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
	
	if(operationStatus == 1)
     70c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <operationStatus>
     710:	81 30       	cpi	r24, 0x01	; 1
     712:	39 f4       	brne	.+14     	; 0x722 <displayDebugInfo+0x19c>
	{
		LCD_write('F');
     714:	86 e4       	ldi	r24, 0x46	; 70
     716:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
		LCD_write('C');
     71a:	83 e4       	ldi	r24, 0x43	; 67
     71c:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
     720:	23 c0       	rjmp	.+70     	; 0x768 <displayDebugInfo+0x1e2>
	}
	
	else if(operationStatus == 2)
     722:	82 30       	cpi	r24, 0x02	; 2
     724:	39 f4       	brne	.+14     	; 0x734 <displayDebugInfo+0x1ae>
	{
		LCD_write('F');
     726:	86 e4       	ldi	r24, 0x46	; 70
     728:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
		LCD_write('H');
     72c:	88 e4       	ldi	r24, 0x48	; 72
     72e:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
     732:	1a c0       	rjmp	.+52     	; 0x768 <displayDebugInfo+0x1e2>
	}
	
	else if(operationStatus == 3)
     734:	83 30       	cpi	r24, 0x03	; 3
     736:	39 f4       	brne	.+14     	; 0x746 <displayDebugInfo+0x1c0>
	{
		LCD_write('P');
     738:	80 e5       	ldi	r24, 0x50	; 80
     73a:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
		LCD_write('C');
     73e:	83 e4       	ldi	r24, 0x43	; 67
     740:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
     744:	11 c0       	rjmp	.+34     	; 0x768 <displayDebugInfo+0x1e2>
	}
	
	else if(operationStatus == 4)
     746:	84 30       	cpi	r24, 0x04	; 4
     748:	39 f4       	brne	.+14     	; 0x758 <displayDebugInfo+0x1d2>
	{
		LCD_write('P');
     74a:	80 e5       	ldi	r24, 0x50	; 80
     74c:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
		LCD_write('H');
     750:	88 e4       	ldi	r24, 0x48	; 72
     752:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
     756:	08 c0       	rjmp	.+16     	; 0x768 <displayDebugInfo+0x1e2>
	}
	
	else if(operationStatus == 5)
     758:	85 30       	cpi	r24, 0x05	; 5
     75a:	31 f4       	brne	.+12     	; 0x768 <displayDebugInfo+0x1e2>
	{
		LCD_write(' ');
     75c:	80 e2       	ldi	r24, 0x20	; 32
     75e:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
		LCD_write('S');
     762:	83 e5       	ldi	r24, 0x53	; 83
     764:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
	}
	
	LCD_location(2,1);
     768:	61 e0       	ldi	r22, 0x01	; 1
     76a:	82 e0       	ldi	r24, 0x02	; 2
     76c:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
	char tempError[10];
	sprintf(tempError, "%3.4f", (double) sumError);
     770:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <sumError+0x3>
     774:	8f 93       	push	r24
     776:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <sumError+0x2>
     77a:	8f 93       	push	r24
     77c:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <sumError+0x1>
     780:	8f 93       	push	r24
     782:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <sumError>
     786:	8f 93       	push	r24
     788:	86 e6       	ldi	r24, 0x66	; 102
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	9f 93       	push	r25
     78e:	8f 93       	push	r24
     790:	8e 01       	movw	r16, r28
     792:	0f 5f       	subi	r16, 0xFF	; 255
     794:	1f 4f       	sbci	r17, 0xFF	; 255
     796:	1f 93       	push	r17
     798:	0f 93       	push	r16
     79a:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <sprintf>
	LCD_write_string(tempError);
     79e:	c8 01       	movw	r24, r16
     7a0:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>

}
     7a4:	0f b6       	in	r0, 0x3f	; 63
     7a6:	f8 94       	cli
     7a8:	de bf       	out	0x3e, r29	; 62
     7aa:	0f be       	out	0x3f, r0	; 63
     7ac:	cd bf       	out	0x3d, r28	; 61
     7ae:	2a 96       	adiw	r28, 0x0a	; 10
     7b0:	0f b6       	in	r0, 0x3f	; 63
     7b2:	f8 94       	cli
     7b4:	de bf       	out	0x3e, r29	; 62
     7b6:	0f be       	out	0x3f, r0	; 63
     7b8:	cd bf       	out	0x3d, r28	; 61
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	1f 91       	pop	r17
     7c0:	0f 91       	pop	r16
     7c2:	08 95       	ret

000007c4 <pid_Controller>:
float pid_Controller(float setPoint, float currentPoint, float Kp, float Ki, float Kd)
{
     7c4:	4f 92       	push	r4
     7c6:	5f 92       	push	r5
     7c8:	6f 92       	push	r6
     7ca:	7f 92       	push	r7
     7cc:	8f 92       	push	r8
     7ce:	9f 92       	push	r9
     7d0:	af 92       	push	r10
     7d2:	bf 92       	push	r11
     7d4:	cf 92       	push	r12
     7d6:	df 92       	push	r13
     7d8:	ef 92       	push	r14
     7da:	ff 92       	push	r15
     7dc:	0f 93       	push	r16
     7de:	1f 93       	push	r17
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
     7e8:	60 97       	sbiw	r28, 0x10	; 16
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	f8 94       	cli
     7ee:	de bf       	out	0x3e, r29	; 62
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	6d 83       	std	Y+5, r22	; 0x05
     7f6:	7e 83       	std	Y+6, r23	; 0x06
     7f8:	8f 83       	std	Y+7, r24	; 0x07
     7fa:	98 87       	std	Y+8, r25	; 0x08
     7fc:	29 01       	movw	r4, r18
     7fe:	3a 01       	movw	r6, r20
     800:	e9 82       	std	Y+1, r14	; 0x01
     802:	fa 82       	std	Y+2, r15	; 0x02
     804:	0b 83       	std	Y+3, r16	; 0x03
     806:	1c 83       	std	Y+4, r17	; 0x04
     808:	c6 01       	movw	r24, r12
     80a:	b5 01       	movw	r22, r10
	float error = 0;

	Ki = Ki * (PID_UPDATE_TIME/1000);
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	a9 01       	movw	r20, r18
     812:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
     816:	69 87       	std	Y+9, r22	; 0x09
     818:	7a 87       	std	Y+10, r23	; 0x0a
     81a:	8b 87       	std	Y+11, r24	; 0x0b
     81c:	9c 87       	std	Y+12, r25	; 0x0c
	Kd = Kd / (PID_UPDATE_TIME/1000);

	error = ((float)(setPoint - currentPoint));
     81e:	a3 01       	movw	r20, r6
     820:	92 01       	movw	r18, r4
     822:	6d 81       	ldd	r22, Y+5	; 0x05
     824:	7e 81       	ldd	r23, Y+6	; 0x06
     826:	8f 81       	ldd	r24, Y+7	; 0x07
     828:	98 85       	ldd	r25, Y+8	; 0x08
     82a:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__subsf3>
     82e:	6b 01       	movw	r12, r22
     830:	7c 01       	movw	r14, r24

	if((error < ((float)Interlock_Temp_Range)) && (error > ((float)(-Interlock_Temp_Range))))
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	40 e8       	ldi	r20, 0x80	; 128
     838:	5f e3       	ldi	r21, 0x3F	; 63
     83a:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__cmpsf2>
     83e:	88 23       	and	r24, r24
     840:	a4 f4       	brge	.+40     	; 0x86a <pid_Controller+0xa6>
     842:	20 e0       	ldi	r18, 0x00	; 0
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	40 e8       	ldi	r20, 0x80	; 128
     848:	5f eb       	ldi	r21, 0xBF	; 191
     84a:	c7 01       	movw	r24, r14
     84c:	b6 01       	movw	r22, r12
     84e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__gesf2>
     852:	18 16       	cp	r1, r24
     854:	54 f4       	brge	.+20     	; 0x86a <pid_Controller+0xa6>
	{
		SET_INTERLOCK_KEY;
     856:	88 b3       	in	r24, 0x18	; 24
     858:	81 60       	ori	r24, 0x01	; 1
     85a:	88 bb       	out	0x18, r24	; 24
		RED_LED_OFF;
     85c:	88 b3       	in	r24, 0x18	; 24
     85e:	8d 7f       	andi	r24, 0xFD	; 253
     860:	88 bb       	out	0x18, r24	; 24
		GREEN_LED_ON;
     862:	88 b3       	in	r24, 0x18	; 24
     864:	84 60       	ori	r24, 0x04	; 4
     866:	88 bb       	out	0x18, r24	; 24
     868:	09 c0       	rjmp	.+18     	; 0x87c <pid_Controller+0xb8>
	}

	else
	{
		RESET_INTERLOCK_KEY;
     86a:	88 b3       	in	r24, 0x18	; 24
     86c:	8e 7f       	andi	r24, 0xFE	; 254
     86e:	88 bb       	out	0x18, r24	; 24
		RED_LED_ON;
     870:	88 b3       	in	r24, 0x18	; 24
     872:	82 60       	ori	r24, 0x02	; 2
     874:	88 bb       	out	0x18, r24	; 24
		GREEN_LED_OFF;
     876:	88 b3       	in	r24, 0x18	; 24
     878:	8b 7f       	andi	r24, 0xFB	; 251
     87a:	88 bb       	out	0x18, r24	; 24
	}

	if(error < (-1))
     87c:	20 e0       	ldi	r18, 0x00	; 0
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	40 e8       	ldi	r20, 0x80	; 128
     882:	5f eb       	ldi	r21, 0xBF	; 191
     884:	c7 01       	movw	r24, r14
     886:	b6 01       	movw	r22, r12
     888:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__cmpsf2>
     88c:	88 23       	and	r24, r24
     88e:	a4 f4       	brge	.+40     	; 0x8b8 <pid_Controller+0xf4>
	{
		timer1_stop();
     890:	0e 94 9d 01 	call	0x33a	; 0x33a <timer1_stop>
		OCR_value_2 = 255;
     894:	8f ef       	ldi	r24, 0xFF	; 255
     896:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <OCR_value_2>
		OCR0 = OCR_value_2;
     89a:	8c bf       	out	0x3c, r24	; 60
		sumError = 0;
     89c:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <sumError>
     8a0:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <sumError+0x1>
     8a4:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <sumError+0x2>
     8a8:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <sumError+0x3>
		timer0_start();
     8ac:	0e 94 72 01 	call	0x2e4	; 0x2e4 <timer0_start>
		operationStatus = 1;
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <operationStatus>
     8b6:	57 c1       	rjmp	.+686    	; 0xb66 <pid_Controller+0x3a2>
	}

	else if(error > 1)
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	40 e8       	ldi	r20, 0x80	; 128
     8be:	5f e3       	ldi	r21, 0x3F	; 63
     8c0:	c7 01       	movw	r24, r14
     8c2:	b6 01       	movw	r22, r12
     8c4:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__gesf2>
     8c8:	18 16       	cp	r1, r24
     8ca:	c4 f4       	brge	.+48     	; 0x8fc <pid_Controller+0x138>
	{
		timer0_stop();
     8cc:	0e 94 77 01 	call	0x2ee	; 0x2ee <timer0_stop>
		OCR_value_1 = 255;
     8d0:	8f ef       	ldi	r24, 0xFF	; 255
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <OCR_value_1+0x1>
     8d8:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <OCR_value_1>
		OCR1A = OCR_value_1;
     8dc:	9b bd       	out	0x2b, r25	; 43
     8de:	8a bd       	out	0x2a, r24	; 42
		sumError = 0;
     8e0:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <sumError>
     8e4:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <sumError+0x1>
     8e8:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <sumError+0x2>
     8ec:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <sumError+0x3>
		timer1_start();
     8f0:	0e 94 97 01 	call	0x32e	; 0x32e <timer1_start>
		operationStatus = 2;
     8f4:	82 e0       	ldi	r24, 0x02	; 2
     8f6:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <operationStatus>
     8fa:	35 c1       	rjmp	.+618    	; 0xb66 <pid_Controller+0x3a2>

	}
	else
	{
		float absError = error;
		if (absError < 0)
     8fc:	20 e0       	ldi	r18, 0x00	; 0
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	a9 01       	movw	r20, r18
     902:	c7 01       	movw	r24, r14
     904:	b6 01       	movw	r22, r12
     906:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__cmpsf2>
     90a:	88 23       	and	r24, r24
     90c:	44 f4       	brge	.+16     	; 0x91e <pid_Controller+0x15a>
		absError *= -1;
     90e:	d7 01       	movw	r26, r14
     910:	c6 01       	movw	r24, r12
     912:	b0 58       	subi	r27, 0x80	; 128
     914:	8d 83       	std	Y+5, r24	; 0x05
     916:	9e 83       	std	Y+6, r25	; 0x06
     918:	af 83       	std	Y+7, r26	; 0x07
     91a:	b8 87       	std	Y+8, r27	; 0x08
     91c:	04 c0       	rjmp	.+8      	; 0x926 <pid_Controller+0x162>
		operationStatus = 2;

	}
	else
	{
		float absError = error;
     91e:	cd 82       	std	Y+5, r12	; 0x05
     920:	de 82       	std	Y+6, r13	; 0x06
     922:	ef 82       	std	Y+7, r14	; 0x07
     924:	f8 86       	std	Y+8, r15	; 0x08
		if (absError < 0)
		absError *= -1;
		sumError += (Ki * absError);
     926:	29 85       	ldd	r18, Y+9	; 0x09
     928:	3a 85       	ldd	r19, Y+10	; 0x0a
     92a:	4b 85       	ldd	r20, Y+11	; 0x0b
     92c:	5c 85       	ldd	r21, Y+12	; 0x0c
     92e:	6d 81       	ldd	r22, Y+5	; 0x05
     930:	7e 81       	ldd	r23, Y+6	; 0x06
     932:	8f 81       	ldd	r24, Y+7	; 0x07
     934:	98 85       	ldd	r25, Y+8	; 0x08
     936:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
     93a:	20 91 d6 00 	lds	r18, 0x00D6	; 0x8000d6 <sumError>
     93e:	30 91 d7 00 	lds	r19, 0x00D7	; 0x8000d7 <sumError+0x1>
     942:	40 91 d8 00 	lds	r20, 0x00D8	; 0x8000d8 <sumError+0x2>
     946:	50 91 d9 00 	lds	r21, 0x00D9	; 0x8000d9 <sumError+0x3>
     94a:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__addsf3>
     94e:	4b 01       	movw	r8, r22
     950:	5c 01       	movw	r10, r24
     952:	60 93 d6 00 	sts	0x00D6, r22	; 0x8000d6 <sumError>
     956:	70 93 d7 00 	sts	0x00D7, r23	; 0x8000d7 <sumError+0x1>
     95a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <sumError+0x2>
     95e:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <sumError+0x3>
		if(sumError > ((2*Kp)/10))
     962:	29 81       	ldd	r18, Y+1	; 0x01
     964:	3a 81       	ldd	r19, Y+2	; 0x02
     966:	4b 81       	ldd	r20, Y+3	; 0x03
     968:	5c 81       	ldd	r21, Y+4	; 0x04
     96a:	ca 01       	movw	r24, r20
     96c:	b9 01       	movw	r22, r18
     96e:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__addsf3>
     972:	20 e0       	ldi	r18, 0x00	; 0
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	40 e2       	ldi	r20, 0x20	; 32
     978:	51 e4       	ldi	r21, 0x41	; 65
     97a:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__divsf3>
     97e:	6d 87       	std	Y+13, r22	; 0x0d
     980:	7e 87       	std	Y+14, r23	; 0x0e
     982:	8f 87       	std	Y+15, r24	; 0x0f
     984:	98 8b       	std	Y+16, r25	; 0x10
     986:	9b 01       	movw	r18, r22
     988:	ac 01       	movw	r20, r24
     98a:	c5 01       	movw	r24, r10
     98c:	b4 01       	movw	r22, r8
     98e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__gesf2>
     992:	18 16       	cp	r1, r24
     994:	6c f4       	brge	.+26     	; 0x9b0 <pid_Controller+0x1ec>
		sumError = ((2*Kp)/10);
     996:	8d 85       	ldd	r24, Y+13	; 0x0d
     998:	9e 85       	ldd	r25, Y+14	; 0x0e
     99a:	af 85       	ldd	r26, Y+15	; 0x0f
     99c:	b8 89       	ldd	r27, Y+16	; 0x10
     99e:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <sumError>
     9a2:	90 93 d7 00 	sts	0x00D7, r25	; 0x8000d7 <sumError+0x1>
     9a6:	a0 93 d8 00 	sts	0x00D8, r26	; 0x8000d8 <sumError+0x2>
     9aa:	b0 93 d9 00 	sts	0x00D9, r27	; 0x8000d9 <sumError+0x3>
     9ae:	11 c0       	rjmp	.+34     	; 0x9d2 <pid_Controller+0x20e>
		else if(sumError < 0)
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	a9 01       	movw	r20, r18
     9b6:	c5 01       	movw	r24, r10
     9b8:	b4 01       	movw	r22, r8
     9ba:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__cmpsf2>
     9be:	88 23       	and	r24, r24
     9c0:	44 f4       	brge	.+16     	; 0x9d2 <pid_Controller+0x20e>
		sumError = 0;
     9c2:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <sumError>
     9c6:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <sumError+0x1>
     9ca:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <sumError+0x2>
     9ce:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <sumError+0x3>
		if(Ki == 0)
     9d2:	20 e0       	ldi	r18, 0x00	; 0
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	a9 01       	movw	r20, r18
     9d8:	69 85       	ldd	r22, Y+9	; 0x09
     9da:	7a 85       	ldd	r23, Y+10	; 0x0a
     9dc:	8b 85       	ldd	r24, Y+11	; 0x0b
     9de:	9c 85       	ldd	r25, Y+12	; 0x0c
     9e0:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__cmpsf2>
     9e4:	81 11       	cpse	r24, r1
     9e6:	08 c0       	rjmp	.+16     	; 0x9f8 <pid_Controller+0x234>
		sumError =0;
     9e8:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <sumError>
     9ec:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <sumError+0x1>
     9f0:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <sumError+0x2>
     9f4:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <sumError+0x3>

		double output;
		float pointDiff = currentPoint - lastcurrentPoint;
     9f8:	20 91 d2 00 	lds	r18, 0x00D2	; 0x8000d2 <__data_end>
     9fc:	30 91 d3 00 	lds	r19, 0x00D3	; 0x8000d3 <__data_end+0x1>
     a00:	40 91 d4 00 	lds	r20, 0x00D4	; 0x8000d4 <__data_end+0x2>
     a04:	50 91 d5 00 	lds	r21, 0x00D5	; 0x8000d5 <__data_end+0x3>
     a08:	c3 01       	movw	r24, r6
     a0a:	b2 01       	movw	r22, r4
     a0c:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__subsf3>
     a10:	4b 01       	movw	r8, r22
     a12:	5c 01       	movw	r10, r24
		if(pointDiff < 0)
     a14:	20 e0       	ldi	r18, 0x00	; 0
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	a9 01       	movw	r20, r18
     a1a:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__cmpsf2>
     a1e:	88 23       	and	r24, r24
     a20:	24 f4       	brge	.+8      	; 0xa2a <pid_Controller+0x266>
		pointDiff *= -1;
     a22:	b7 fa       	bst	r11, 7
     a24:	b0 94       	com	r11
     a26:	b7 f8       	bld	r11, 7
     a28:	b0 94       	com	r11
		output = (Kp * absError + sumError - (Ki * pointDiff));
     a2a:	29 81       	ldd	r18, Y+1	; 0x01
     a2c:	3a 81       	ldd	r19, Y+2	; 0x02
     a2e:	4b 81       	ldd	r20, Y+3	; 0x03
     a30:	5c 81       	ldd	r21, Y+4	; 0x04
     a32:	6d 81       	ldd	r22, Y+5	; 0x05
     a34:	7e 81       	ldd	r23, Y+6	; 0x06
     a36:	8f 81       	ldd	r24, Y+7	; 0x07
     a38:	98 85       	ldd	r25, Y+8	; 0x08
     a3a:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
     a3e:	20 91 d6 00 	lds	r18, 0x00D6	; 0x8000d6 <sumError>
     a42:	30 91 d7 00 	lds	r19, 0x00D7	; 0x8000d7 <sumError+0x1>
     a46:	40 91 d8 00 	lds	r20, 0x00D8	; 0x8000d8 <sumError+0x2>
     a4a:	50 91 d9 00 	lds	r21, 0x00D9	; 0x8000d9 <sumError+0x3>
     a4e:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__addsf3>
     a52:	69 83       	std	Y+1, r22	; 0x01
     a54:	7a 83       	std	Y+2, r23	; 0x02
     a56:	8b 83       	std	Y+3, r24	; 0x03
     a58:	9c 83       	std	Y+4, r25	; 0x04
     a5a:	29 85       	ldd	r18, Y+9	; 0x09
     a5c:	3a 85       	ldd	r19, Y+10	; 0x0a
     a5e:	4b 85       	ldd	r20, Y+11	; 0x0b
     a60:	5c 85       	ldd	r21, Y+12	; 0x0c
     a62:	c5 01       	movw	r24, r10
     a64:	b4 01       	movw	r22, r8
     a66:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
     a6a:	9b 01       	movw	r18, r22
     a6c:	ac 01       	movw	r20, r24
     a6e:	69 81       	ldd	r22, Y+1	; 0x01
     a70:	7a 81       	ldd	r23, Y+2	; 0x02
     a72:	8b 81       	ldd	r24, Y+3	; 0x03
     a74:	9c 81       	ldd	r25, Y+4	; 0x04
     a76:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__subsf3>
     a7a:	4b 01       	movw	r8, r22
     a7c:	5c 01       	movw	r10, r24
		if(output > 255)
     a7e:	20 e0       	ldi	r18, 0x00	; 0
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	4f e7       	ldi	r20, 0x7F	; 127
     a84:	53 e4       	ldi	r21, 0x43	; 67
     a86:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__gesf2>
     a8a:	18 16       	cp	r1, r24
     a8c:	5c f0       	brlt	.+22     	; 0xaa4 <pid_Controller+0x2e0>
		output = 255;
		else if(output < -255)
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	4f e7       	ldi	r20, 0x7F	; 127
     a94:	53 ec       	ldi	r21, 0xC3	; 195
     a96:	c5 01       	movw	r24, r10
     a98:	b4 01       	movw	r22, r8
     a9a:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__cmpsf2>
     a9e:	88 23       	and	r24, r24
     aa0:	54 f0       	brlt	.+20     	; 0xab6 <pid_Controller+0x2f2>
     aa2:	11 c0       	rjmp	.+34     	; 0xac6 <pid_Controller+0x302>
		float pointDiff = currentPoint - lastcurrentPoint;
		if(pointDiff < 0)
		pointDiff *= -1;
		output = (Kp * absError + sumError - (Ki * pointDiff));
		if(output > 255)
		output = 255;
     aa4:	0f 2e       	mov	r0, r31
     aa6:	81 2c       	mov	r8, r1
     aa8:	91 2c       	mov	r9, r1
     aaa:	ff e7       	ldi	r31, 0x7F	; 127
     aac:	af 2e       	mov	r10, r31
     aae:	f3 e4       	ldi	r31, 0x43	; 67
     ab0:	bf 2e       	mov	r11, r31
     ab2:	f0 2d       	mov	r31, r0
     ab4:	08 c0       	rjmp	.+16     	; 0xac6 <pid_Controller+0x302>
		else if(output < -255)
		output = -255;
     ab6:	0f 2e       	mov	r0, r31
     ab8:	81 2c       	mov	r8, r1
     aba:	91 2c       	mov	r9, r1
     abc:	ff e7       	ldi	r31, 0x7F	; 127
     abe:	af 2e       	mov	r10, r31
     ac0:	f3 ec       	ldi	r31, 0xC3	; 195
     ac2:	bf 2e       	mov	r11, r31
     ac4:	f0 2d       	mov	r31, r0

		output = abs(output);
     ac6:	c5 01       	movw	r24, r10
     ac8:	b4 01       	movw	r22, r8
     aca:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <__fixsfsi>
     ace:	8b 01       	movw	r16, r22
     ad0:	77 23       	and	r23, r23
     ad2:	24 f4       	brge	.+8      	; 0xadc <pid_Controller+0x318>
     ad4:	00 27       	eor	r16, r16
     ad6:	11 27       	eor	r17, r17
     ad8:	06 1b       	sub	r16, r22
     ada:	17 0b       	sbc	r17, r23

		if(error > 0)
     adc:	20 e0       	ldi	r18, 0x00	; 0
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	a9 01       	movw	r20, r18
     ae2:	c7 01       	movw	r24, r14
     ae4:	b6 01       	movw	r22, r12
     ae6:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__gesf2>
     aea:	18 16       	cp	r1, r24
     aec:	84 f4       	brge	.+32     	; 0xb0e <pid_Controller+0x34a>
		{
			timer0_stop();
     aee:	0e 94 77 01 	call	0x2ee	; 0x2ee <timer0_stop>
			OCR_value_1 = output;
     af2:	80 2f       	mov	r24, r16
     af4:	91 2f       	mov	r25, r17
     af6:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <OCR_value_1+0x1>
     afa:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <OCR_value_1>
			OCR1A = OCR_value_1;
     afe:	9b bd       	out	0x2b, r25	; 43
     b00:	8a bd       	out	0x2a, r24	; 42
			timer1_start();
     b02:	0e 94 97 01 	call	0x32e	; 0x32e <timer1_start>
			operationStatus = 4;
     b06:	84 e0       	ldi	r24, 0x04	; 4
     b08:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <operationStatus>
     b0c:	2c c0       	rjmp	.+88     	; 0xb66 <pid_Controller+0x3a2>
		}

		else if(error < 0)
     b0e:	20 e0       	ldi	r18, 0x00	; 0
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	a9 01       	movw	r20, r18
     b14:	c7 01       	movw	r24, r14
     b16:	b6 01       	movw	r22, r12
     b18:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__cmpsf2>
     b1c:	88 23       	and	r24, r24
     b1e:	5c f4       	brge	.+22     	; 0xb36 <pid_Controller+0x372>
		{
			timer1_stop();
     b20:	0e 94 9d 01 	call	0x33a	; 0x33a <timer1_stop>
			OCR_value_2 = output;
     b24:	00 93 e2 00 	sts	0x00E2, r16	; 0x8000e2 <OCR_value_2>
			OCR0 = OCR_value_2;
     b28:	0c bf       	out	0x3c, r16	; 60
			timer0_start();
     b2a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <timer0_start>
			operationStatus = 3;
     b2e:	83 e0       	ldi	r24, 0x03	; 3
     b30:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <operationStatus>
     b34:	18 c0       	rjmp	.+48     	; 0xb66 <pid_Controller+0x3a2>
		}

		else
		{

			OCR_value_2 = 0;
     b36:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <OCR_value_2>
			OCR0 = OCR_value_2;
     b3a:	1c be       	out	0x3c, r1	; 60
			OCR_value_1 = 0;
     b3c:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <OCR_value_1+0x1>
     b40:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <OCR_value_1>
			OCR1A = OCR_value_1;
     b44:	1b bc       	out	0x2b, r1	; 43
     b46:	1a bc       	out	0x2a, r1	; 42
			sumError = 0;
     b48:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <sumError>
     b4c:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <sumError+0x1>
     b50:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <sumError+0x2>
     b54:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <sumError+0x3>
			timer0_stop();
     b58:	0e 94 77 01 	call	0x2ee	; 0x2ee <timer0_stop>
			timer1_stop();
     b5c:	0e 94 9d 01 	call	0x33a	; 0x33a <timer1_stop>
			operationStatus = 5;
     b60:	85 e0       	ldi	r24, 0x05	; 5
     b62:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <operationStatus>
		}
	}
	lastcurrentPoint = currentPoint;
     b66:	40 92 d2 00 	sts	0x00D2, r4	; 0x8000d2 <__data_end>
     b6a:	50 92 d3 00 	sts	0x00D3, r5	; 0x8000d3 <__data_end+0x1>
     b6e:	60 92 d4 00 	sts	0x00D4, r6	; 0x8000d4 <__data_end+0x2>
     b72:	70 92 d5 00 	sts	0x00D5, r7	; 0x8000d5 <__data_end+0x3>
	return (error);
}
     b76:	c7 01       	movw	r24, r14
     b78:	b6 01       	movw	r22, r12
     b7a:	60 96       	adiw	r28, 0x10	; 16
     b7c:	0f b6       	in	r0, 0x3f	; 63
     b7e:	f8 94       	cli
     b80:	de bf       	out	0x3e, r29	; 62
     b82:	0f be       	out	0x3f, r0	; 63
     b84:	cd bf       	out	0x3d, r28	; 61
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	1f 91       	pop	r17
     b8c:	0f 91       	pop	r16
     b8e:	ff 90       	pop	r15
     b90:	ef 90       	pop	r14
     b92:	df 90       	pop	r13
     b94:	cf 90       	pop	r12
     b96:	bf 90       	pop	r11
     b98:	af 90       	pop	r10
     b9a:	9f 90       	pop	r9
     b9c:	8f 90       	pop	r8
     b9e:	7f 90       	pop	r7
     ba0:	6f 90       	pop	r6
     ba2:	5f 90       	pop	r5
     ba4:	4f 90       	pop	r4
     ba6:	08 95       	ret

00000ba8 <processTempUpdate>:
		}
 		keyEventExecute();
	}
}
void processTempUpdate(void)
{
     ba8:	4f 92       	push	r4
     baa:	5f 92       	push	r5
     bac:	6f 92       	push	r6
     bae:	7f 92       	push	r7
     bb0:	af 92       	push	r10
     bb2:	bf 92       	push	r11
     bb4:	cf 92       	push	r12
     bb6:	df 92       	push	r13
     bb8:	ef 92       	push	r14
     bba:	ff 92       	push	r15
     bbc:	0f 93       	push	r16
     bbe:	1f 93       	push	r17
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
     bc8:	28 97       	sbiw	r28, 0x08	; 8
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	f8 94       	cli
     bce:	de bf       	out	0x3e, r29	; 62
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	cd bf       	out	0x3d, r28	; 61

	uint16_t recTempData = lastUpdatedTemp;
     bd4:	20 91 dc 00 	lds	r18, 0x00DC	; 0x8000dc <lastUpdatedTemp>
     bd8:	30 91 dd 00 	lds	r19, 0x00DD	; 0x8000dd <lastUpdatedTemp+0x1>
     bdc:	3a 83       	std	Y+2, r19	; 0x02
     bde:	29 83       	std	Y+1, r18	; 0x01

	if(recTempData == 0x3030) // this is error and print it on lcd
     be0:	20 33       	cpi	r18, 0x30	; 48
     be2:	30 43       	sbci	r19, 0x30	; 48
     be4:	79 f4       	brne	.+30     	; 0xc04 <processTempUpdate+0x5c>
	{
		if(flagDebugMode)
     be6:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <flagDebugMode>
     bea:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <flagDebugMode+0x1>
     bee:	89 2b       	or	r24, r25
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <processTempUpdate+0x4c>
     bf2:	81 c1       	rjmp	.+770    	; 0xef6 <processTempUpdate+0x34e>
		{
			LCD_location(1,16);
     bf4:	60 e1       	ldi	r22, 0x10	; 16
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
			LCD_write('E');
     bfc:	85 e4       	ldi	r24, 0x45	; 69
     bfe:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
     c02:	79 c1       	rjmp	.+754    	; 0xef6 <processTempUpdate+0x34e>
		}
 		return;
 	}

	if((recTempData > CUR_TEMP_HIGH_THRESHOLD) || (recTempData < CUR_TEMP_LOW_THRESHOLD))// this is error and print it on lcd
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	9a 81       	ldd	r25, Y+2	; 0x02
     c08:	8a 5f       	subi	r24, 0xFA	; 250
     c0a:	91 09       	sbc	r25, r1
     c0c:	8d 32       	cpi	r24, 0x2D	; 45
     c0e:	91 40       	sbci	r25, 0x01	; 1
     c10:	78 f0       	brcs	.+30     	; 0xc30 <processTempUpdate+0x88>
	{
		if(flagDebugMode)
     c12:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <flagDebugMode>
     c16:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <flagDebugMode+0x1>
     c1a:	89 2b       	or	r24, r25
     c1c:	09 f4       	brne	.+2      	; 0xc20 <processTempUpdate+0x78>
     c1e:	6b c1       	rjmp	.+726    	; 0xef6 <processTempUpdate+0x34e>
		{
			LCD_location(1,16);
     c20:	60 e1       	ldi	r22, 0x10	; 16
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
			LCD_write('R');
     c28:	82 e5       	ldi	r24, 0x52	; 82
     c2a:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
     c2e:	63 c1       	rjmp	.+710    	; 0xef6 <processTempUpdate+0x34e>
		}
		return;
	}

	if((prevTemp != 0) && (((prevTemp -20) > recTempData) || ((prevTemp + 20) < recTempData)))// this is error and print it on lcd
     c30:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <prevTemp>
     c34:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <prevTemp+0x1>
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	81 f1       	breq	.+96     	; 0xc9c <processTempUpdate+0xf4>
     c3c:	9c 01       	movw	r18, r24
     c3e:	24 51       	subi	r18, 0x14	; 20
     c40:	31 09       	sbc	r19, r1
     c42:	49 81       	ldd	r20, Y+1	; 0x01
     c44:	5a 81       	ldd	r21, Y+2	; 0x02
     c46:	42 17       	cp	r20, r18
     c48:	53 07       	cpc	r21, r19
     c4a:	20 f0       	brcs	.+8      	; 0xc54 <processTempUpdate+0xac>
     c4c:	44 96       	adiw	r24, 0x14	; 20
     c4e:	84 17       	cp	r24, r20
     c50:	95 07       	cpc	r25, r21
     c52:	20 f5       	brcc	.+72     	; 0xc9c <processTempUpdate+0xf4>
	{
		if(flagDebugMode)
     c54:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <flagDebugMode>
     c58:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <flagDebugMode+0x1>
     c5c:	89 2b       	or	r24, r25
     c5e:	39 f0       	breq	.+14     	; 0xc6e <processTempUpdate+0xc6>
		{
			LCD_location(1,16);
     c60:	60 e1       	ldi	r22, 0x10	; 16
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
			LCD_write('F');
     c68:	86 e4       	ldi	r24, 0x46	; 70
     c6a:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
		}
	
		fcntfilter++;
     c6e:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <fcntfilter>
     c72:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <fcntfilter+0x1>
     c76:	01 96       	adiw	r24, 0x01	; 1
     c78:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <fcntfilter+0x1>
     c7c:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <fcntfilter>
		
		if(fcntfilter > 10)
     c80:	0b 97       	sbiw	r24, 0x0b	; 11
     c82:	08 f4       	brcc	.+2      	; 0xc86 <processTempUpdate+0xde>
     c84:	38 c1       	rjmp	.+624    	; 0xef6 <processTempUpdate+0x34e>
		{
			fcntfilter = 0;
     c86:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <fcntfilter+0x1>
     c8a:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <fcntfilter>
			prevTemp = recTempData;
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	9a 81       	ldd	r25, Y+2	; 0x02
     c92:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <prevTemp+0x1>
     c96:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <prevTemp>
     c9a:	2d c1       	rjmp	.+602    	; 0xef6 <processTempUpdate+0x34e>
		}
		return;
	}
else
{
	fcntfilter = 0;
     c9c:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <fcntfilter+0x1>
     ca0:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <fcntfilter>
}

	if(flagDebugMode)
     ca4:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <flagDebugMode>
     ca8:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <flagDebugMode+0x1>
     cac:	89 2b       	or	r24, r25
     cae:	39 f0       	breq	.+14     	; 0xcbe <processTempUpdate+0x116>
	{
		LCD_location(1,16);
     cb0:	60 e1       	ldi	r22, 0x10	; 16
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		LCD_write('K');
     cb8:	8b e4       	ldi	r24, 0x4B	; 75
     cba:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
	}

	prevTemp = recTempData;
     cbe:	29 81       	ldd	r18, Y+1	; 0x01
     cc0:	3a 81       	ldd	r19, Y+2	; 0x02
     cc2:	30 93 50 01 	sts	0x0150, r19	; 0x800150 <prevTemp+0x1>
     cc6:	20 93 4f 01 	sts	0x014F, r18	; 0x80014f <prevTemp>
	currTemp = recTempData;
     cca:	30 93 4d 01 	sts	0x014D, r19	; 0x80014d <currTemp+0x1>
     cce:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <currTemp>
	LCD_location(1,12);
     cd2:	6c e0       	ldi	r22, 0x0C	; 12
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
	LCD_showvalue(((float) currTemp));
     cda:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <currTemp>
     cde:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <currTemp+0x1>
     ce2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_showvalue>
	
	if(flagDebugMode)
     ce6:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <flagDebugMode>
     cea:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <flagDebugMode+0x1>
     cee:	89 2b       	or	r24, r25
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <processTempUpdate+0x14c>
     cf2:	82 c0       	rjmp	.+260    	; 0xdf8 <processTempUpdate+0x250>
	{
		displayDebugInfo(pid_Controller((float) (setTemp/10), (float) (currTemp/10), (float) (setKp/10), (float) (setKi/10), (float) (setKd/10)));
     cf4:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <setKd>
     cf8:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <setKd+0x1>
     cfc:	ad ec       	ldi	r26, 0xCD	; 205
     cfe:	bc ec       	ldi	r27, 0xCC	; 204
     d00:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__umulhisi3>
     d04:	7c 01       	movw	r14, r24
     d06:	f6 94       	lsr	r15
     d08:	e7 94       	ror	r14
     d0a:	f6 94       	lsr	r15
     d0c:	e7 94       	ror	r14
     d0e:	f6 94       	lsr	r15
     d10:	e7 94       	ror	r14
     d12:	20 91 e3 00 	lds	r18, 0x00E3	; 0x8000e3 <setKi>
     d16:	30 91 e4 00 	lds	r19, 0x00E4	; 0x8000e4 <setKi+0x1>
     d1a:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__umulhisi3>
     d1e:	ac 01       	movw	r20, r24
     d20:	56 95       	lsr	r21
     d22:	47 95       	ror	r20
     d24:	56 95       	lsr	r21
     d26:	47 95       	ror	r20
     d28:	56 95       	lsr	r21
     d2a:	47 95       	ror	r20
     d2c:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <setKp>
     d30:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <setKp+0x1>
     d34:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__umulhisi3>
     d38:	3c 01       	movw	r6, r24
     d3a:	76 94       	lsr	r7
     d3c:	67 94       	ror	r6
     d3e:	76 94       	lsr	r7
     d40:	67 94       	ror	r6
     d42:	76 94       	lsr	r7
     d44:	67 94       	ror	r6
     d46:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <currTemp>
     d4a:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <currTemp+0x1>
     d4e:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__umulhisi3>
     d52:	96 95       	lsr	r25
     d54:	87 95       	ror	r24
     d56:	96 95       	lsr	r25
     d58:	87 95       	ror	r24
     d5a:	96 95       	lsr	r25
     d5c:	87 95       	ror	r24
     d5e:	9e 83       	std	Y+6, r25	; 0x06
     d60:	8d 83       	std	Y+5, r24	; 0x05
     d62:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     d66:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     d6a:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__umulhisi3>
     d6e:	8c 01       	movw	r16, r24
     d70:	16 95       	lsr	r17
     d72:	07 95       	ror	r16
     d74:	16 95       	lsr	r17
     d76:	07 95       	ror	r16
     d78:	16 95       	lsr	r17
     d7a:	07 95       	ror	r16
     d7c:	ba 01       	movw	r22, r20
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__floatunsisf>
     d86:	5b 01       	movw	r10, r22
     d88:	6c 01       	movw	r12, r24
     d8a:	b3 01       	movw	r22, r6
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__floatunsisf>
     d94:	69 83       	std	Y+1, r22	; 0x01
     d96:	7a 83       	std	Y+2, r23	; 0x02
     d98:	8b 83       	std	Y+3, r24	; 0x03
     d9a:	9c 83       	std	Y+4, r25	; 0x04
     d9c:	4d 81       	ldd	r20, Y+5	; 0x05
     d9e:	5e 81       	ldd	r21, Y+6	; 0x06
     da0:	ba 01       	movw	r22, r20
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__floatunsisf>
     daa:	6d 83       	std	Y+5, r22	; 0x05
     dac:	7e 83       	std	Y+6, r23	; 0x06
     dae:	8f 83       	std	Y+7, r24	; 0x07
     db0:	98 87       	std	Y+8, r25	; 0x08
     db2:	b8 01       	movw	r22, r16
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__floatunsisf>
     dbc:	2b 01       	movw	r4, r22
     dbe:	3c 01       	movw	r6, r24
     dc0:	b7 01       	movw	r22, r14
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__floatunsisf>
     dca:	9f 93       	push	r25
     dcc:	8f 93       	push	r24
     dce:	7f 93       	push	r23
     dd0:	6f 93       	push	r22
     dd2:	e9 80       	ldd	r14, Y+1	; 0x01
     dd4:	fa 80       	ldd	r15, Y+2	; 0x02
     dd6:	0b 81       	ldd	r16, Y+3	; 0x03
     dd8:	1c 81       	ldd	r17, Y+4	; 0x04
     dda:	2d 81       	ldd	r18, Y+5	; 0x05
     ddc:	3e 81       	ldd	r19, Y+6	; 0x06
     dde:	4f 81       	ldd	r20, Y+7	; 0x07
     de0:	58 85       	ldd	r21, Y+8	; 0x08
     de2:	c3 01       	movw	r24, r6
     de4:	b2 01       	movw	r22, r4
     de6:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <pid_Controller>
     dea:	0e 94 c3 02 	call	0x586	; 0x586 <displayDebugInfo>
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	7f c0       	rjmp	.+254    	; 0xef6 <processTempUpdate+0x34e>
	}
	else
	{
		pid_Controller((float) (setTemp/10), (float) (currTemp/10), (float) (setKp/10), (float) (setKi/10), (float) (setKd/10));
     df8:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <setKd>
     dfc:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <setKd+0x1>
     e00:	ad ec       	ldi	r26, 0xCD	; 205
     e02:	bc ec       	ldi	r27, 0xCC	; 204
     e04:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__umulhisi3>
     e08:	8c 01       	movw	r16, r24
     e0a:	16 95       	lsr	r17
     e0c:	07 95       	ror	r16
     e0e:	16 95       	lsr	r17
     e10:	07 95       	ror	r16
     e12:	16 95       	lsr	r17
     e14:	07 95       	ror	r16
     e16:	20 91 e3 00 	lds	r18, 0x00E3	; 0x8000e3 <setKi>
     e1a:	30 91 e4 00 	lds	r19, 0x00E4	; 0x8000e4 <setKi+0x1>
     e1e:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__umulhisi3>
     e22:	ac 01       	movw	r20, r24
     e24:	56 95       	lsr	r21
     e26:	47 95       	ror	r20
     e28:	56 95       	lsr	r21
     e2a:	47 95       	ror	r20
     e2c:	56 95       	lsr	r21
     e2e:	47 95       	ror	r20
     e30:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <setKp>
     e34:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <setKp+0x1>
     e38:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__umulhisi3>
     e3c:	96 95       	lsr	r25
     e3e:	87 95       	ror	r24
     e40:	96 95       	lsr	r25
     e42:	87 95       	ror	r24
     e44:	96 95       	lsr	r25
     e46:	87 95       	ror	r24
     e48:	9a 83       	std	Y+2, r25	; 0x02
     e4a:	89 83       	std	Y+1, r24	; 0x01
     e4c:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <currTemp>
     e50:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <currTemp+0x1>
     e54:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__umulhisi3>
     e58:	3c 01       	movw	r6, r24
     e5a:	76 94       	lsr	r7
     e5c:	67 94       	ror	r6
     e5e:	76 94       	lsr	r7
     e60:	67 94       	ror	r6
     e62:	76 94       	lsr	r7
     e64:	67 94       	ror	r6
     e66:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     e6a:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     e6e:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__umulhisi3>
     e72:	2c 01       	movw	r4, r24
     e74:	56 94       	lsr	r5
     e76:	47 94       	ror	r4
     e78:	56 94       	lsr	r5
     e7a:	47 94       	ror	r4
     e7c:	56 94       	lsr	r5
     e7e:	47 94       	ror	r4
     e80:	ba 01       	movw	r22, r20
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__floatunsisf>
     e8a:	5b 01       	movw	r10, r22
     e8c:	6c 01       	movw	r12, r24
     e8e:	29 81       	ldd	r18, Y+1	; 0x01
     e90:	3a 81       	ldd	r19, Y+2	; 0x02
     e92:	b9 01       	movw	r22, r18
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__floatunsisf>
     e9c:	69 83       	std	Y+1, r22	; 0x01
     e9e:	7a 83       	std	Y+2, r23	; 0x02
     ea0:	8b 83       	std	Y+3, r24	; 0x03
     ea2:	9c 83       	std	Y+4, r25	; 0x04
     ea4:	b3 01       	movw	r22, r6
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__floatunsisf>
     eae:	6d 83       	std	Y+5, r22	; 0x05
     eb0:	7e 83       	std	Y+6, r23	; 0x06
     eb2:	8f 83       	std	Y+7, r24	; 0x07
     eb4:	98 87       	std	Y+8, r25	; 0x08
     eb6:	b2 01       	movw	r22, r4
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__floatunsisf>
     ec0:	2b 01       	movw	r4, r22
     ec2:	3c 01       	movw	r6, r24
     ec4:	b8 01       	movw	r22, r16
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__floatunsisf>
     ece:	9f 93       	push	r25
     ed0:	8f 93       	push	r24
     ed2:	7f 93       	push	r23
     ed4:	6f 93       	push	r22
     ed6:	e9 80       	ldd	r14, Y+1	; 0x01
     ed8:	fa 80       	ldd	r15, Y+2	; 0x02
     eda:	0b 81       	ldd	r16, Y+3	; 0x03
     edc:	1c 81       	ldd	r17, Y+4	; 0x04
     ede:	2d 81       	ldd	r18, Y+5	; 0x05
     ee0:	3e 81       	ldd	r19, Y+6	; 0x06
     ee2:	4f 81       	ldd	r20, Y+7	; 0x07
     ee4:	58 85       	ldd	r21, Y+8	; 0x08
     ee6:	c3 01       	movw	r24, r6
     ee8:	b2 01       	movw	r22, r4
     eea:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <pid_Controller>
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
	}

} 
     ef6:	28 96       	adiw	r28, 0x08	; 8
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	de bf       	out	0x3e, r29	; 62
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	cd bf       	out	0x3d, r28	; 61
     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
     f06:	1f 91       	pop	r17
     f08:	0f 91       	pop	r16
     f0a:	ff 90       	pop	r15
     f0c:	ef 90       	pop	r14
     f0e:	df 90       	pop	r13
     f10:	cf 90       	pop	r12
     f12:	bf 90       	pop	r11
     f14:	af 90       	pop	r10
     f16:	7f 90       	pop	r7
     f18:	6f 90       	pop	r6
     f1a:	5f 90       	pop	r5
     f1c:	4f 90       	pop	r4
     f1e:	08 95       	ret

00000f20 <displayUserInfo>:
	}
	lastcurrentPoint = currentPoint;
	return (error);
}
void displayUserInfo(uint16_t data)
{
     f20:	0f 93       	push	r16
     f22:	1f 93       	push	r17
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	8c 01       	movw	r16, r24
	if(data>999)
     f2a:	88 3e       	cpi	r24, 0xE8	; 232
     f2c:	23 e0       	ldi	r18, 0x03	; 3
     f2e:	92 07       	cpc	r25, r18
     f30:	78 f1       	brcs	.+94     	; 0xf90 <displayUserInfo+0x70>
	{
		LCD_Char(((data / 1000) % 10) + 0x30);
     f32:	9c 01       	movw	r18, r24
     f34:	36 95       	lsr	r19
     f36:	27 95       	ror	r18
     f38:	36 95       	lsr	r19
     f3a:	27 95       	ror	r18
     f3c:	36 95       	lsr	r19
     f3e:	27 95       	ror	r18
     f40:	a5 ec       	ldi	r26, 0xC5	; 197
     f42:	b0 e2       	ldi	r27, 0x20	; 32
     f44:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__umulhisi3>
     f48:	ac 01       	movw	r20, r24
     f4a:	52 95       	swap	r21
     f4c:	42 95       	swap	r20
     f4e:	4f 70       	andi	r20, 0x0F	; 15
     f50:	45 27       	eor	r20, r21
     f52:	5f 70       	andi	r21, 0x0F	; 15
     f54:	45 27       	eor	r20, r21
     f56:	9a 01       	movw	r18, r20
     f58:	ad ec       	ldi	r26, 0xCD	; 205
     f5a:	bc ec       	ldi	r27, 0xCC	; 204
     f5c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__umulhisi3>
     f60:	96 95       	lsr	r25
     f62:	87 95       	ror	r24
     f64:	96 95       	lsr	r25
     f66:	87 95       	ror	r24
     f68:	96 95       	lsr	r25
     f6a:	87 95       	ror	r24
     f6c:	9c 01       	movw	r18, r24
     f6e:	22 0f       	add	r18, r18
     f70:	33 1f       	adc	r19, r19
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	82 0f       	add	r24, r18
     f80:	93 1f       	adc	r25, r19
     f82:	9a 01       	movw	r18, r20
     f84:	28 1b       	sub	r18, r24
     f86:	39 0b       	sbc	r19, r25
     f88:	c9 01       	movw	r24, r18
     f8a:	80 5d       	subi	r24, 0xD0	; 208
     f8c:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_Char>
	}
	
	LCD_write(((data / 100) % 10) + 0x30);
     f90:	98 01       	movw	r18, r16
     f92:	36 95       	lsr	r19
     f94:	27 95       	ror	r18
     f96:	36 95       	lsr	r19
     f98:	27 95       	ror	r18
     f9a:	ab e7       	ldi	r26, 0x7B	; 123
     f9c:	b4 e1       	ldi	r27, 0x14	; 20
     f9e:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__umulhisi3>
     fa2:	ac 01       	movw	r20, r24
     fa4:	56 95       	lsr	r21
     fa6:	47 95       	ror	r20
     fa8:	9a 01       	movw	r18, r20
     faa:	ad ec       	ldi	r26, 0xCD	; 205
     fac:	bc ec       	ldi	r27, 0xCC	; 204
     fae:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__umulhisi3>
     fb2:	96 95       	lsr	r25
     fb4:	87 95       	ror	r24
     fb6:	96 95       	lsr	r25
     fb8:	87 95       	ror	r24
     fba:	96 95       	lsr	r25
     fbc:	87 95       	ror	r24
     fbe:	9c 01       	movw	r18, r24
     fc0:	22 0f       	add	r18, r18
     fc2:	33 1f       	adc	r19, r19
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	82 0f       	add	r24, r18
     fd2:	93 1f       	adc	r25, r19
     fd4:	9a 01       	movw	r18, r20
     fd6:	28 1b       	sub	r18, r24
     fd8:	39 0b       	sbc	r19, r25
     fda:	c9 01       	movw	r24, r18
     fdc:	80 5d       	subi	r24, 0xD0	; 208
     fde:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
	LCD_write(((data / 10) % 10) + 0x30);
     fe2:	98 01       	movw	r18, r16
     fe4:	ad ec       	ldi	r26, 0xCD	; 205
     fe6:	bc ec       	ldi	r27, 0xCC	; 204
     fe8:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__umulhisi3>
     fec:	ec 01       	movw	r28, r24
     fee:	d6 95       	lsr	r29
     ff0:	c7 95       	ror	r28
     ff2:	d6 95       	lsr	r29
     ff4:	c7 95       	ror	r28
     ff6:	d6 95       	lsr	r29
     ff8:	c7 95       	ror	r28
     ffa:	9e 01       	movw	r18, r28
     ffc:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__umulhisi3>
    1000:	96 95       	lsr	r25
    1002:	87 95       	ror	r24
    1004:	96 95       	lsr	r25
    1006:	87 95       	ror	r24
    1008:	96 95       	lsr	r25
    100a:	87 95       	ror	r24
    100c:	9c 01       	movw	r18, r24
    100e:	22 0f       	add	r18, r18
    1010:	33 1f       	adc	r19, r19
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	82 0f       	add	r24, r18
    1020:	93 1f       	adc	r25, r19
    1022:	9e 01       	movw	r18, r28
    1024:	28 1b       	sub	r18, r24
    1026:	39 0b       	sbc	r19, r25
    1028:	c9 01       	movw	r24, r18
    102a:	80 5d       	subi	r24, 0xD0	; 208
    102c:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
	LCD_Char('.');
    1030:	8e e2       	ldi	r24, 0x2E	; 46
    1032:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_Char>
	LCD_write(((data / 1) % 10) + 0x30);
    1036:	ce 01       	movw	r24, r28
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	cc 0f       	add	r28, r28
    103e:	dd 1f       	adc	r29, r29
    1040:	cc 0f       	add	r28, r28
    1042:	dd 1f       	adc	r29, r29
    1044:	cc 0f       	add	r28, r28
    1046:	dd 1f       	adc	r29, r29
    1048:	c8 0f       	add	r28, r24
    104a:	d9 1f       	adc	r29, r25
    104c:	c8 01       	movw	r24, r16
    104e:	8c 1b       	sub	r24, r28
    1050:	9d 0b       	sbc	r25, r29
    1052:	80 5d       	subi	r24, 0xD0	; 208
    1054:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
	LCD_Char(' ');
    1058:	80 e2       	ldi	r24, 0x20	; 32
    105a:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_Char>
}
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	1f 91       	pop	r17
    1064:	0f 91       	pop	r16
    1066:	08 95       	ret

00001068 <keyEventExecute>:
void keyEventExecute(void)
{
    1068:	cf 92       	push	r12
    106a:	df 92       	push	r13
    106c:	ef 92       	push	r14
    106e:	ff 92       	push	r15
    1070:	cf 93       	push	r28
	if((IS_KEY_INC_PRESSED) && (IS_KEY_DEC_PRESSED))
    1072:	ca 99       	sbic	0x19, 2	; 25
    1074:	04 c2       	rjmp	.+1032   	; 0x147e <keyEventExecute+0x416>
    1076:	cb 99       	sbic	0x19, 3	; 25
    1078:	02 c2       	rjmp	.+1028   	; 0x147e <keyEventExecute+0x416>
	{
		timer0_stop();
    107a:	0e 94 77 01 	call	0x2ee	; 0x2ee <timer0_stop>
		timer1_stop();
    107e:	0e 94 9d 01 	call	0x33a	; 0x33a <timer1_stop>
		LCD_Clear();
    1082:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_Clear>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1086:	2f ef       	ldi	r18, 0xFF	; 255
    1088:	80 e7       	ldi	r24, 0x70	; 112
    108a:	92 e0       	ldi	r25, 0x02	; 2
    108c:	21 50       	subi	r18, 0x01	; 1
    108e:	80 40       	sbci	r24, 0x00	; 0
    1090:	90 40       	sbci	r25, 0x00	; 0
    1092:	e1 f7       	brne	.-8      	; 0x108c <keyEventExecute+0x24>
    1094:	00 c0       	rjmp	.+0      	; 0x1096 <keyEventExecute+0x2e>
    1096:	00 00       	nop
		_delay_ms(50);
		
		while((!IS_KEY_INC_RELEASED) && (!IS_KEY_DEC_RELEASED));
    1098:	ca 99       	sbic	0x19, 2	; 25
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <keyEventExecute+0x38>
    109c:	cb 9b       	sbis	0x19, 3	; 25
    109e:	fc cf       	rjmp	.-8      	; 0x1098 <keyEventExecute+0x30>
		
		LCD_location(2,1);
    10a0:	61 e0       	ldi	r22, 0x01	; 1
    10a2:	82 e0       	ldi	r24, 0x02	; 2
    10a4:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		LCD_write_string("V - ");
    10a8:	8c e6       	ldi	r24, 0x6C	; 108
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
		LCD_write(((VERSION / 100) % 10) + 0x30);
    10b0:	80 e3       	ldi	r24, 0x30	; 48
    10b2:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
		LCD_write_string(".");
    10b6:	81 e7       	ldi	r24, 0x71	; 113
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
		LCD_write(((VERSION / 10) % 10) + 0x30);
    10be:	81 e3       	ldi	r24, 0x31	; 49
    10c0:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
		LCD_write_string(".");
    10c4:	81 e7       	ldi	r24, 0x71	; 113
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
		LCD_write(((VERSION / 1) % 10) + 0x30);
    10cc:	86 e3       	ldi	r24, 0x36	; 54
    10ce:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
		LCD_location(1,1);
    10d2:	61 e0       	ldi	r22, 0x01	; 1
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		LCD_write_string("Gain P = ");
    10da:	83 e7       	ldi	r24, 0x73	; 115
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
		displayUserInfo(setKp);
    10e2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <setKp>
    10e6:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <setKp+0x1>
    10ea:	0e 94 90 07 	call	0xf20	; 0xf20 <displayUserInfo>
		
		uint8_t fcntSpeedInc = 0, fcntSpeedDec = 0;
    10ee:	c0 e0       	ldi	r28, 0x00	; 0
    10f0:	20 e0       	ldi	r18, 0x00	; 0
		
		while(IS_KEY_PROG_RELEASED)
    10f2:	62 c0       	rjmp	.+196    	; 0x11b8 <keyEventExecute+0x150>
		{
			if(IS_KEY_INC_PRESSED)
    10f4:	ca 99       	sbic	0x19, 2	; 25
    10f6:	2c c0       	rjmp	.+88     	; 0x1150 <keyEventExecute+0xe8>
			{
				fcntSpeedDec = 0;
				setKp = setKp + 1 + fcntSpeedInc++;
    10f8:	c1 e0       	ldi	r28, 0x01	; 1
    10fa:	c2 0f       	add	r28, r18
    10fc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <setKp>
    1100:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <setKp+0x1>
    1104:	82 0f       	add	r24, r18
    1106:	91 1d       	adc	r25, r1
    1108:	01 96       	adiw	r24, 0x01	; 1
    110a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <setKp+0x1>
    110e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <setKp>
			
				if(setKp > K_P_HIGH)
    1112:	8d 34       	cpi	r24, 0x4D	; 77
    1114:	9d 41       	sbci	r25, 0x1D	; 29
    1116:	30 f0       	brcs	.+12     	; 0x1124 <keyEventExecute+0xbc>
					setKp = K_P_HIGH;
    1118:	8c e4       	ldi	r24, 0x4C	; 76
    111a:	9d e1       	ldi	r25, 0x1D	; 29
    111c:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <setKp+0x1>
    1120:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <setKp>
			
				LCD_location(1,10);
    1124:	6a e0       	ldi	r22, 0x0A	; 10
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				displayUserInfo(setKp);
    112c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <setKp>
    1130:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <setKp+0x1>
    1134:	0e 94 90 07 	call	0xf20	; 0xf20 <displayUserInfo>
    1138:	8f ef       	ldi	r24, 0xFF	; 255
    113a:	94 e3       	ldi	r25, 0x34	; 52
    113c:	2c e0       	ldi	r18, 0x0C	; 12
    113e:	81 50       	subi	r24, 0x01	; 1
    1140:	90 40       	sbci	r25, 0x00	; 0
    1142:	20 40       	sbci	r18, 0x00	; 0
    1144:	e1 f7       	brne	.-8      	; 0x113e <keyEventExecute+0xd6>
    1146:	00 c0       	rjmp	.+0      	; 0x1148 <keyEventExecute+0xe0>
    1148:	00 00       	nop
		while(IS_KEY_PROG_RELEASED)
		{
			if(IS_KEY_INC_PRESSED)
			{
				fcntSpeedDec = 0;
				setKp = setKp + 1 + fcntSpeedInc++;
    114a:	2c 2f       	mov	r18, r28
		
		while(IS_KEY_PROG_RELEASED)
		{
			if(IS_KEY_INC_PRESSED)
			{
				fcntSpeedDec = 0;
    114c:	c0 e0       	ldi	r28, 0x00	; 0
    114e:	30 c0       	rjmp	.+96     	; 0x11b0 <keyEventExecute+0x148>
				LCD_location(1,10);
				displayUserInfo(setKp);
				_delay_ms(250);
			}
		
			else if(IS_KEY_DEC_PRESSED)
    1150:	cb 99       	sbic	0x19, 3	; 25
    1152:	2e c0       	rjmp	.+92     	; 0x11b0 <keyEventExecute+0x148>
			{
				fcntSpeedInc = 0;
				if(setKp > (K_P_LOW + 1 + fcntSpeedDec))
    1154:	2c 2f       	mov	r18, r28
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	25 5f       	subi	r18, 0xF5	; 245
    115a:	3f 4f       	sbci	r19, 0xFF	; 255
    115c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <setKp>
    1160:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <setKp+0x1>
    1164:	28 17       	cp	r18, r24
    1166:	39 07       	cpc	r19, r25
    1168:	48 f4       	brcc	.+18     	; 0x117c <keyEventExecute+0x114>
				setKp = setKp - 1 - fcntSpeedDec++;
    116a:	8c 1b       	sub	r24, r28
    116c:	91 09       	sbc	r25, r1
    116e:	01 97       	sbiw	r24, 0x01	; 1
    1170:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <setKp+0x1>
    1174:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <setKp>
    1178:	cf 5f       	subi	r28, 0xFF	; 255
    117a:	06 c0       	rjmp	.+12     	; 0x1188 <keyEventExecute+0x120>
			
				else
				setKp = K_P_LOW;
    117c:	8a e0       	ldi	r24, 0x0A	; 10
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <setKp+0x1>
    1184:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <setKp>
			
				LCD_location(1,10);
    1188:	6a e0       	ldi	r22, 0x0A	; 10
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				displayUserInfo(setKp);
    1190:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <setKp>
    1194:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <setKp+0x1>
    1198:	0e 94 90 07 	call	0xf20	; 0xf20 <displayUserInfo>
    119c:	8f ef       	ldi	r24, 0xFF	; 255
    119e:	94 e3       	ldi	r25, 0x34	; 52
    11a0:	2c e0       	ldi	r18, 0x0C	; 12
    11a2:	81 50       	subi	r24, 0x01	; 1
    11a4:	90 40       	sbci	r25, 0x00	; 0
    11a6:	20 40       	sbci	r18, 0x00	; 0
    11a8:	e1 f7       	brne	.-8      	; 0x11a2 <keyEventExecute+0x13a>
    11aa:	00 c0       	rjmp	.+0      	; 0x11ac <keyEventExecute+0x144>
    11ac:	00 00       	nop
				_delay_ms(250);
			}
		
			else if(IS_KEY_DEC_PRESSED)
			{
				fcntSpeedInc = 0;
    11ae:	20 e0       	ldi	r18, 0x00	; 0
				LCD_location(1,10);
				displayUserInfo(setKp);
				_delay_ms(250);
			}
		
			if(IS_KEY_INC_RELEASED)
    11b0:	ca 99       	sbic	0x19, 2	; 25
			fcntSpeedInc = 0;
    11b2:	20 e0       	ldi	r18, 0x00	; 0
			
			if(IS_KEY_DEC_RELEASED)
    11b4:	cb 99       	sbic	0x19, 3	; 25
			fcntSpeedDec = 0;
    11b6:	c0 e0       	ldi	r28, 0x00	; 0
		LCD_write_string("Gain P = ");
		displayUserInfo(setKp);
		
		uint8_t fcntSpeedInc = 0, fcntSpeedDec = 0;
		
		while(IS_KEY_PROG_RELEASED)
    11b8:	c9 99       	sbic	0x19, 1	; 25
    11ba:	9c cf       	rjmp	.-200    	; 0x10f4 <keyEventExecute+0x8c>
			
			if(IS_KEY_DEC_RELEASED)
			fcntSpeedDec = 0;
		}
		
		eeprom_write_word(EEPROM_K_P_ADD, setKp);
    11bc:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <setKp>
    11c0:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <setKp+0x1>
    11c4:	86 e9       	ldi	r24, 0x96	; 150
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	0e 94 4a 12 	call	0x2494	; 0x2494 <eeprom_write_word>
    11cc:	8f ef       	ldi	r24, 0xFF	; 255
    11ce:	90 e7       	ldi	r25, 0x70	; 112
    11d0:	22 e0       	ldi	r18, 0x02	; 2
    11d2:	81 50       	subi	r24, 0x01	; 1
    11d4:	90 40       	sbci	r25, 0x00	; 0
    11d6:	20 40       	sbci	r18, 0x00	; 0
    11d8:	e1 f7       	brne	.-8      	; 0x11d2 <keyEventExecute+0x16a>
    11da:	00 c0       	rjmp	.+0      	; 0x11dc <keyEventExecute+0x174>
    11dc:	00 00       	nop
		_delay_ms(50);
		while(IS_KEY_PROG_PRESSED);
    11de:	c9 9b       	sbis	0x19, 1	; 25
    11e0:	fe cf       	rjmp	.-4      	; 0x11de <keyEventExecute+0x176>
		
		fcntSpeedInc = 0, fcntSpeedDec = 0;
		
		LCD_location(1,1);
    11e2:	61 e0       	ldi	r22, 0x01	; 1
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		LCD_write_string("Gain I = ");
    11ea:	8d e7       	ldi	r24, 0x7D	; 125
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
		displayUserInfo(setKi);
    11f2:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <setKi>
    11f6:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <setKi+0x1>
    11fa:	0e 94 90 07 	call	0xf20	; 0xf20 <displayUserInfo>
		
		eeprom_write_word(EEPROM_K_P_ADD, setKp);
		_delay_ms(50);
		while(IS_KEY_PROG_PRESSED);
		
		fcntSpeedInc = 0, fcntSpeedDec = 0;
    11fe:	c0 e0       	ldi	r28, 0x00	; 0
    1200:	20 e0       	ldi	r18, 0x00	; 0
		
		LCD_location(1,1);
		LCD_write_string("Gain I = ");
		displayUserInfo(setKi);
		
		while(IS_KEY_PROG_RELEASED)
    1202:	60 c0       	rjmp	.+192    	; 0x12c4 <keyEventExecute+0x25c>
		{
			if(IS_KEY_INC_PRESSED)
    1204:	ca 99       	sbic	0x19, 2	; 25
    1206:	2c c0       	rjmp	.+88     	; 0x1260 <keyEventExecute+0x1f8>
			{
				fcntSpeedDec = 0;
				setKi = setKi + 1 + fcntSpeedInc++;
    1208:	c1 e0       	ldi	r28, 0x01	; 1
    120a:	c2 0f       	add	r28, r18
    120c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <setKi>
    1210:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <setKi+0x1>
    1214:	82 0f       	add	r24, r18
    1216:	91 1d       	adc	r25, r1
    1218:	01 96       	adiw	r24, 0x01	; 1
    121a:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <setKi+0x1>
    121e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <setKi>
				
				if(setKi > K_I_HIGH)
    1222:	85 3f       	cpi	r24, 0xF5	; 245
    1224:	91 40       	sbci	r25, 0x01	; 1
    1226:	30 f0       	brcs	.+12     	; 0x1234 <keyEventExecute+0x1cc>
				setKi = K_I_HIGH;
    1228:	84 ef       	ldi	r24, 0xF4	; 244
    122a:	91 e0       	ldi	r25, 0x01	; 1
    122c:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <setKi+0x1>
    1230:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <setKi>
				
				LCD_location(1,10);
    1234:	6a e0       	ldi	r22, 0x0A	; 10
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				displayUserInfo(setKi);
    123c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <setKi>
    1240:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <setKi+0x1>
    1244:	0e 94 90 07 	call	0xf20	; 0xf20 <displayUserInfo>
    1248:	8f ef       	ldi	r24, 0xFF	; 255
    124a:	94 e3       	ldi	r25, 0x34	; 52
    124c:	2c e0       	ldi	r18, 0x0C	; 12
    124e:	81 50       	subi	r24, 0x01	; 1
    1250:	90 40       	sbci	r25, 0x00	; 0
    1252:	20 40       	sbci	r18, 0x00	; 0
    1254:	e1 f7       	brne	.-8      	; 0x124e <keyEventExecute+0x1e6>
    1256:	00 c0       	rjmp	.+0      	; 0x1258 <keyEventExecute+0x1f0>
    1258:	00 00       	nop
		while(IS_KEY_PROG_RELEASED)
		{
			if(IS_KEY_INC_PRESSED)
			{
				fcntSpeedDec = 0;
				setKi = setKi + 1 + fcntSpeedInc++;
    125a:	2c 2f       	mov	r18, r28
		
		while(IS_KEY_PROG_RELEASED)
		{
			if(IS_KEY_INC_PRESSED)
			{
				fcntSpeedDec = 0;
    125c:	c0 e0       	ldi	r28, 0x00	; 0
    125e:	2e c0       	rjmp	.+92     	; 0x12bc <keyEventExecute+0x254>
				LCD_location(1,10);
				displayUserInfo(setKi);
				_delay_ms(250);
			}
			
			else if(IS_KEY_DEC_PRESSED)
    1260:	cb 99       	sbic	0x19, 3	; 25
    1262:	2c c0       	rjmp	.+88     	; 0x12bc <keyEventExecute+0x254>
			{
				fcntSpeedInc = 0;
				if(setKi > (K_I_LOW + 1 + fcntSpeedDec))
    1264:	2c 2f       	mov	r18, r28
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	2f 5f       	subi	r18, 0xFF	; 255
    126a:	3f 4f       	sbci	r19, 0xFF	; 255
    126c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <setKi>
    1270:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <setKi+0x1>
    1274:	28 17       	cp	r18, r24
    1276:	39 07       	cpc	r19, r25
    1278:	48 f4       	brcc	.+18     	; 0x128c <keyEventExecute+0x224>
				setKi = setKi - 1 - fcntSpeedDec++;
    127a:	8c 1b       	sub	r24, r28
    127c:	91 09       	sbc	r25, r1
    127e:	01 97       	sbiw	r24, 0x01	; 1
    1280:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <setKi+0x1>
    1284:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <setKi>
    1288:	cf 5f       	subi	r28, 0xFF	; 255
    128a:	04 c0       	rjmp	.+8      	; 0x1294 <keyEventExecute+0x22c>
				
				else
				setKi = K_I_LOW;
    128c:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <setKi+0x1>
    1290:	10 92 e3 00 	sts	0x00E3, r1	; 0x8000e3 <setKi>
				
				LCD_location(1,10);
    1294:	6a e0       	ldi	r22, 0x0A	; 10
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				displayUserInfo(setKi);
    129c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <setKi>
    12a0:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <setKi+0x1>
    12a4:	0e 94 90 07 	call	0xf20	; 0xf20 <displayUserInfo>
    12a8:	8f ef       	ldi	r24, 0xFF	; 255
    12aa:	94 e3       	ldi	r25, 0x34	; 52
    12ac:	2c e0       	ldi	r18, 0x0C	; 12
    12ae:	81 50       	subi	r24, 0x01	; 1
    12b0:	90 40       	sbci	r25, 0x00	; 0
    12b2:	20 40       	sbci	r18, 0x00	; 0
    12b4:	e1 f7       	brne	.-8      	; 0x12ae <keyEventExecute+0x246>
    12b6:	00 c0       	rjmp	.+0      	; 0x12b8 <keyEventExecute+0x250>
    12b8:	00 00       	nop
				_delay_ms(250);
			}
			
			else if(IS_KEY_DEC_PRESSED)
			{
				fcntSpeedInc = 0;
    12ba:	20 e0       	ldi	r18, 0x00	; 0
				LCD_location(1,10);
				displayUserInfo(setKi);
				_delay_ms(250);
			}
			
			if(IS_KEY_INC_RELEASED)
    12bc:	ca 99       	sbic	0x19, 2	; 25
			fcntSpeedInc = 0;
    12be:	20 e0       	ldi	r18, 0x00	; 0
			
			if(IS_KEY_DEC_RELEASED)
    12c0:	cb 99       	sbic	0x19, 3	; 25
			fcntSpeedDec = 0;
    12c2:	c0 e0       	ldi	r28, 0x00	; 0
		
		LCD_location(1,1);
		LCD_write_string("Gain I = ");
		displayUserInfo(setKi);
		
		while(IS_KEY_PROG_RELEASED)
    12c4:	c9 99       	sbic	0x19, 1	; 25
    12c6:	9e cf       	rjmp	.-196    	; 0x1204 <keyEventExecute+0x19c>
			
			if(IS_KEY_DEC_RELEASED)
			fcntSpeedDec = 0;
		}
		
		eeprom_write_word(EEPROM_K_I_ADD, setKi);
    12c8:	60 91 e3 00 	lds	r22, 0x00E3	; 0x8000e3 <setKi>
    12cc:	70 91 e4 00 	lds	r23, 0x00E4	; 0x8000e4 <setKi+0x1>
    12d0:	8a ea       	ldi	r24, 0xAA	; 170
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	0e 94 4a 12 	call	0x2494	; 0x2494 <eeprom_write_word>
    12d8:	8f ef       	ldi	r24, 0xFF	; 255
    12da:	94 e3       	ldi	r25, 0x34	; 52
    12dc:	2c e0       	ldi	r18, 0x0C	; 12
    12de:	81 50       	subi	r24, 0x01	; 1
    12e0:	90 40       	sbci	r25, 0x00	; 0
    12e2:	20 40       	sbci	r18, 0x00	; 0
    12e4:	e1 f7       	brne	.-8      	; 0x12de <keyEventExecute+0x276>
    12e6:	00 c0       	rjmp	.+0      	; 0x12e8 <keyEventExecute+0x280>
    12e8:	00 00       	nop
		_delay_ms(250);
		while(IS_KEY_PROG_PRESSED);
    12ea:	c9 9b       	sbis	0x19, 1	; 25
    12ec:	fe cf       	rjmp	.-4      	; 0x12ea <keyEventExecute+0x282>
		
		fcntSpeedInc = 0, fcntSpeedDec = 0;
		
		LCD_location(1,1);
    12ee:	61 e0       	ldi	r22, 0x01	; 1
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		LCD_write_string("Gain D = ");
    12f6:	87 e8       	ldi	r24, 0x87	; 135
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
		displayUserInfo(setKd);
    12fe:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <setKd>
    1302:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <setKd+0x1>
    1306:	0e 94 90 07 	call	0xf20	; 0xf20 <displayUserInfo>
		
		eeprom_write_word(EEPROM_K_I_ADD, setKi);
		_delay_ms(250);
		while(IS_KEY_PROG_PRESSED);
		
		fcntSpeedInc = 0, fcntSpeedDec = 0;
    130a:	c0 e0       	ldi	r28, 0x00	; 0
    130c:	20 e0       	ldi	r18, 0x00	; 0
		
		LCD_location(1,1);
		LCD_write_string("Gain D = ");
		displayUserInfo(setKd);
		
		while(IS_KEY_PROG_RELEASED)
    130e:	60 c0       	rjmp	.+192    	; 0x13d0 <keyEventExecute+0x368>
		{
			if(IS_KEY_INC_PRESSED)
    1310:	ca 99       	sbic	0x19, 2	; 25
    1312:	2c c0       	rjmp	.+88     	; 0x136c <keyEventExecute+0x304>
			{
				fcntSpeedDec = 0;
				setKd = setKd + 1 + fcntSpeedInc++;
    1314:	c1 e0       	ldi	r28, 0x01	; 1
    1316:	c2 0f       	add	r28, r18
    1318:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <setKd>
    131c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <setKd+0x1>
    1320:	82 0f       	add	r24, r18
    1322:	91 1d       	adc	r25, r1
    1324:	01 96       	adiw	r24, 0x01	; 1
    1326:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <setKd+0x1>
    132a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <setKd>
				
				if(setKd > K_D_HIGH)
    132e:	85 3f       	cpi	r24, 0xF5	; 245
    1330:	91 40       	sbci	r25, 0x01	; 1
    1332:	30 f0       	brcs	.+12     	; 0x1340 <keyEventExecute+0x2d8>
				setKd = K_D_HIGH;
    1334:	84 ef       	ldi	r24, 0xF4	; 244
    1336:	91 e0       	ldi	r25, 0x01	; 1
    1338:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <setKd+0x1>
    133c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <setKd>
				
				LCD_location(1,10);
    1340:	6a e0       	ldi	r22, 0x0A	; 10
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				displayUserInfo(setKd);
    1348:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <setKd>
    134c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <setKd+0x1>
    1350:	0e 94 90 07 	call	0xf20	; 0xf20 <displayUserInfo>
    1354:	8f ef       	ldi	r24, 0xFF	; 255
    1356:	94 e3       	ldi	r25, 0x34	; 52
    1358:	2c e0       	ldi	r18, 0x0C	; 12
    135a:	81 50       	subi	r24, 0x01	; 1
    135c:	90 40       	sbci	r25, 0x00	; 0
    135e:	20 40       	sbci	r18, 0x00	; 0
    1360:	e1 f7       	brne	.-8      	; 0x135a <keyEventExecute+0x2f2>
    1362:	00 c0       	rjmp	.+0      	; 0x1364 <keyEventExecute+0x2fc>
    1364:	00 00       	nop
		while(IS_KEY_PROG_RELEASED)
		{
			if(IS_KEY_INC_PRESSED)
			{
				fcntSpeedDec = 0;
				setKd = setKd + 1 + fcntSpeedInc++;
    1366:	2c 2f       	mov	r18, r28
		
		while(IS_KEY_PROG_RELEASED)
		{
			if(IS_KEY_INC_PRESSED)
			{
				fcntSpeedDec = 0;
    1368:	c0 e0       	ldi	r28, 0x00	; 0
    136a:	2e c0       	rjmp	.+92     	; 0x13c8 <keyEventExecute+0x360>
				LCD_location(1,10);
				displayUserInfo(setKd);
				_delay_ms(250);
			}
			
			else if(IS_KEY_DEC_PRESSED)
    136c:	cb 99       	sbic	0x19, 3	; 25
    136e:	2c c0       	rjmp	.+88     	; 0x13c8 <keyEventExecute+0x360>
			{
				fcntSpeedInc = 0;
				if(setKd > (K_D_LOW + 1 + fcntSpeedDec))
    1370:	2c 2f       	mov	r18, r28
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	2f 5f       	subi	r18, 0xFF	; 255
    1376:	3f 4f       	sbci	r19, 0xFF	; 255
    1378:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <setKd>
    137c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <setKd+0x1>
    1380:	28 17       	cp	r18, r24
    1382:	39 07       	cpc	r19, r25
    1384:	48 f4       	brcc	.+18     	; 0x1398 <keyEventExecute+0x330>
				setKd = setKd - 1 - fcntSpeedDec++;
    1386:	8c 1b       	sub	r24, r28
    1388:	91 09       	sbc	r25, r1
    138a:	01 97       	sbiw	r24, 0x01	; 1
    138c:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <setKd+0x1>
    1390:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <setKd>
    1394:	cf 5f       	subi	r28, 0xFF	; 255
    1396:	04 c0       	rjmp	.+8      	; 0x13a0 <keyEventExecute+0x338>
				
				else
				setKi = K_D_LOW;
    1398:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <setKi+0x1>
    139c:	10 92 e3 00 	sts	0x00E3, r1	; 0x8000e3 <setKi>
				
				LCD_location(1,10);
    13a0:	6a e0       	ldi	r22, 0x0A	; 10
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				displayUserInfo(setKd);
    13a8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <setKd>
    13ac:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <setKd+0x1>
    13b0:	0e 94 90 07 	call	0xf20	; 0xf20 <displayUserInfo>
    13b4:	8f ef       	ldi	r24, 0xFF	; 255
    13b6:	94 e3       	ldi	r25, 0x34	; 52
    13b8:	2c e0       	ldi	r18, 0x0C	; 12
    13ba:	81 50       	subi	r24, 0x01	; 1
    13bc:	90 40       	sbci	r25, 0x00	; 0
    13be:	20 40       	sbci	r18, 0x00	; 0
    13c0:	e1 f7       	brne	.-8      	; 0x13ba <keyEventExecute+0x352>
    13c2:	00 c0       	rjmp	.+0      	; 0x13c4 <keyEventExecute+0x35c>
    13c4:	00 00       	nop
				_delay_ms(250);
			}
			
			else if(IS_KEY_DEC_PRESSED)
			{
				fcntSpeedInc = 0;
    13c6:	20 e0       	ldi	r18, 0x00	; 0
				LCD_location(1,10);
				displayUserInfo(setKd);
				_delay_ms(250);
			}
			
			if(IS_KEY_INC_RELEASED)
    13c8:	ca 99       	sbic	0x19, 2	; 25
			fcntSpeedInc = 0;
    13ca:	20 e0       	ldi	r18, 0x00	; 0
			
			if(IS_KEY_DEC_RELEASED)
    13cc:	cb 99       	sbic	0x19, 3	; 25
			fcntSpeedDec = 0;
    13ce:	c0 e0       	ldi	r28, 0x00	; 0
		
		LCD_location(1,1);
		LCD_write_string("Gain D = ");
		displayUserInfo(setKd);
		
		while(IS_KEY_PROG_RELEASED)
    13d0:	c9 99       	sbic	0x19, 1	; 25
    13d2:	9e cf       	rjmp	.-196    	; 0x1310 <keyEventExecute+0x2a8>
			
			if(IS_KEY_DEC_RELEASED)
			fcntSpeedDec = 0;
		}
		
		eeprom_write_word(EEPROM_K_D_ADD, setKd);
    13d4:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <setKd>
    13d8:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <setKd+0x1>
    13dc:	8e eb       	ldi	r24, 0xBE	; 190
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	0e 94 4a 12 	call	0x2494	; 0x2494 <eeprom_write_word>
    13e4:	8f ef       	ldi	r24, 0xFF	; 255
    13e6:	94 e3       	ldi	r25, 0x34	; 52
    13e8:	2c e0       	ldi	r18, 0x0C	; 12
    13ea:	81 50       	subi	r24, 0x01	; 1
    13ec:	90 40       	sbci	r25, 0x00	; 0
    13ee:	20 40       	sbci	r18, 0x00	; 0
    13f0:	e1 f7       	brne	.-8      	; 0x13ea <keyEventExecute+0x382>
    13f2:	00 c0       	rjmp	.+0      	; 0x13f4 <keyEventExecute+0x38c>
    13f4:	00 00       	nop
		_delay_ms(250);
		while(IS_KEY_PROG_PRESSED);
    13f6:	c9 9b       	sbis	0x19, 1	; 25
    13f8:	fe cf       	rjmp	.-4      	; 0x13f6 <keyEventExecute+0x38e>
		
		LCD_Clear();
    13fa:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_Clear>
		
		 if(flagDebugMode)
    13fe:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <flagDebugMode>
    1402:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <flagDebugMode+0x1>
    1406:	89 2b       	or	r24, r25
    1408:	e9 f0       	breq	.+58     	; 0x1444 <keyEventExecute+0x3dc>
		 {
			 LCD_location(1,1);
    140a:	61 e0       	ldi	r22, 0x01	; 1
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
			 LCD_write_string("         = ");
    1412:	81 e9       	ldi	r24, 0x91	; 145
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
			 LCD_showvalue(currTemp);
    141a:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <currTemp>
    141e:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <currTemp+0x1>
    1422:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_showvalue>
			 LCD_location(2,1);
    1426:	61 e0       	ldi	r22, 0x01	; 1
    1428:	82 e0       	ldi	r24, 0x02	; 2
    142a:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
			 LCD_write_string("         = ");
    142e:	81 e9       	ldi	r24, 0x91	; 145
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
			 LCD_showvalue(setTemp);
    1436:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    143a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    143e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_showvalue>
    1442:	4d c1       	rjmp	.+666    	; 0x16de <keyEventExecute+0x676>
		 }
		 else
		 {
			LCD_location(1,1);
    1444:	61 e0       	ldi	r22, 0x01	; 1
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
			LCD_write_string("Cur Temp = ");
    144c:	8d e9       	ldi	r24, 0x9D	; 157
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
			LCD_showvalue(currTemp);
    1454:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <currTemp>
    1458:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <currTemp+0x1>
    145c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_showvalue>
			LCD_location(2,1);
    1460:	61 e0       	ldi	r22, 0x01	; 1
    1462:	82 e0       	ldi	r24, 0x02	; 2
    1464:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
			LCD_write_string("Set Temp = ");
    1468:	89 ea       	ldi	r24, 0xA9	; 169
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
			LCD_showvalue(setTemp);
    1470:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1474:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1478:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_showvalue>
    147c:	30 c1       	rjmp	.+608    	; 0x16de <keyEventExecute+0x676>
		 }
	}
	
	else if(IS_KEY_PROG_PRESSED)
    147e:	c9 99       	sbic	0x19, 1	; 25
    1480:	b0 c0       	rjmp	.+352    	; 0x15e2 <keyEventExecute+0x57a>
	{
		timer0_stop();
    1482:	0e 94 77 01 	call	0x2ee	; 0x2ee <timer0_stop>
		timer1_stop();
    1486:	0e 94 9d 01 	call	0x33a	; 0x33a <timer1_stop>
    148a:	8f ef       	ldi	r24, 0xFF	; 255
    148c:	90 e7       	ldi	r25, 0x70	; 112
    148e:	22 e0       	ldi	r18, 0x02	; 2
    1490:	81 50       	subi	r24, 0x01	; 1
    1492:	90 40       	sbci	r25, 0x00	; 0
    1494:	20 40       	sbci	r18, 0x00	; 0
    1496:	e1 f7       	brne	.-8      	; 0x1490 <keyEventExecute+0x428>
    1498:	00 c0       	rjmp	.+0      	; 0x149a <keyEventExecute+0x432>
    149a:	00 00       	nop
		_delay_ms(50);
		
		while(!IS_KEY_PROG_RELEASED);
    149c:	c9 9b       	sbis	0x19, 1	; 25
    149e:	fe cf       	rjmp	.-4      	; 0x149c <keyEventExecute+0x434>
		
		LCD_location(2,12);
    14a0:	6c e0       	ldi	r22, 0x0C	; 12
    14a2:	82 e0       	ldi	r24, 0x02	; 2
    14a4:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		displayUserInfo(setTemp);
    14a8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    14ac:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    14b0:	0e 94 90 07 	call	0xf20	; 0xf20 <displayUserInfo>
		LCD_location(2,16);
    14b4:	60 e1       	ldi	r22, 0x10	; 16
    14b6:	82 e0       	ldi	r24, 0x02	; 2
    14b8:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		LCD_write('<');
    14bc:	8c e3       	ldi	r24, 0x3C	; 60
    14be:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
				
		uint8_t fcntSpeedInc = 0, fcntSpeedDec = 0;
    14c2:	c0 e0       	ldi	r28, 0x00	; 0
    14c4:	20 e0       	ldi	r18, 0x00	; 0
		
		while(IS_KEY_ENTER_RELEASED)
    14c6:	70 c0       	rjmp	.+224    	; 0x15a8 <keyEventExecute+0x540>
		{
			if(IS_KEY_INC_PRESSED)
    14c8:	ca 99       	sbic	0x19, 2	; 25
    14ca:	33 c0       	rjmp	.+102    	; 0x1532 <keyEventExecute+0x4ca>
			{
				fcntSpeedDec = 0;
				setTemp = setTemp + 1 + fcntSpeedInc++;
    14cc:	c1 e0       	ldi	r28, 0x01	; 1
    14ce:	c2 0f       	add	r28, r18
    14d0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    14d4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    14d8:	82 0f       	add	r24, r18
    14da:	91 1d       	adc	r25, r1
    14dc:	01 96       	adiw	r24, 0x01	; 1
    14de:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    14e2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				
				if(setTemp > TEMP_HIGH)
    14e6:	83 3c       	cpi	r24, 0xC3	; 195
    14e8:	91 40       	sbci	r25, 0x01	; 1
    14ea:	30 f0       	brcs	.+12     	; 0x14f8 <keyEventExecute+0x490>
				setTemp = TEMP_HIGH;
    14ec:	82 ec       	ldi	r24, 0xC2	; 194
    14ee:	91 e0       	ldi	r25, 0x01	; 1
    14f0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    14f4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				
				LCD_location(2,12);
    14f8:	6c e0       	ldi	r22, 0x0C	; 12
    14fa:	82 e0       	ldi	r24, 0x02	; 2
    14fc:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				displayUserInfo(setTemp);
    1500:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1504:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1508:	0e 94 90 07 	call	0xf20	; 0xf20 <displayUserInfo>
				LCD_location(2,16);
    150c:	60 e1       	ldi	r22, 0x10	; 16
    150e:	82 e0       	ldi	r24, 0x02	; 2
    1510:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				LCD_write('<');
    1514:	8c e3       	ldi	r24, 0x3C	; 60
    1516:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
    151a:	8f ef       	ldi	r24, 0xFF	; 255
    151c:	94 e3       	ldi	r25, 0x34	; 52
    151e:	2c e0       	ldi	r18, 0x0C	; 12
    1520:	81 50       	subi	r24, 0x01	; 1
    1522:	90 40       	sbci	r25, 0x00	; 0
    1524:	20 40       	sbci	r18, 0x00	; 0
    1526:	e1 f7       	brne	.-8      	; 0x1520 <keyEventExecute+0x4b8>
    1528:	00 c0       	rjmp	.+0      	; 0x152a <keyEventExecute+0x4c2>
    152a:	00 00       	nop
		while(IS_KEY_ENTER_RELEASED)
		{
			if(IS_KEY_INC_PRESSED)
			{
				fcntSpeedDec = 0;
				setTemp = setTemp + 1 + fcntSpeedInc++;
    152c:	2c 2f       	mov	r18, r28
		
		while(IS_KEY_ENTER_RELEASED)
		{
			if(IS_KEY_INC_PRESSED)
			{
				fcntSpeedDec = 0;
    152e:	c0 e0       	ldi	r28, 0x00	; 0
    1530:	37 c0       	rjmp	.+110    	; 0x15a0 <keyEventExecute+0x538>
				LCD_location(2,16);
				LCD_write('<');
				_delay_ms(250);
			}
			
			else if(IS_KEY_DEC_PRESSED)
    1532:	cb 99       	sbic	0x19, 3	; 25
    1534:	35 c0       	rjmp	.+106    	; 0x15a0 <keyEventExecute+0x538>
			{
				fcntSpeedInc = 0;
				if(setTemp > (TEMP_LOW + 1 + fcntSpeedDec))
    1536:	2c 2f       	mov	r18, r28
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	29 56       	subi	r18, 0x69	; 105
    153c:	3f 4f       	sbci	r19, 0xFF	; 255
    153e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1542:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1546:	28 17       	cp	r18, r24
    1548:	39 07       	cpc	r19, r25
    154a:	48 f4       	brcc	.+18     	; 0x155e <keyEventExecute+0x4f6>
				setTemp = setTemp - 1 - fcntSpeedDec++;
    154c:	8c 1b       	sub	r24, r28
    154e:	91 09       	sbc	r25, r1
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1556:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    155a:	cf 5f       	subi	r28, 0xFF	; 255
    155c:	06 c0       	rjmp	.+12     	; 0x156a <keyEventExecute+0x502>
				
				else
				setTemp = TEMP_LOW;
    155e:	86 e9       	ldi	r24, 0x96	; 150
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1566:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				
				LCD_location(2,12);
    156a:	6c e0       	ldi	r22, 0x0C	; 12
    156c:	82 e0       	ldi	r24, 0x02	; 2
    156e:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				displayUserInfo(setTemp);
    1572:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1576:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    157a:	0e 94 90 07 	call	0xf20	; 0xf20 <displayUserInfo>
				LCD_location(2,16);
    157e:	60 e1       	ldi	r22, 0x10	; 16
    1580:	82 e0       	ldi	r24, 0x02	; 2
    1582:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				LCD_write('<');
    1586:	8c e3       	ldi	r24, 0x3C	; 60
    1588:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
    158c:	8f ef       	ldi	r24, 0xFF	; 255
    158e:	94 e3       	ldi	r25, 0x34	; 52
    1590:	2c e0       	ldi	r18, 0x0C	; 12
    1592:	81 50       	subi	r24, 0x01	; 1
    1594:	90 40       	sbci	r25, 0x00	; 0
    1596:	20 40       	sbci	r18, 0x00	; 0
    1598:	e1 f7       	brne	.-8      	; 0x1592 <keyEventExecute+0x52a>
    159a:	00 c0       	rjmp	.+0      	; 0x159c <keyEventExecute+0x534>
    159c:	00 00       	nop
				_delay_ms(250);
			}
			
			else if(IS_KEY_DEC_PRESSED)
			{
				fcntSpeedInc = 0;
    159e:	20 e0       	ldi	r18, 0x00	; 0
				LCD_location(2,16);
				LCD_write('<');
				_delay_ms(250);
			}
			
			if(IS_KEY_INC_RELEASED)
    15a0:	ca 99       	sbic	0x19, 2	; 25
			fcntSpeedInc = 0;
    15a2:	20 e0       	ldi	r18, 0x00	; 0
			
			if(IS_KEY_DEC_RELEASED)
    15a4:	cb 99       	sbic	0x19, 3	; 25
			fcntSpeedDec = 0;
    15a6:	c0 e0       	ldi	r28, 0x00	; 0
		LCD_location(2,16);
		LCD_write('<');
				
		uint8_t fcntSpeedInc = 0, fcntSpeedDec = 0;
		
		while(IS_KEY_ENTER_RELEASED)
    15a8:	cc 99       	sbic	0x19, 4	; 25
    15aa:	8e cf       	rjmp	.-228    	; 0x14c8 <keyEventExecute+0x460>
			
			if(IS_KEY_DEC_RELEASED)
			fcntSpeedDec = 0;
		}
		
		eeprom_write_word(EEPROM_TEMP_ADD, setTemp);
    15ac:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    15b0:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    15b4:	82 e8       	ldi	r24, 0x82	; 130
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	0e 94 4a 12 	call	0x2494	; 0x2494 <eeprom_write_word>
    15bc:	8f ef       	ldi	r24, 0xFF	; 255
    15be:	90 e7       	ldi	r25, 0x70	; 112
    15c0:	22 e0       	ldi	r18, 0x02	; 2
    15c2:	81 50       	subi	r24, 0x01	; 1
    15c4:	90 40       	sbci	r25, 0x00	; 0
    15c6:	20 40       	sbci	r18, 0x00	; 0
    15c8:	e1 f7       	brne	.-8      	; 0x15c2 <keyEventExecute+0x55a>
    15ca:	00 c0       	rjmp	.+0      	; 0x15cc <keyEventExecute+0x564>
    15cc:	00 00       	nop
		_delay_ms(50);
		while(IS_KEY_ENTER_PRESSED);
    15ce:	cc 9b       	sbis	0x19, 4	; 25
    15d0:	fe cf       	rjmp	.-4      	; 0x15ce <keyEventExecute+0x566>
		
		LCD_location(2,16);
    15d2:	60 e1       	ldi	r22, 0x10	; 16
    15d4:	82 e0       	ldi	r24, 0x02	; 2
    15d6:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		LCD_write(' ');
    15da:	80 e2       	ldi	r24, 0x20	; 32
    15dc:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
    15e0:	7e c0       	rjmp	.+252    	; 0x16de <keyEventExecute+0x676>
	}
	
	else if(IS_KEY_PROG_PRESSED)
    15e2:	c9 99       	sbic	0x19, 1	; 25
    15e4:	7c c0       	rjmp	.+248    	; 0x16de <keyEventExecute+0x676>
	{
		long timeOut = milli();
    15e6:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <milli>
    15ea:	6b 01       	movw	r12, r22
    15ec:	7c 01       	movw	r14, r24
    15ee:	8f ef       	ldi	r24, 0xFF	; 255
    15f0:	90 e7       	ldi	r25, 0x70	; 112
    15f2:	22 e0       	ldi	r18, 0x02	; 2
    15f4:	81 50       	subi	r24, 0x01	; 1
    15f6:	90 40       	sbci	r25, 0x00	; 0
    15f8:	20 40       	sbci	r18, 0x00	; 0
    15fa:	e1 f7       	brne	.-8      	; 0x15f4 <keyEventExecute+0x58c>
    15fc:	00 c0       	rjmp	.+0      	; 0x15fe <keyEventExecute+0x596>
    15fe:	00 00       	nop
		
		_delay_ms(50);
		
		while(!IS_KEY_PROG_RELEASED);
    1600:	c9 9b       	sbis	0x19, 1	; 25
    1602:	fe cf       	rjmp	.-4      	; 0x1600 <keyEventExecute+0x598>
	
		if(timeOut >= milli() + UPDATE_TIME)
    1604:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <milli>
    1608:	dc 01       	movw	r26, r24
    160a:	cb 01       	movw	r24, r22
    160c:	88 57       	subi	r24, 0x78	; 120
    160e:	9c 4e       	sbci	r25, 0xEC	; 236
    1610:	af 4f       	sbci	r26, 0xFF	; 255
    1612:	bf 4f       	sbci	r27, 0xFF	; 255
    1614:	c8 16       	cp	r12, r24
    1616:	d9 06       	cpc	r13, r25
    1618:	ea 06       	cpc	r14, r26
    161a:	fb 06       	cpc	r15, r27
    161c:	0c f4       	brge	.+2      	; 0x1620 <keyEventExecute+0x5b8>
    161e:	5f c0       	rjmp	.+190    	; 0x16de <keyEventExecute+0x676>
		{
			if(flagDebugMode == 0)
    1620:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <flagDebugMode>
    1624:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <flagDebugMode+0x1>
    1628:	89 2b       	or	r24, r25
    162a:	59 f5       	brne	.+86     	; 0x1682 <keyEventExecute+0x61a>
			{
				flagDebugMode = 1;
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <flagDebugMode+0x1>
    1634:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <flagDebugMode>
				eeprom_write_word(EEPROM_DEBUG_ADD, flagDebugMode);
    1638:	60 91 de 00 	lds	r22, 0x00DE	; 0x8000de <flagDebugMode>
    163c:	70 91 df 00 	lds	r23, 0x00DF	; 0x8000df <flagDebugMode+0x1>
    1640:	82 ed       	ldi	r24, 0xD2	; 210
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	0e 94 4a 12 	call	0x2494	; 0x2494 <eeprom_write_word>
				LCD_location(1,1);
    1648:	61 e0       	ldi	r22, 0x01	; 1
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				LCD_write_string("         = ");
    1650:	81 e9       	ldi	r24, 0x91	; 145
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
				LCD_showvalue(currTemp);
    1658:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <currTemp>
    165c:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <currTemp+0x1>
    1660:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_showvalue>
				LCD_location(2,1);
    1664:	61 e0       	ldi	r22, 0x01	; 1
    1666:	82 e0       	ldi	r24, 0x02	; 2
    1668:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				LCD_write_string("         = ");
    166c:	81 e9       	ldi	r24, 0x91	; 145
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
				LCD_showvalue(setTemp);
    1674:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1678:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    167c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_showvalue>
    1680:	2e c0       	rjmp	.+92     	; 0x16de <keyEventExecute+0x676>
			
			}
		
			else if(flagDebugMode == 0)
    1682:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <flagDebugMode>
    1686:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <flagDebugMode+0x1>
    168a:	89 2b       	or	r24, r25
    168c:	41 f5       	brne	.+80     	; 0x16de <keyEventExecute+0x676>
			{
				flagDebugMode = 0;
    168e:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <flagDebugMode+0x1>
    1692:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <flagDebugMode>
				eeprom_write_word(EEPROM_DEBUG_ADD, flagDebugMode);
    1696:	60 91 de 00 	lds	r22, 0x00DE	; 0x8000de <flagDebugMode>
    169a:	70 91 df 00 	lds	r23, 0x00DF	; 0x8000df <flagDebugMode+0x1>
    169e:	82 ed       	ldi	r24, 0xD2	; 210
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	0e 94 4a 12 	call	0x2494	; 0x2494 <eeprom_write_word>
				LCD_location(1,1);
    16a6:	61 e0       	ldi	r22, 0x01	; 1
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				LCD_write_string("Cur Temp = ");
    16ae:	8d e9       	ldi	r24, 0x9D	; 157
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
				LCD_showvalue(currTemp);
    16b6:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <currTemp>
    16ba:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <currTemp+0x1>
    16be:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_showvalue>
				LCD_location(2,1);
    16c2:	61 e0       	ldi	r22, 0x01	; 1
    16c4:	82 e0       	ldi	r24, 0x02	; 2
    16c6:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				LCD_write_string("Set Temp = ");
    16ca:	89 ea       	ldi	r24, 0xA9	; 169
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
				LCD_showvalue(setTemp);			
    16d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    16d6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    16da:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_showvalue>
			}
		}
	}
}
    16de:	cf 91       	pop	r28
    16e0:	ff 90       	pop	r15
    16e2:	ef 90       	pop	r14
    16e4:	df 90       	pop	r13
    16e6:	cf 90       	pop	r12
    16e8:	08 95       	ret

000016ea <eeprom_init>:
void eeprom_init(void)
{
    16ea:	cf 93       	push	r28
    16ec:	df 93       	push	r29
	if((eeprom_read_word(EEPROM_CHECKSUM_ADD)) == EEPROM_CHECKSUM)
    16ee:	8e e6       	ldi	r24, 0x6E	; 110
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	0e 94 44 12 	call	0x2488	; 0x2488 <eeprom_read_word>
    16f6:	85 3c       	cpi	r24, 0xC5	; 197
    16f8:	9d 41       	sbci	r25, 0x1D	; 29
    16fa:	09 f0       	breq	.+2      	; 0x16fe <eeprom_init+0x14>
    16fc:	8d c0       	rjmp	.+282    	; 0x1818 <eeprom_init+0x12e>
	{
		setTemp = eeprom_read_word(EEPROM_TEMP_ADD);
    16fe:	82 e8       	ldi	r24, 0x82	; 130
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	0e 94 44 12 	call	0x2488	; 0x2488 <eeprom_read_word>
    1706:	ec 01       	movw	r28, r24
    1708:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    170c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		setKp = eeprom_read_word(EEPROM_K_P_ADD);
    1710:	86 e9       	ldi	r24, 0x96	; 150
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	0e 94 44 12 	call	0x2488	; 0x2488 <eeprom_read_word>
    1718:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <setKp+0x1>
    171c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <setKp>
		setKi = eeprom_read_word(EEPROM_K_I_ADD);
    1720:	8a ea       	ldi	r24, 0xAA	; 170
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	0e 94 44 12 	call	0x2488	; 0x2488 <eeprom_read_word>
    1728:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <setKi+0x1>
    172c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <setKi>
		setKd = eeprom_read_word(EEPROM_K_D_ADD);
    1730:	8e eb       	ldi	r24, 0xBE	; 190
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	0e 94 44 12 	call	0x2488	; 0x2488 <eeprom_read_word>
    1738:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <setKd+0x1>
    173c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <setKd>
		flagDebugMode = eeprom_read_word(EEPROM_DEBUG_ADD);
    1740:	82 ed       	ldi	r24, 0xD2	; 210
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	0e 94 44 12 	call	0x2488	; 0x2488 <eeprom_read_word>
    1748:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <flagDebugMode+0x1>
    174c:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <flagDebugMode>

		if((setTemp < TEMP_LOW) || (setTemp > TEMP_HIGH))
    1750:	c6 59       	subi	r28, 0x96	; 150
    1752:	d1 09       	sbc	r29, r1
    1754:	cd 32       	cpi	r28, 0x2D	; 45
    1756:	d1 40       	sbci	r29, 0x01	; 1
    1758:	60 f0       	brcs	.+24     	; 0x1772 <eeprom_init+0x88>
		{
			setTemp = TEMP_DEFAULT;
    175a:	8d e1       	ldi	r24, 0x1D	; 29
    175c:	91 e0       	ldi	r25, 0x01	; 1
    175e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1762:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			eeprom_write_word(EEPROM_TEMP_ADD, setTemp);
    1766:	6d e1       	ldi	r22, 0x1D	; 29
    1768:	71 e0       	ldi	r23, 0x01	; 1
    176a:	82 e8       	ldi	r24, 0x82	; 130
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	0e 94 4a 12 	call	0x2494	; 0x2494 <eeprom_write_word>
		}
		
		if((setKp < K_P_LOW) || (setKp > K_P_HIGH))
    1772:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <setKp>
    1776:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <setKp+0x1>
    177a:	0a 97       	sbiw	r24, 0x0a	; 10
    177c:	83 34       	cpi	r24, 0x43	; 67
    177e:	9d 41       	sbci	r25, 0x1D	; 29
    1780:	60 f0       	brcs	.+24     	; 0x179a <eeprom_init+0xb0>
		{
			setKp = K_P_DEFAULT;
    1782:	8c ed       	ldi	r24, 0xDC	; 220
    1784:	95 e0       	ldi	r25, 0x05	; 5
    1786:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <setKp+0x1>
    178a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <setKp>
			eeprom_write_word(EEPROM_K_P_ADD, setKp);
    178e:	6c ed       	ldi	r22, 0xDC	; 220
    1790:	75 e0       	ldi	r23, 0x05	; 5
    1792:	86 e9       	ldi	r24, 0x96	; 150
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	0e 94 4a 12 	call	0x2494	; 0x2494 <eeprom_write_word>
		}
		
		if((setKi < K_I_LOW) || (setKi > K_I_HIGH))
    179a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <setKi>
    179e:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <setKi+0x1>
    17a2:	85 3f       	cpi	r24, 0xF5	; 245
    17a4:	91 40       	sbci	r25, 0x01	; 1
    17a6:	50 f0       	brcs	.+20     	; 0x17bc <eeprom_init+0xd2>
		{
			setKi = K_I_DEFAULT;
    17a8:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <setKi+0x1>
    17ac:	10 92 e3 00 	sts	0x00E3, r1	; 0x8000e3 <setKi>
			eeprom_write_word(EEPROM_K_I_ADD, setKi);
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	70 e0       	ldi	r23, 0x00	; 0
    17b4:	8a ea       	ldi	r24, 0xAA	; 170
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	0e 94 4a 12 	call	0x2494	; 0x2494 <eeprom_write_word>
		}
		
		if((setKd < K_D_LOW) || (setKd > K_D_HIGH))
    17bc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <setKd>
    17c0:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <setKd+0x1>
    17c4:	85 3f       	cpi	r24, 0xF5	; 245
    17c6:	91 40       	sbci	r25, 0x01	; 1
    17c8:	60 f0       	brcs	.+24     	; 0x17e2 <eeprom_init+0xf8>
		{
			setKd = K_D_DEFAULT;
    17ca:	85 e0       	ldi	r24, 0x05	; 5
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <setKd+0x1>
    17d2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <setKd>
			eeprom_write_word(EEPROM_K_D_ADD, setKd);
    17d6:	65 e0       	ldi	r22, 0x05	; 5
    17d8:	70 e0       	ldi	r23, 0x00	; 0
    17da:	8e eb       	ldi	r24, 0xBE	; 190
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	0e 94 4a 12 	call	0x2494	; 0x2494 <eeprom_write_word>
		}
		
		if((flagDebugMode != 0) && (flagDebugMode != 1))
    17e2:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <flagDebugMode>
    17e6:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <flagDebugMode+0x1>
    17ea:	89 2b       	or	r24, r25
    17ec:	09 f4       	brne	.+2      	; 0x17f0 <eeprom_init+0x106>
    17ee:	54 c0       	rjmp	.+168    	; 0x1898 <eeprom_init+0x1ae>
    17f0:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <flagDebugMode>
    17f4:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <flagDebugMode+0x1>
    17f8:	01 97       	sbiw	r24, 0x01	; 1
    17fa:	09 f4       	brne	.+2      	; 0x17fe <eeprom_init+0x114>
    17fc:	4d c0       	rjmp	.+154    	; 0x1898 <eeprom_init+0x1ae>
		{
			flagDebugMode = 0;
    17fe:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <flagDebugMode+0x1>
    1802:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <flagDebugMode>
			eeprom_write_word(EEPROM_DEBUG_ADD, flagDebugMode);
    1806:	60 91 de 00 	lds	r22, 0x00DE	; 0x8000de <flagDebugMode>
    180a:	70 91 df 00 	lds	r23, 0x00DF	; 0x8000df <flagDebugMode+0x1>
    180e:	82 ed       	ldi	r24, 0xD2	; 210
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	0e 94 4a 12 	call	0x2494	; 0x2494 <eeprom_write_word>
    1816:	40 c0       	rjmp	.+128    	; 0x1898 <eeprom_init+0x1ae>
		
	}
	
	else
	{
		setTemp = TEMP_DEFAULT;
    1818:	8d e1       	ldi	r24, 0x1D	; 29
    181a:	91 e0       	ldi	r25, 0x01	; 1
    181c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1820:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		eeprom_write_word(EEPROM_TEMP_ADD, setTemp);
    1824:	6d e1       	ldi	r22, 0x1D	; 29
    1826:	71 e0       	ldi	r23, 0x01	; 1
    1828:	82 e8       	ldi	r24, 0x82	; 130
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	0e 94 4a 12 	call	0x2494	; 0x2494 <eeprom_write_word>
		
		setKp = K_P_DEFAULT;
    1830:	8c ed       	ldi	r24, 0xDC	; 220
    1832:	95 e0       	ldi	r25, 0x05	; 5
    1834:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <setKp+0x1>
    1838:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <setKp>
		eeprom_write_word(EEPROM_K_P_ADD, setKp);
    183c:	6c ed       	ldi	r22, 0xDC	; 220
    183e:	75 e0       	ldi	r23, 0x05	; 5
    1840:	86 e9       	ldi	r24, 0x96	; 150
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	0e 94 4a 12 	call	0x2494	; 0x2494 <eeprom_write_word>
		
		setKi = K_I_DEFAULT;
    1848:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <setKi+0x1>
    184c:	10 92 e3 00 	sts	0x00E3, r1	; 0x8000e3 <setKi>
		eeprom_write_word(EEPROM_K_I_ADD, setKi);
    1850:	60 e0       	ldi	r22, 0x00	; 0
    1852:	70 e0       	ldi	r23, 0x00	; 0
    1854:	8a ea       	ldi	r24, 0xAA	; 170
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	0e 94 4a 12 	call	0x2494	; 0x2494 <eeprom_write_word>
		
		setKd = K_D_DEFAULT;
    185c:	85 e0       	ldi	r24, 0x05	; 5
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <setKd+0x1>
    1864:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <setKd>
		eeprom_write_word(EEPROM_K_D_ADD, setKd);
    1868:	65 e0       	ldi	r22, 0x05	; 5
    186a:	70 e0       	ldi	r23, 0x00	; 0
    186c:	8e eb       	ldi	r24, 0xBE	; 190
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	0e 94 4a 12 	call	0x2494	; 0x2494 <eeprom_write_word>
		
		flagDebugMode = 0;		
    1874:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <flagDebugMode+0x1>
    1878:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <flagDebugMode>
		eeprom_write_word(EEPROM_DEBUG_ADD, flagDebugMode);
    187c:	60 91 de 00 	lds	r22, 0x00DE	; 0x8000de <flagDebugMode>
    1880:	70 91 df 00 	lds	r23, 0x00DF	; 0x8000df <flagDebugMode+0x1>
    1884:	82 ed       	ldi	r24, 0xD2	; 210
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	0e 94 4a 12 	call	0x2494	; 0x2494 <eeprom_write_word>
		
		eeprom_write_word(EEPROM_CHECKSUM_ADD, EEPROM_CHECKSUM);
    188c:	65 ec       	ldi	r22, 0xC5	; 197
    188e:	7d e1       	ldi	r23, 0x1D	; 29
    1890:	8e e6       	ldi	r24, 0x6E	; 110
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	0e 94 4a 12 	call	0x2494	; 0x2494 <eeprom_write_word>
	}
}
    1898:	df 91       	pop	r29
    189a:	cf 91       	pop	r28
    189c:	08 95       	ret

0000189e <main>:
    189e:	2f ef       	ldi	r18, 0xFF	; 255
    18a0:	80 e7       	ldi	r24, 0x70	; 112
    18a2:	92 e0       	ldi	r25, 0x02	; 2
    18a4:	21 50       	subi	r18, 0x01	; 1
    18a6:	80 40       	sbci	r24, 0x00	; 0
    18a8:	90 40       	sbci	r25, 0x00	; 0
    18aa:	e1 f7       	brne	.-8      	; 0x18a4 <main+0x6>
    18ac:	00 c0       	rjmp	.+0      	; 0x18ae <main+0x10>
    18ae:	00 00       	nop
float lastcurrentPoint = 0.00;
extern uint8_t flg;
int main(void)
{
	_delay_ms(50);
	KEY_INIT;
    18b0:	8a b3       	in	r24, 0x1a	; 26
    18b2:	81 7e       	andi	r24, 0xE1	; 225
    18b4:	8a bb       	out	0x1a, r24	; 26
	KEY_PULLUP_INIT;
    18b6:	8b b3       	in	r24, 0x1b	; 27
    18b8:	8e 61       	ori	r24, 0x1E	; 30
    18ba:	8b bb       	out	0x1b, r24	; 27

	eeprom_init();
    18bc:	0e 94 75 0b 	call	0x16ea	; 0x16ea <eeprom_init>
  
	 while(USART_init(115200) == USART_ERROR);
    18c0:	60 e0       	ldi	r22, 0x00	; 0
    18c2:	72 ec       	ldi	r23, 0xC2	; 194
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <USART_init>
    18cc:	88 23       	and	r24, r24
    18ce:	c1 f3       	breq	.-16     	; 0x18c0 <main+0x22>
  	 
	 LCD_Init();
    18d0:	0e 94 88 00 	call	0x110	; 0x110 <LCD_Init>
	 
	 if(flagDebugMode)
    18d4:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <flagDebugMode>
    18d8:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <flagDebugMode+0x1>
    18dc:	89 2b       	or	r24, r25
    18de:	e9 f0       	breq	.+58     	; 0x191a <main+0x7c>
	 {
		 LCD_location(1,1);
    18e0:	61 e0       	ldi	r22, 0x01	; 1
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		 LCD_write_string("         = ");
    18e8:	81 e9       	ldi	r24, 0x91	; 145
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
		 LCD_showvalue(setTemp);
    18f0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    18f4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    18f8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_showvalue>
		 LCD_location(2,1);
    18fc:	61 e0       	ldi	r22, 0x01	; 1
    18fe:	82 e0       	ldi	r24, 0x02	; 2
    1900:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		 LCD_write_string("         = ");
    1904:	81 e9       	ldi	r24, 0x91	; 145
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
		 LCD_showvalue(setTemp);
    190c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1910:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1914:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_showvalue>
    1918:	34 c0       	rjmp	.+104    	; 0x1982 <main+0xe4>
	 }
	 else
	 {
		LCD_location(1,1);
    191a:	61 e0       	ldi	r22, 0x01	; 1
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		LCD_write_string("         =");
    1922:	85 eb       	ldi	r24, 0xB5	; 181
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
		LCD_location(1,1);
    192a:	61 e0       	ldi	r22, 0x01	; 1
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		LCD_write_string("Cur Temp");
    1932:	80 ec       	ldi	r24, 0xC0	; 192
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
		LCD_location(1,12);
    193a:	6c e0       	ldi	r22, 0x0C	; 12
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		LCD_showvalue(((float) setTemp));
    1942:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1946:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    194a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_showvalue>
		LCD_location(2,1);
    194e:	61 e0       	ldi	r22, 0x01	; 1
    1950:	82 e0       	ldi	r24, 0x02	; 2
    1952:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		LCD_write_string("         =");
    1956:	85 eb       	ldi	r24, 0xB5	; 181
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
		LCD_location(2,1);
    195e:	61 e0       	ldi	r22, 0x01	; 1
    1960:	82 e0       	ldi	r24, 0x02	; 2
    1962:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		LCD_write_string("Set Temp");
    1966:	89 ec       	ldi	r24, 0xC9	; 201
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_write_string>
		LCD_location(2,12);
    196e:	6c e0       	ldi	r22, 0x0C	; 12
    1970:	82 e0       	ldi	r24, 0x02	; 2
    1972:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
		LCD_showvalue(((float) setTemp));
    1976:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    197a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    197e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_showvalue>
	 }
 	 
	 timer0_init();
    1982:	0e 94 69 01 	call	0x2d2	; 0x2d2 <timer0_init>
	 timer1_init();
    1986:	0e 94 7e 01 	call	0x2fc	; 0x2fc <timer1_init>
	 timer2_init();
    198a:	0e 94 a4 01 	call	0x348	; 0x348 <timer2_init>
 	 
	 INTERLOCK_KEY_INIT;
    198e:	87 b3       	in	r24, 0x17	; 23
    1990:	81 60       	ori	r24, 0x01	; 1
    1992:	87 bb       	out	0x17, r24	; 23
	 RED_LED_INIT;
    1994:	87 b3       	in	r24, 0x17	; 23
    1996:	82 60       	ori	r24, 0x02	; 2
    1998:	87 bb       	out	0x17, r24	; 23
	 GREEN_LED_INIT;
    199a:	87 b3       	in	r24, 0x17	; 23
    199c:	84 60       	ori	r24, 0x04	; 4
    199e:	87 bb       	out	0x17, r24	; 23
	 RESET_INTERLOCK_KEY;
    19a0:	88 b3       	in	r24, 0x18	; 24
    19a2:	8e 7f       	andi	r24, 0xFE	; 254
    19a4:	88 bb       	out	0x18, r24	; 24
  	 
	 long pidUpdateTimeout = milli();
    19a6:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <milli>
    19aa:	6b 01       	movw	r12, r22
    19ac:	7c 01       	movw	r14, r24

    /* Replace with your application code */
	
    while (1) 
    {
		if(milli() > pidUpdateTimeout + PID_UPDATE_TIME)
    19ae:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <milli>
    19b2:	97 01       	movw	r18, r14
    19b4:	86 01       	movw	r16, r12
    19b6:	0e 5c       	subi	r16, 0xCE	; 206
    19b8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ba:	2f 4f       	sbci	r18, 0xFF	; 255
    19bc:	3f 4f       	sbci	r19, 0xFF	; 255
    19be:	06 17       	cp	r16, r22
    19c0:	17 07       	cpc	r17, r23
    19c2:	28 07       	cpc	r18, r24
    19c4:	39 07       	cpc	r19, r25
    19c6:	bc f4       	brge	.+46     	; 0x19f6 <main+0x158>
		{
			pidUpdateTimeout = milli();
    19c8:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <milli>
    19cc:	6b 01       	movw	r12, r22
    19ce:	7c 01       	movw	r14, r24
			if(flagTempUpdate)
    19d0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <flagTempUpdate>
    19d4:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <flagTempUpdate+0x1>
    19d8:	89 2b       	or	r24, r25
    19da:	69 f0       	breq	.+26     	; 0x19f6 <main+0x158>
			{
				flagTempUpdate = 0;
    19dc:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <flagTempUpdate+0x1>
    19e0:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <flagTempUpdate>
				processTempUpdate();
    19e4:	0e 94 d4 05 	call	0xba8	; 0xba8 <processTempUpdate>
				LCD_location(1,16);
    19e8:	60 e1       	ldi	r22, 0x10	; 16
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_location>
				LCD_write(' ');
    19f0:	80 e2       	ldi	r24, 0x20	; 32
    19f2:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_write>
			}
		}
 		keyEventExecute();
    19f6:	0e 94 34 08 	call	0x1068	; 0x1068 <keyEventExecute>
	}
    19fa:	d9 cf       	rjmp	.-78     	; 0x19ae <main+0x110>

000019fc <callback>:
		eeprom_write_word(EEPROM_CHECKSUM_ADD, EEPROM_CHECKSUM);
	}
}
void callback (void)
{
	if(UAvailableData() % 2)
    19fc:	0e 94 a1 02 	call	0x542	; 0x542 <UAvailableData>
    1a00:	80 fd       	sbrc	r24, 0
	{
		UReadData();
    1a02:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <UReadData>
	}
	
	if(UAvailableData() >= 2)
    1a06:	0e 94 a1 02 	call	0x542	; 0x542 <UAvailableData>
    1a0a:	82 30       	cpi	r24, 0x02	; 2
    1a0c:	d0 f0       	brcs	.+52     	; 0x1a42 <callback+0x46>
	{
		high = UReadData();
    1a0e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <UReadData>
    1a12:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <high>
		low = UReadData();
    1a16:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <UReadData>
    1a1a:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <low>
		lastUpdatedTemp = ((high << 8) | low);
    1a1e:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <high>
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	32 2f       	mov	r19, r18
    1a26:	22 27       	eor	r18, r18
    1a28:	a9 01       	movw	r20, r18
    1a2a:	48 2b       	or	r20, r24
    1a2c:	ca 01       	movw	r24, r20
    1a2e:	90 93 dd 00 	sts	0x00DD, r25	; 0x8000dd <lastUpdatedTemp+0x1>
    1a32:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <lastUpdatedTemp>
		
		flagTempUpdate = 1;
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	90 93 db 00 	sts	0x00DB, r25	; 0x8000db <flagTempUpdate+0x1>
    1a3e:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <flagTempUpdate>
    1a42:	08 95       	ret

00001a44 <__subsf3>:
    1a44:	50 58       	subi	r21, 0x80	; 128

00001a46 <__addsf3>:
    1a46:	bb 27       	eor	r27, r27
    1a48:	aa 27       	eor	r26, r26
    1a4a:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__addsf3x>
    1a4e:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <__fp_round>
    1a52:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__fp_pscA>
    1a56:	38 f0       	brcs	.+14     	; 0x1a66 <__addsf3+0x20>
    1a58:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__fp_pscB>
    1a5c:	20 f0       	brcs	.+8      	; 0x1a66 <__addsf3+0x20>
    1a5e:	39 f4       	brne	.+14     	; 0x1a6e <__addsf3+0x28>
    1a60:	9f 3f       	cpi	r25, 0xFF	; 255
    1a62:	19 f4       	brne	.+6      	; 0x1a6a <__addsf3+0x24>
    1a64:	26 f4       	brtc	.+8      	; 0x1a6e <__addsf3+0x28>
    1a66:	0c 94 a3 0e 	jmp	0x1d46	; 0x1d46 <__fp_nan>
    1a6a:	0e f4       	brtc	.+2      	; 0x1a6e <__addsf3+0x28>
    1a6c:	e0 95       	com	r30
    1a6e:	e7 fb       	bst	r30, 7
    1a70:	0c 94 9d 0e 	jmp	0x1d3a	; 0x1d3a <__fp_inf>

00001a74 <__addsf3x>:
    1a74:	e9 2f       	mov	r30, r25
    1a76:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__fp_split3>
    1a7a:	58 f3       	brcs	.-42     	; 0x1a52 <__addsf3+0xc>
    1a7c:	ba 17       	cp	r27, r26
    1a7e:	62 07       	cpc	r22, r18
    1a80:	73 07       	cpc	r23, r19
    1a82:	84 07       	cpc	r24, r20
    1a84:	95 07       	cpc	r25, r21
    1a86:	20 f0       	brcs	.+8      	; 0x1a90 <__addsf3x+0x1c>
    1a88:	79 f4       	brne	.+30     	; 0x1aa8 <__addsf3x+0x34>
    1a8a:	a6 f5       	brtc	.+104    	; 0x1af4 <__addsf3x+0x80>
    1a8c:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <__fp_zero>
    1a90:	0e f4       	brtc	.+2      	; 0x1a94 <__addsf3x+0x20>
    1a92:	e0 95       	com	r30
    1a94:	0b 2e       	mov	r0, r27
    1a96:	ba 2f       	mov	r27, r26
    1a98:	a0 2d       	mov	r26, r0
    1a9a:	0b 01       	movw	r0, r22
    1a9c:	b9 01       	movw	r22, r18
    1a9e:	90 01       	movw	r18, r0
    1aa0:	0c 01       	movw	r0, r24
    1aa2:	ca 01       	movw	r24, r20
    1aa4:	a0 01       	movw	r20, r0
    1aa6:	11 24       	eor	r1, r1
    1aa8:	ff 27       	eor	r31, r31
    1aaa:	59 1b       	sub	r21, r25
    1aac:	99 f0       	breq	.+38     	; 0x1ad4 <__addsf3x+0x60>
    1aae:	59 3f       	cpi	r21, 0xF9	; 249
    1ab0:	50 f4       	brcc	.+20     	; 0x1ac6 <__addsf3x+0x52>
    1ab2:	50 3e       	cpi	r21, 0xE0	; 224
    1ab4:	68 f1       	brcs	.+90     	; 0x1b10 <__addsf3x+0x9c>
    1ab6:	1a 16       	cp	r1, r26
    1ab8:	f0 40       	sbci	r31, 0x00	; 0
    1aba:	a2 2f       	mov	r26, r18
    1abc:	23 2f       	mov	r18, r19
    1abe:	34 2f       	mov	r19, r20
    1ac0:	44 27       	eor	r20, r20
    1ac2:	58 5f       	subi	r21, 0xF8	; 248
    1ac4:	f3 cf       	rjmp	.-26     	; 0x1aac <__addsf3x+0x38>
    1ac6:	46 95       	lsr	r20
    1ac8:	37 95       	ror	r19
    1aca:	27 95       	ror	r18
    1acc:	a7 95       	ror	r26
    1ace:	f0 40       	sbci	r31, 0x00	; 0
    1ad0:	53 95       	inc	r21
    1ad2:	c9 f7       	brne	.-14     	; 0x1ac6 <__addsf3x+0x52>
    1ad4:	7e f4       	brtc	.+30     	; 0x1af4 <__addsf3x+0x80>
    1ad6:	1f 16       	cp	r1, r31
    1ad8:	ba 0b       	sbc	r27, r26
    1ada:	62 0b       	sbc	r22, r18
    1adc:	73 0b       	sbc	r23, r19
    1ade:	84 0b       	sbc	r24, r20
    1ae0:	ba f0       	brmi	.+46     	; 0x1b10 <__addsf3x+0x9c>
    1ae2:	91 50       	subi	r25, 0x01	; 1
    1ae4:	a1 f0       	breq	.+40     	; 0x1b0e <__addsf3x+0x9a>
    1ae6:	ff 0f       	add	r31, r31
    1ae8:	bb 1f       	adc	r27, r27
    1aea:	66 1f       	adc	r22, r22
    1aec:	77 1f       	adc	r23, r23
    1aee:	88 1f       	adc	r24, r24
    1af0:	c2 f7       	brpl	.-16     	; 0x1ae2 <__addsf3x+0x6e>
    1af2:	0e c0       	rjmp	.+28     	; 0x1b10 <__addsf3x+0x9c>
    1af4:	ba 0f       	add	r27, r26
    1af6:	62 1f       	adc	r22, r18
    1af8:	73 1f       	adc	r23, r19
    1afa:	84 1f       	adc	r24, r20
    1afc:	48 f4       	brcc	.+18     	; 0x1b10 <__addsf3x+0x9c>
    1afe:	87 95       	ror	r24
    1b00:	77 95       	ror	r23
    1b02:	67 95       	ror	r22
    1b04:	b7 95       	ror	r27
    1b06:	f7 95       	ror	r31
    1b08:	9e 3f       	cpi	r25, 0xFE	; 254
    1b0a:	08 f0       	brcs	.+2      	; 0x1b0e <__addsf3x+0x9a>
    1b0c:	b0 cf       	rjmp	.-160    	; 0x1a6e <__addsf3+0x28>
    1b0e:	93 95       	inc	r25
    1b10:	88 0f       	add	r24, r24
    1b12:	08 f0       	brcs	.+2      	; 0x1b16 <__addsf3x+0xa2>
    1b14:	99 27       	eor	r25, r25
    1b16:	ee 0f       	add	r30, r30
    1b18:	97 95       	ror	r25
    1b1a:	87 95       	ror	r24
    1b1c:	08 95       	ret

00001b1e <__cmpsf2>:
    1b1e:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__fp_cmp>
    1b22:	08 f4       	brcc	.+2      	; 0x1b26 <__cmpsf2+0x8>
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	08 95       	ret

00001b28 <__divsf3>:
    1b28:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__divsf3x>
    1b2c:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <__fp_round>
    1b30:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__fp_pscB>
    1b34:	58 f0       	brcs	.+22     	; 0x1b4c <__divsf3+0x24>
    1b36:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__fp_pscA>
    1b3a:	40 f0       	brcs	.+16     	; 0x1b4c <__divsf3+0x24>
    1b3c:	29 f4       	brne	.+10     	; 0x1b48 <__divsf3+0x20>
    1b3e:	5f 3f       	cpi	r21, 0xFF	; 255
    1b40:	29 f0       	breq	.+10     	; 0x1b4c <__divsf3+0x24>
    1b42:	0c 94 9d 0e 	jmp	0x1d3a	; 0x1d3a <__fp_inf>
    1b46:	51 11       	cpse	r21, r1
    1b48:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <__fp_szero>
    1b4c:	0c 94 a3 0e 	jmp	0x1d46	; 0x1d46 <__fp_nan>

00001b50 <__divsf3x>:
    1b50:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__fp_split3>
    1b54:	68 f3       	brcs	.-38     	; 0x1b30 <__divsf3+0x8>

00001b56 <__divsf3_pse>:
    1b56:	99 23       	and	r25, r25
    1b58:	b1 f3       	breq	.-20     	; 0x1b46 <__divsf3+0x1e>
    1b5a:	55 23       	and	r21, r21
    1b5c:	91 f3       	breq	.-28     	; 0x1b42 <__divsf3+0x1a>
    1b5e:	95 1b       	sub	r25, r21
    1b60:	55 0b       	sbc	r21, r21
    1b62:	bb 27       	eor	r27, r27
    1b64:	aa 27       	eor	r26, r26
    1b66:	62 17       	cp	r22, r18
    1b68:	73 07       	cpc	r23, r19
    1b6a:	84 07       	cpc	r24, r20
    1b6c:	38 f0       	brcs	.+14     	; 0x1b7c <__divsf3_pse+0x26>
    1b6e:	9f 5f       	subi	r25, 0xFF	; 255
    1b70:	5f 4f       	sbci	r21, 0xFF	; 255
    1b72:	22 0f       	add	r18, r18
    1b74:	33 1f       	adc	r19, r19
    1b76:	44 1f       	adc	r20, r20
    1b78:	aa 1f       	adc	r26, r26
    1b7a:	a9 f3       	breq	.-22     	; 0x1b66 <__divsf3_pse+0x10>
    1b7c:	35 d0       	rcall	.+106    	; 0x1be8 <__divsf3_pse+0x92>
    1b7e:	0e 2e       	mov	r0, r30
    1b80:	3a f0       	brmi	.+14     	; 0x1b90 <__divsf3_pse+0x3a>
    1b82:	e0 e8       	ldi	r30, 0x80	; 128
    1b84:	32 d0       	rcall	.+100    	; 0x1bea <__divsf3_pse+0x94>
    1b86:	91 50       	subi	r25, 0x01	; 1
    1b88:	50 40       	sbci	r21, 0x00	; 0
    1b8a:	e6 95       	lsr	r30
    1b8c:	00 1c       	adc	r0, r0
    1b8e:	ca f7       	brpl	.-14     	; 0x1b82 <__divsf3_pse+0x2c>
    1b90:	2b d0       	rcall	.+86     	; 0x1be8 <__divsf3_pse+0x92>
    1b92:	fe 2f       	mov	r31, r30
    1b94:	29 d0       	rcall	.+82     	; 0x1be8 <__divsf3_pse+0x92>
    1b96:	66 0f       	add	r22, r22
    1b98:	77 1f       	adc	r23, r23
    1b9a:	88 1f       	adc	r24, r24
    1b9c:	bb 1f       	adc	r27, r27
    1b9e:	26 17       	cp	r18, r22
    1ba0:	37 07       	cpc	r19, r23
    1ba2:	48 07       	cpc	r20, r24
    1ba4:	ab 07       	cpc	r26, r27
    1ba6:	b0 e8       	ldi	r27, 0x80	; 128
    1ba8:	09 f0       	breq	.+2      	; 0x1bac <__divsf3_pse+0x56>
    1baa:	bb 0b       	sbc	r27, r27
    1bac:	80 2d       	mov	r24, r0
    1bae:	bf 01       	movw	r22, r30
    1bb0:	ff 27       	eor	r31, r31
    1bb2:	93 58       	subi	r25, 0x83	; 131
    1bb4:	5f 4f       	sbci	r21, 0xFF	; 255
    1bb6:	3a f0       	brmi	.+14     	; 0x1bc6 <__divsf3_pse+0x70>
    1bb8:	9e 3f       	cpi	r25, 0xFE	; 254
    1bba:	51 05       	cpc	r21, r1
    1bbc:	78 f0       	brcs	.+30     	; 0x1bdc <__divsf3_pse+0x86>
    1bbe:	0c 94 9d 0e 	jmp	0x1d3a	; 0x1d3a <__fp_inf>
    1bc2:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <__fp_szero>
    1bc6:	5f 3f       	cpi	r21, 0xFF	; 255
    1bc8:	e4 f3       	brlt	.-8      	; 0x1bc2 <__divsf3_pse+0x6c>
    1bca:	98 3e       	cpi	r25, 0xE8	; 232
    1bcc:	d4 f3       	brlt	.-12     	; 0x1bc2 <__divsf3_pse+0x6c>
    1bce:	86 95       	lsr	r24
    1bd0:	77 95       	ror	r23
    1bd2:	67 95       	ror	r22
    1bd4:	b7 95       	ror	r27
    1bd6:	f7 95       	ror	r31
    1bd8:	9f 5f       	subi	r25, 0xFF	; 255
    1bda:	c9 f7       	brne	.-14     	; 0x1bce <__divsf3_pse+0x78>
    1bdc:	88 0f       	add	r24, r24
    1bde:	91 1d       	adc	r25, r1
    1be0:	96 95       	lsr	r25
    1be2:	87 95       	ror	r24
    1be4:	97 f9       	bld	r25, 7
    1be6:	08 95       	ret
    1be8:	e1 e0       	ldi	r30, 0x01	; 1
    1bea:	66 0f       	add	r22, r22
    1bec:	77 1f       	adc	r23, r23
    1bee:	88 1f       	adc	r24, r24
    1bf0:	bb 1f       	adc	r27, r27
    1bf2:	62 17       	cp	r22, r18
    1bf4:	73 07       	cpc	r23, r19
    1bf6:	84 07       	cpc	r24, r20
    1bf8:	ba 07       	cpc	r27, r26
    1bfa:	20 f0       	brcs	.+8      	; 0x1c04 <__divsf3_pse+0xae>
    1bfc:	62 1b       	sub	r22, r18
    1bfe:	73 0b       	sbc	r23, r19
    1c00:	84 0b       	sbc	r24, r20
    1c02:	ba 0b       	sbc	r27, r26
    1c04:	ee 1f       	adc	r30, r30
    1c06:	88 f7       	brcc	.-30     	; 0x1bea <__divsf3_pse+0x94>
    1c08:	e0 95       	com	r30
    1c0a:	08 95       	ret

00001c0c <__fixsfsi>:
    1c0c:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__fixunssfsi>
    1c10:	68 94       	set
    1c12:	b1 11       	cpse	r27, r1
    1c14:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <__fp_szero>
    1c18:	08 95       	ret

00001c1a <__fixunssfsi>:
    1c1a:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__fp_splitA>
    1c1e:	88 f0       	brcs	.+34     	; 0x1c42 <__fixunssfsi+0x28>
    1c20:	9f 57       	subi	r25, 0x7F	; 127
    1c22:	98 f0       	brcs	.+38     	; 0x1c4a <__fixunssfsi+0x30>
    1c24:	b9 2f       	mov	r27, r25
    1c26:	99 27       	eor	r25, r25
    1c28:	b7 51       	subi	r27, 0x17	; 23
    1c2a:	b0 f0       	brcs	.+44     	; 0x1c58 <__fixunssfsi+0x3e>
    1c2c:	e1 f0       	breq	.+56     	; 0x1c66 <__fixunssfsi+0x4c>
    1c2e:	66 0f       	add	r22, r22
    1c30:	77 1f       	adc	r23, r23
    1c32:	88 1f       	adc	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	1a f0       	brmi	.+6      	; 0x1c3e <__fixunssfsi+0x24>
    1c38:	ba 95       	dec	r27
    1c3a:	c9 f7       	brne	.-14     	; 0x1c2e <__fixunssfsi+0x14>
    1c3c:	14 c0       	rjmp	.+40     	; 0x1c66 <__fixunssfsi+0x4c>
    1c3e:	b1 30       	cpi	r27, 0x01	; 1
    1c40:	91 f0       	breq	.+36     	; 0x1c66 <__fixunssfsi+0x4c>
    1c42:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <__fp_zero>
    1c46:	b1 e0       	ldi	r27, 0x01	; 1
    1c48:	08 95       	ret
    1c4a:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <__fp_zero>
    1c4e:	67 2f       	mov	r22, r23
    1c50:	78 2f       	mov	r23, r24
    1c52:	88 27       	eor	r24, r24
    1c54:	b8 5f       	subi	r27, 0xF8	; 248
    1c56:	39 f0       	breq	.+14     	; 0x1c66 <__fixunssfsi+0x4c>
    1c58:	b9 3f       	cpi	r27, 0xF9	; 249
    1c5a:	cc f3       	brlt	.-14     	; 0x1c4e <__fixunssfsi+0x34>
    1c5c:	86 95       	lsr	r24
    1c5e:	77 95       	ror	r23
    1c60:	67 95       	ror	r22
    1c62:	b3 95       	inc	r27
    1c64:	d9 f7       	brne	.-10     	; 0x1c5c <__fixunssfsi+0x42>
    1c66:	3e f4       	brtc	.+14     	; 0x1c76 <__fixunssfsi+0x5c>
    1c68:	90 95       	com	r25
    1c6a:	80 95       	com	r24
    1c6c:	70 95       	com	r23
    1c6e:	61 95       	neg	r22
    1c70:	7f 4f       	sbci	r23, 0xFF	; 255
    1c72:	8f 4f       	sbci	r24, 0xFF	; 255
    1c74:	9f 4f       	sbci	r25, 0xFF	; 255
    1c76:	08 95       	ret

00001c78 <__floatunsisf>:
    1c78:	e8 94       	clt
    1c7a:	09 c0       	rjmp	.+18     	; 0x1c8e <__floatsisf+0x12>

00001c7c <__floatsisf>:
    1c7c:	97 fb       	bst	r25, 7
    1c7e:	3e f4       	brtc	.+14     	; 0x1c8e <__floatsisf+0x12>
    1c80:	90 95       	com	r25
    1c82:	80 95       	com	r24
    1c84:	70 95       	com	r23
    1c86:	61 95       	neg	r22
    1c88:	7f 4f       	sbci	r23, 0xFF	; 255
    1c8a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c8e:	99 23       	and	r25, r25
    1c90:	a9 f0       	breq	.+42     	; 0x1cbc <__floatsisf+0x40>
    1c92:	f9 2f       	mov	r31, r25
    1c94:	96 e9       	ldi	r25, 0x96	; 150
    1c96:	bb 27       	eor	r27, r27
    1c98:	93 95       	inc	r25
    1c9a:	f6 95       	lsr	r31
    1c9c:	87 95       	ror	r24
    1c9e:	77 95       	ror	r23
    1ca0:	67 95       	ror	r22
    1ca2:	b7 95       	ror	r27
    1ca4:	f1 11       	cpse	r31, r1
    1ca6:	f8 cf       	rjmp	.-16     	; 0x1c98 <__floatsisf+0x1c>
    1ca8:	fa f4       	brpl	.+62     	; 0x1ce8 <__floatsisf+0x6c>
    1caa:	bb 0f       	add	r27, r27
    1cac:	11 f4       	brne	.+4      	; 0x1cb2 <__floatsisf+0x36>
    1cae:	60 ff       	sbrs	r22, 0
    1cb0:	1b c0       	rjmp	.+54     	; 0x1ce8 <__floatsisf+0x6c>
    1cb2:	6f 5f       	subi	r22, 0xFF	; 255
    1cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb6:	8f 4f       	sbci	r24, 0xFF	; 255
    1cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cba:	16 c0       	rjmp	.+44     	; 0x1ce8 <__floatsisf+0x6c>
    1cbc:	88 23       	and	r24, r24
    1cbe:	11 f0       	breq	.+4      	; 0x1cc4 <__floatsisf+0x48>
    1cc0:	96 e9       	ldi	r25, 0x96	; 150
    1cc2:	11 c0       	rjmp	.+34     	; 0x1ce6 <__floatsisf+0x6a>
    1cc4:	77 23       	and	r23, r23
    1cc6:	21 f0       	breq	.+8      	; 0x1cd0 <__floatsisf+0x54>
    1cc8:	9e e8       	ldi	r25, 0x8E	; 142
    1cca:	87 2f       	mov	r24, r23
    1ccc:	76 2f       	mov	r23, r22
    1cce:	05 c0       	rjmp	.+10     	; 0x1cda <__floatsisf+0x5e>
    1cd0:	66 23       	and	r22, r22
    1cd2:	71 f0       	breq	.+28     	; 0x1cf0 <__floatsisf+0x74>
    1cd4:	96 e8       	ldi	r25, 0x86	; 134
    1cd6:	86 2f       	mov	r24, r22
    1cd8:	70 e0       	ldi	r23, 0x00	; 0
    1cda:	60 e0       	ldi	r22, 0x00	; 0
    1cdc:	2a f0       	brmi	.+10     	; 0x1ce8 <__floatsisf+0x6c>
    1cde:	9a 95       	dec	r25
    1ce0:	66 0f       	add	r22, r22
    1ce2:	77 1f       	adc	r23, r23
    1ce4:	88 1f       	adc	r24, r24
    1ce6:	da f7       	brpl	.-10     	; 0x1cde <__floatsisf+0x62>
    1ce8:	88 0f       	add	r24, r24
    1cea:	96 95       	lsr	r25
    1cec:	87 95       	ror	r24
    1cee:	97 f9       	bld	r25, 7
    1cf0:	08 95       	ret

00001cf2 <__fp_cmp>:
    1cf2:	99 0f       	add	r25, r25
    1cf4:	00 08       	sbc	r0, r0
    1cf6:	55 0f       	add	r21, r21
    1cf8:	aa 0b       	sbc	r26, r26
    1cfa:	e0 e8       	ldi	r30, 0x80	; 128
    1cfc:	fe ef       	ldi	r31, 0xFE	; 254
    1cfe:	16 16       	cp	r1, r22
    1d00:	17 06       	cpc	r1, r23
    1d02:	e8 07       	cpc	r30, r24
    1d04:	f9 07       	cpc	r31, r25
    1d06:	c0 f0       	brcs	.+48     	; 0x1d38 <__fp_cmp+0x46>
    1d08:	12 16       	cp	r1, r18
    1d0a:	13 06       	cpc	r1, r19
    1d0c:	e4 07       	cpc	r30, r20
    1d0e:	f5 07       	cpc	r31, r21
    1d10:	98 f0       	brcs	.+38     	; 0x1d38 <__fp_cmp+0x46>
    1d12:	62 1b       	sub	r22, r18
    1d14:	73 0b       	sbc	r23, r19
    1d16:	84 0b       	sbc	r24, r20
    1d18:	95 0b       	sbc	r25, r21
    1d1a:	39 f4       	brne	.+14     	; 0x1d2a <__fp_cmp+0x38>
    1d1c:	0a 26       	eor	r0, r26
    1d1e:	61 f0       	breq	.+24     	; 0x1d38 <__fp_cmp+0x46>
    1d20:	23 2b       	or	r18, r19
    1d22:	24 2b       	or	r18, r20
    1d24:	25 2b       	or	r18, r21
    1d26:	21 f4       	brne	.+8      	; 0x1d30 <__fp_cmp+0x3e>
    1d28:	08 95       	ret
    1d2a:	0a 26       	eor	r0, r26
    1d2c:	09 f4       	brne	.+2      	; 0x1d30 <__fp_cmp+0x3e>
    1d2e:	a1 40       	sbci	r26, 0x01	; 1
    1d30:	a6 95       	lsr	r26
    1d32:	8f ef       	ldi	r24, 0xFF	; 255
    1d34:	81 1d       	adc	r24, r1
    1d36:	81 1d       	adc	r24, r1
    1d38:	08 95       	ret

00001d3a <__fp_inf>:
    1d3a:	97 f9       	bld	r25, 7
    1d3c:	9f 67       	ori	r25, 0x7F	; 127
    1d3e:	80 e8       	ldi	r24, 0x80	; 128
    1d40:	70 e0       	ldi	r23, 0x00	; 0
    1d42:	60 e0       	ldi	r22, 0x00	; 0
    1d44:	08 95       	ret

00001d46 <__fp_nan>:
    1d46:	9f ef       	ldi	r25, 0xFF	; 255
    1d48:	80 ec       	ldi	r24, 0xC0	; 192
    1d4a:	08 95       	ret

00001d4c <__fp_pscA>:
    1d4c:	00 24       	eor	r0, r0
    1d4e:	0a 94       	dec	r0
    1d50:	16 16       	cp	r1, r22
    1d52:	17 06       	cpc	r1, r23
    1d54:	18 06       	cpc	r1, r24
    1d56:	09 06       	cpc	r0, r25
    1d58:	08 95       	ret

00001d5a <__fp_pscB>:
    1d5a:	00 24       	eor	r0, r0
    1d5c:	0a 94       	dec	r0
    1d5e:	12 16       	cp	r1, r18
    1d60:	13 06       	cpc	r1, r19
    1d62:	14 06       	cpc	r1, r20
    1d64:	05 06       	cpc	r0, r21
    1d66:	08 95       	ret

00001d68 <__fp_round>:
    1d68:	09 2e       	mov	r0, r25
    1d6a:	03 94       	inc	r0
    1d6c:	00 0c       	add	r0, r0
    1d6e:	11 f4       	brne	.+4      	; 0x1d74 <__fp_round+0xc>
    1d70:	88 23       	and	r24, r24
    1d72:	52 f0       	brmi	.+20     	; 0x1d88 <__fp_round+0x20>
    1d74:	bb 0f       	add	r27, r27
    1d76:	40 f4       	brcc	.+16     	; 0x1d88 <__fp_round+0x20>
    1d78:	bf 2b       	or	r27, r31
    1d7a:	11 f4       	brne	.+4      	; 0x1d80 <__fp_round+0x18>
    1d7c:	60 ff       	sbrs	r22, 0
    1d7e:	04 c0       	rjmp	.+8      	; 0x1d88 <__fp_round+0x20>
    1d80:	6f 5f       	subi	r22, 0xFF	; 255
    1d82:	7f 4f       	sbci	r23, 0xFF	; 255
    1d84:	8f 4f       	sbci	r24, 0xFF	; 255
    1d86:	9f 4f       	sbci	r25, 0xFF	; 255
    1d88:	08 95       	ret

00001d8a <__fp_split3>:
    1d8a:	57 fd       	sbrc	r21, 7
    1d8c:	90 58       	subi	r25, 0x80	; 128
    1d8e:	44 0f       	add	r20, r20
    1d90:	55 1f       	adc	r21, r21
    1d92:	59 f0       	breq	.+22     	; 0x1daa <__fp_splitA+0x10>
    1d94:	5f 3f       	cpi	r21, 0xFF	; 255
    1d96:	71 f0       	breq	.+28     	; 0x1db4 <__fp_splitA+0x1a>
    1d98:	47 95       	ror	r20

00001d9a <__fp_splitA>:
    1d9a:	88 0f       	add	r24, r24
    1d9c:	97 fb       	bst	r25, 7
    1d9e:	99 1f       	adc	r25, r25
    1da0:	61 f0       	breq	.+24     	; 0x1dba <__fp_splitA+0x20>
    1da2:	9f 3f       	cpi	r25, 0xFF	; 255
    1da4:	79 f0       	breq	.+30     	; 0x1dc4 <__fp_splitA+0x2a>
    1da6:	87 95       	ror	r24
    1da8:	08 95       	ret
    1daa:	12 16       	cp	r1, r18
    1dac:	13 06       	cpc	r1, r19
    1dae:	14 06       	cpc	r1, r20
    1db0:	55 1f       	adc	r21, r21
    1db2:	f2 cf       	rjmp	.-28     	; 0x1d98 <__fp_split3+0xe>
    1db4:	46 95       	lsr	r20
    1db6:	f1 df       	rcall	.-30     	; 0x1d9a <__fp_splitA>
    1db8:	08 c0       	rjmp	.+16     	; 0x1dca <__fp_splitA+0x30>
    1dba:	16 16       	cp	r1, r22
    1dbc:	17 06       	cpc	r1, r23
    1dbe:	18 06       	cpc	r1, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	f1 cf       	rjmp	.-30     	; 0x1da6 <__fp_splitA+0xc>
    1dc4:	86 95       	lsr	r24
    1dc6:	71 05       	cpc	r23, r1
    1dc8:	61 05       	cpc	r22, r1
    1dca:	08 94       	sec
    1dcc:	08 95       	ret

00001dce <__fp_zero>:
    1dce:	e8 94       	clt

00001dd0 <__fp_szero>:
    1dd0:	bb 27       	eor	r27, r27
    1dd2:	66 27       	eor	r22, r22
    1dd4:	77 27       	eor	r23, r23
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	97 f9       	bld	r25, 7
    1dda:	08 95       	ret

00001ddc <__gesf2>:
    1ddc:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__fp_cmp>
    1de0:	08 f4       	brcc	.+2      	; 0x1de4 <__gesf2+0x8>
    1de2:	8f ef       	ldi	r24, 0xFF	; 255
    1de4:	08 95       	ret

00001de6 <__mulsf3>:
    1de6:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__mulsf3x>
    1dea:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <__fp_round>
    1dee:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__fp_pscA>
    1df2:	38 f0       	brcs	.+14     	; 0x1e02 <__mulsf3+0x1c>
    1df4:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__fp_pscB>
    1df8:	20 f0       	brcs	.+8      	; 0x1e02 <__mulsf3+0x1c>
    1dfa:	95 23       	and	r25, r21
    1dfc:	11 f0       	breq	.+4      	; 0x1e02 <__mulsf3+0x1c>
    1dfe:	0c 94 9d 0e 	jmp	0x1d3a	; 0x1d3a <__fp_inf>
    1e02:	0c 94 a3 0e 	jmp	0x1d46	; 0x1d46 <__fp_nan>
    1e06:	11 24       	eor	r1, r1
    1e08:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <__fp_szero>

00001e0c <__mulsf3x>:
    1e0c:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__fp_split3>
    1e10:	70 f3       	brcs	.-36     	; 0x1dee <__mulsf3+0x8>

00001e12 <__mulsf3_pse>:
    1e12:	95 9f       	mul	r25, r21
    1e14:	c1 f3       	breq	.-16     	; 0x1e06 <__mulsf3+0x20>
    1e16:	95 0f       	add	r25, r21
    1e18:	50 e0       	ldi	r21, 0x00	; 0
    1e1a:	55 1f       	adc	r21, r21
    1e1c:	62 9f       	mul	r22, r18
    1e1e:	f0 01       	movw	r30, r0
    1e20:	72 9f       	mul	r23, r18
    1e22:	bb 27       	eor	r27, r27
    1e24:	f0 0d       	add	r31, r0
    1e26:	b1 1d       	adc	r27, r1
    1e28:	63 9f       	mul	r22, r19
    1e2a:	aa 27       	eor	r26, r26
    1e2c:	f0 0d       	add	r31, r0
    1e2e:	b1 1d       	adc	r27, r1
    1e30:	aa 1f       	adc	r26, r26
    1e32:	64 9f       	mul	r22, r20
    1e34:	66 27       	eor	r22, r22
    1e36:	b0 0d       	add	r27, r0
    1e38:	a1 1d       	adc	r26, r1
    1e3a:	66 1f       	adc	r22, r22
    1e3c:	82 9f       	mul	r24, r18
    1e3e:	22 27       	eor	r18, r18
    1e40:	b0 0d       	add	r27, r0
    1e42:	a1 1d       	adc	r26, r1
    1e44:	62 1f       	adc	r22, r18
    1e46:	73 9f       	mul	r23, r19
    1e48:	b0 0d       	add	r27, r0
    1e4a:	a1 1d       	adc	r26, r1
    1e4c:	62 1f       	adc	r22, r18
    1e4e:	83 9f       	mul	r24, r19
    1e50:	a0 0d       	add	r26, r0
    1e52:	61 1d       	adc	r22, r1
    1e54:	22 1f       	adc	r18, r18
    1e56:	74 9f       	mul	r23, r20
    1e58:	33 27       	eor	r19, r19
    1e5a:	a0 0d       	add	r26, r0
    1e5c:	61 1d       	adc	r22, r1
    1e5e:	23 1f       	adc	r18, r19
    1e60:	84 9f       	mul	r24, r20
    1e62:	60 0d       	add	r22, r0
    1e64:	21 1d       	adc	r18, r1
    1e66:	82 2f       	mov	r24, r18
    1e68:	76 2f       	mov	r23, r22
    1e6a:	6a 2f       	mov	r22, r26
    1e6c:	11 24       	eor	r1, r1
    1e6e:	9f 57       	subi	r25, 0x7F	; 127
    1e70:	50 40       	sbci	r21, 0x00	; 0
    1e72:	9a f0       	brmi	.+38     	; 0x1e9a <__mulsf3_pse+0x88>
    1e74:	f1 f0       	breq	.+60     	; 0x1eb2 <__mulsf3_pse+0xa0>
    1e76:	88 23       	and	r24, r24
    1e78:	4a f0       	brmi	.+18     	; 0x1e8c <__mulsf3_pse+0x7a>
    1e7a:	ee 0f       	add	r30, r30
    1e7c:	ff 1f       	adc	r31, r31
    1e7e:	bb 1f       	adc	r27, r27
    1e80:	66 1f       	adc	r22, r22
    1e82:	77 1f       	adc	r23, r23
    1e84:	88 1f       	adc	r24, r24
    1e86:	91 50       	subi	r25, 0x01	; 1
    1e88:	50 40       	sbci	r21, 0x00	; 0
    1e8a:	a9 f7       	brne	.-22     	; 0x1e76 <__mulsf3_pse+0x64>
    1e8c:	9e 3f       	cpi	r25, 0xFE	; 254
    1e8e:	51 05       	cpc	r21, r1
    1e90:	80 f0       	brcs	.+32     	; 0x1eb2 <__mulsf3_pse+0xa0>
    1e92:	0c 94 9d 0e 	jmp	0x1d3a	; 0x1d3a <__fp_inf>
    1e96:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <__fp_szero>
    1e9a:	5f 3f       	cpi	r21, 0xFF	; 255
    1e9c:	e4 f3       	brlt	.-8      	; 0x1e96 <__mulsf3_pse+0x84>
    1e9e:	98 3e       	cpi	r25, 0xE8	; 232
    1ea0:	d4 f3       	brlt	.-12     	; 0x1e96 <__mulsf3_pse+0x84>
    1ea2:	86 95       	lsr	r24
    1ea4:	77 95       	ror	r23
    1ea6:	67 95       	ror	r22
    1ea8:	b7 95       	ror	r27
    1eaa:	f7 95       	ror	r31
    1eac:	e7 95       	ror	r30
    1eae:	9f 5f       	subi	r25, 0xFF	; 255
    1eb0:	c1 f7       	brne	.-16     	; 0x1ea2 <__mulsf3_pse+0x90>
    1eb2:	fe 2b       	or	r31, r30
    1eb4:	88 0f       	add	r24, r24
    1eb6:	91 1d       	adc	r25, r1
    1eb8:	96 95       	lsr	r25
    1eba:	87 95       	ror	r24
    1ebc:	97 f9       	bld	r25, 7
    1ebe:	08 95       	ret

00001ec0 <__udivmodsi4>:
    1ec0:	a1 e2       	ldi	r26, 0x21	; 33
    1ec2:	1a 2e       	mov	r1, r26
    1ec4:	aa 1b       	sub	r26, r26
    1ec6:	bb 1b       	sub	r27, r27
    1ec8:	fd 01       	movw	r30, r26
    1eca:	0d c0       	rjmp	.+26     	; 0x1ee6 <__udivmodsi4_ep>

00001ecc <__udivmodsi4_loop>:
    1ecc:	aa 1f       	adc	r26, r26
    1ece:	bb 1f       	adc	r27, r27
    1ed0:	ee 1f       	adc	r30, r30
    1ed2:	ff 1f       	adc	r31, r31
    1ed4:	a2 17       	cp	r26, r18
    1ed6:	b3 07       	cpc	r27, r19
    1ed8:	e4 07       	cpc	r30, r20
    1eda:	f5 07       	cpc	r31, r21
    1edc:	20 f0       	brcs	.+8      	; 0x1ee6 <__udivmodsi4_ep>
    1ede:	a2 1b       	sub	r26, r18
    1ee0:	b3 0b       	sbc	r27, r19
    1ee2:	e4 0b       	sbc	r30, r20
    1ee4:	f5 0b       	sbc	r31, r21

00001ee6 <__udivmodsi4_ep>:
    1ee6:	66 1f       	adc	r22, r22
    1ee8:	77 1f       	adc	r23, r23
    1eea:	88 1f       	adc	r24, r24
    1eec:	99 1f       	adc	r25, r25
    1eee:	1a 94       	dec	r1
    1ef0:	69 f7       	brne	.-38     	; 0x1ecc <__udivmodsi4_loop>
    1ef2:	60 95       	com	r22
    1ef4:	70 95       	com	r23
    1ef6:	80 95       	com	r24
    1ef8:	90 95       	com	r25
    1efa:	9b 01       	movw	r18, r22
    1efc:	ac 01       	movw	r20, r24
    1efe:	bd 01       	movw	r22, r26
    1f00:	cf 01       	movw	r24, r30
    1f02:	08 95       	ret

00001f04 <__umulhisi3>:
    1f04:	a2 9f       	mul	r26, r18
    1f06:	b0 01       	movw	r22, r0
    1f08:	b3 9f       	mul	r27, r19
    1f0a:	c0 01       	movw	r24, r0
    1f0c:	a3 9f       	mul	r26, r19
    1f0e:	70 0d       	add	r23, r0
    1f10:	81 1d       	adc	r24, r1
    1f12:	11 24       	eor	r1, r1
    1f14:	91 1d       	adc	r25, r1
    1f16:	b2 9f       	mul	r27, r18
    1f18:	70 0d       	add	r23, r0
    1f1a:	81 1d       	adc	r24, r1
    1f1c:	11 24       	eor	r1, r1
    1f1e:	91 1d       	adc	r25, r1
    1f20:	08 95       	ret

00001f22 <sprintf>:
    1f22:	ae e0       	ldi	r26, 0x0E	; 14
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	e7 e9       	ldi	r30, 0x97	; 151
    1f28:	ff e0       	ldi	r31, 0x0F	; 15
    1f2a:	0c 94 7a 12 	jmp	0x24f4	; 0x24f4 <__prologue_saves__+0x1c>
    1f2e:	0d 89       	ldd	r16, Y+21	; 0x15
    1f30:	1e 89       	ldd	r17, Y+22	; 0x16
    1f32:	86 e0       	ldi	r24, 0x06	; 6
    1f34:	8c 83       	std	Y+4, r24	; 0x04
    1f36:	1a 83       	std	Y+2, r17	; 0x02
    1f38:	09 83       	std	Y+1, r16	; 0x01
    1f3a:	8f ef       	ldi	r24, 0xFF	; 255
    1f3c:	9f e7       	ldi	r25, 0x7F	; 127
    1f3e:	9e 83       	std	Y+6, r25	; 0x06
    1f40:	8d 83       	std	Y+5, r24	; 0x05
    1f42:	ae 01       	movw	r20, r28
    1f44:	47 5e       	subi	r20, 0xE7	; 231
    1f46:	5f 4f       	sbci	r21, 0xFF	; 255
    1f48:	6f 89       	ldd	r22, Y+23	; 0x17
    1f4a:	78 8d       	ldd	r23, Y+24	; 0x18
    1f4c:	ce 01       	movw	r24, r28
    1f4e:	01 96       	adiw	r24, 0x01	; 1
    1f50:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <vfprintf>
    1f54:	ef 81       	ldd	r30, Y+7	; 0x07
    1f56:	f8 85       	ldd	r31, Y+8	; 0x08
    1f58:	e0 0f       	add	r30, r16
    1f5a:	f1 1f       	adc	r31, r17
    1f5c:	10 82       	st	Z, r1
    1f5e:	2e 96       	adiw	r28, 0x0e	; 14
    1f60:	e4 e0       	ldi	r30, 0x04	; 4
    1f62:	0c 94 96 12 	jmp	0x252c	; 0x252c <__epilogue_restores__+0x1c>

00001f66 <vfprintf>:
    1f66:	ab e0       	ldi	r26, 0x0B	; 11
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	e9 eb       	ldi	r30, 0xB9	; 185
    1f6c:	ff e0       	ldi	r31, 0x0F	; 15
    1f6e:	0c 94 6c 12 	jmp	0x24d8	; 0x24d8 <__prologue_saves__>
    1f72:	6c 01       	movw	r12, r24
    1f74:	7b 01       	movw	r14, r22
    1f76:	8a 01       	movw	r16, r20
    1f78:	fc 01       	movw	r30, r24
    1f7a:	17 82       	std	Z+7, r1	; 0x07
    1f7c:	16 82       	std	Z+6, r1	; 0x06
    1f7e:	83 81       	ldd	r24, Z+3	; 0x03
    1f80:	81 ff       	sbrs	r24, 1
    1f82:	cc c1       	rjmp	.+920    	; 0x231c <vfprintf+0x3b6>
    1f84:	ce 01       	movw	r24, r28
    1f86:	01 96       	adiw	r24, 0x01	; 1
    1f88:	3c 01       	movw	r6, r24
    1f8a:	f6 01       	movw	r30, r12
    1f8c:	93 81       	ldd	r25, Z+3	; 0x03
    1f8e:	f7 01       	movw	r30, r14
    1f90:	93 fd       	sbrc	r25, 3
    1f92:	85 91       	lpm	r24, Z+
    1f94:	93 ff       	sbrs	r25, 3
    1f96:	81 91       	ld	r24, Z+
    1f98:	7f 01       	movw	r14, r30
    1f9a:	88 23       	and	r24, r24
    1f9c:	09 f4       	brne	.+2      	; 0x1fa0 <vfprintf+0x3a>
    1f9e:	ba c1       	rjmp	.+884    	; 0x2314 <vfprintf+0x3ae>
    1fa0:	85 32       	cpi	r24, 0x25	; 37
    1fa2:	39 f4       	brne	.+14     	; 0x1fb2 <vfprintf+0x4c>
    1fa4:	93 fd       	sbrc	r25, 3
    1fa6:	85 91       	lpm	r24, Z+
    1fa8:	93 ff       	sbrs	r25, 3
    1faa:	81 91       	ld	r24, Z+
    1fac:	7f 01       	movw	r14, r30
    1fae:	85 32       	cpi	r24, 0x25	; 37
    1fb0:	29 f4       	brne	.+10     	; 0x1fbc <vfprintf+0x56>
    1fb2:	b6 01       	movw	r22, r12
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	0e 94 aa 11 	call	0x2354	; 0x2354 <fputc>
    1fba:	e7 cf       	rjmp	.-50     	; 0x1f8a <vfprintf+0x24>
    1fbc:	91 2c       	mov	r9, r1
    1fbe:	21 2c       	mov	r2, r1
    1fc0:	31 2c       	mov	r3, r1
    1fc2:	ff e1       	ldi	r31, 0x1F	; 31
    1fc4:	f3 15       	cp	r31, r3
    1fc6:	d8 f0       	brcs	.+54     	; 0x1ffe <vfprintf+0x98>
    1fc8:	8b 32       	cpi	r24, 0x2B	; 43
    1fca:	79 f0       	breq	.+30     	; 0x1fea <vfprintf+0x84>
    1fcc:	38 f4       	brcc	.+14     	; 0x1fdc <vfprintf+0x76>
    1fce:	80 32       	cpi	r24, 0x20	; 32
    1fd0:	79 f0       	breq	.+30     	; 0x1ff0 <vfprintf+0x8a>
    1fd2:	83 32       	cpi	r24, 0x23	; 35
    1fd4:	a1 f4       	brne	.+40     	; 0x1ffe <vfprintf+0x98>
    1fd6:	23 2d       	mov	r18, r3
    1fd8:	20 61       	ori	r18, 0x10	; 16
    1fda:	1d c0       	rjmp	.+58     	; 0x2016 <vfprintf+0xb0>
    1fdc:	8d 32       	cpi	r24, 0x2D	; 45
    1fde:	61 f0       	breq	.+24     	; 0x1ff8 <vfprintf+0x92>
    1fe0:	80 33       	cpi	r24, 0x30	; 48
    1fe2:	69 f4       	brne	.+26     	; 0x1ffe <vfprintf+0x98>
    1fe4:	23 2d       	mov	r18, r3
    1fe6:	21 60       	ori	r18, 0x01	; 1
    1fe8:	16 c0       	rjmp	.+44     	; 0x2016 <vfprintf+0xb0>
    1fea:	83 2d       	mov	r24, r3
    1fec:	82 60       	ori	r24, 0x02	; 2
    1fee:	38 2e       	mov	r3, r24
    1ff0:	e3 2d       	mov	r30, r3
    1ff2:	e4 60       	ori	r30, 0x04	; 4
    1ff4:	3e 2e       	mov	r3, r30
    1ff6:	2a c0       	rjmp	.+84     	; 0x204c <vfprintf+0xe6>
    1ff8:	f3 2d       	mov	r31, r3
    1ffa:	f8 60       	ori	r31, 0x08	; 8
    1ffc:	1d c0       	rjmp	.+58     	; 0x2038 <vfprintf+0xd2>
    1ffe:	37 fc       	sbrc	r3, 7
    2000:	2d c0       	rjmp	.+90     	; 0x205c <vfprintf+0xf6>
    2002:	20 ed       	ldi	r18, 0xD0	; 208
    2004:	28 0f       	add	r18, r24
    2006:	2a 30       	cpi	r18, 0x0A	; 10
    2008:	40 f0       	brcs	.+16     	; 0x201a <vfprintf+0xb4>
    200a:	8e 32       	cpi	r24, 0x2E	; 46
    200c:	b9 f4       	brne	.+46     	; 0x203c <vfprintf+0xd6>
    200e:	36 fc       	sbrc	r3, 6
    2010:	81 c1       	rjmp	.+770    	; 0x2314 <vfprintf+0x3ae>
    2012:	23 2d       	mov	r18, r3
    2014:	20 64       	ori	r18, 0x40	; 64
    2016:	32 2e       	mov	r3, r18
    2018:	19 c0       	rjmp	.+50     	; 0x204c <vfprintf+0xe6>
    201a:	36 fe       	sbrs	r3, 6
    201c:	06 c0       	rjmp	.+12     	; 0x202a <vfprintf+0xc4>
    201e:	8a e0       	ldi	r24, 0x0A	; 10
    2020:	98 9e       	mul	r9, r24
    2022:	20 0d       	add	r18, r0
    2024:	11 24       	eor	r1, r1
    2026:	92 2e       	mov	r9, r18
    2028:	11 c0       	rjmp	.+34     	; 0x204c <vfprintf+0xe6>
    202a:	ea e0       	ldi	r30, 0x0A	; 10
    202c:	2e 9e       	mul	r2, r30
    202e:	20 0d       	add	r18, r0
    2030:	11 24       	eor	r1, r1
    2032:	22 2e       	mov	r2, r18
    2034:	f3 2d       	mov	r31, r3
    2036:	f0 62       	ori	r31, 0x20	; 32
    2038:	3f 2e       	mov	r3, r31
    203a:	08 c0       	rjmp	.+16     	; 0x204c <vfprintf+0xe6>
    203c:	8c 36       	cpi	r24, 0x6C	; 108
    203e:	21 f4       	brne	.+8      	; 0x2048 <vfprintf+0xe2>
    2040:	83 2d       	mov	r24, r3
    2042:	80 68       	ori	r24, 0x80	; 128
    2044:	38 2e       	mov	r3, r24
    2046:	02 c0       	rjmp	.+4      	; 0x204c <vfprintf+0xe6>
    2048:	88 36       	cpi	r24, 0x68	; 104
    204a:	41 f4       	brne	.+16     	; 0x205c <vfprintf+0xf6>
    204c:	f7 01       	movw	r30, r14
    204e:	93 fd       	sbrc	r25, 3
    2050:	85 91       	lpm	r24, Z+
    2052:	93 ff       	sbrs	r25, 3
    2054:	81 91       	ld	r24, Z+
    2056:	7f 01       	movw	r14, r30
    2058:	81 11       	cpse	r24, r1
    205a:	b3 cf       	rjmp	.-154    	; 0x1fc2 <vfprintf+0x5c>
    205c:	98 2f       	mov	r25, r24
    205e:	9f 7d       	andi	r25, 0xDF	; 223
    2060:	95 54       	subi	r25, 0x45	; 69
    2062:	93 30       	cpi	r25, 0x03	; 3
    2064:	28 f4       	brcc	.+10     	; 0x2070 <vfprintf+0x10a>
    2066:	0c 5f       	subi	r16, 0xFC	; 252
    2068:	1f 4f       	sbci	r17, 0xFF	; 255
    206a:	9f e3       	ldi	r25, 0x3F	; 63
    206c:	99 83       	std	Y+1, r25	; 0x01
    206e:	0d c0       	rjmp	.+26     	; 0x208a <vfprintf+0x124>
    2070:	83 36       	cpi	r24, 0x63	; 99
    2072:	31 f0       	breq	.+12     	; 0x2080 <vfprintf+0x11a>
    2074:	83 37       	cpi	r24, 0x73	; 115
    2076:	71 f0       	breq	.+28     	; 0x2094 <vfprintf+0x12e>
    2078:	83 35       	cpi	r24, 0x53	; 83
    207a:	09 f0       	breq	.+2      	; 0x207e <vfprintf+0x118>
    207c:	59 c0       	rjmp	.+178    	; 0x2130 <vfprintf+0x1ca>
    207e:	21 c0       	rjmp	.+66     	; 0x20c2 <vfprintf+0x15c>
    2080:	f8 01       	movw	r30, r16
    2082:	80 81       	ld	r24, Z
    2084:	89 83       	std	Y+1, r24	; 0x01
    2086:	0e 5f       	subi	r16, 0xFE	; 254
    2088:	1f 4f       	sbci	r17, 0xFF	; 255
    208a:	88 24       	eor	r8, r8
    208c:	83 94       	inc	r8
    208e:	91 2c       	mov	r9, r1
    2090:	53 01       	movw	r10, r6
    2092:	13 c0       	rjmp	.+38     	; 0x20ba <vfprintf+0x154>
    2094:	28 01       	movw	r4, r16
    2096:	f2 e0       	ldi	r31, 0x02	; 2
    2098:	4f 0e       	add	r4, r31
    209a:	51 1c       	adc	r5, r1
    209c:	f8 01       	movw	r30, r16
    209e:	a0 80       	ld	r10, Z
    20a0:	b1 80       	ldd	r11, Z+1	; 0x01
    20a2:	36 fe       	sbrs	r3, 6
    20a4:	03 c0       	rjmp	.+6      	; 0x20ac <vfprintf+0x146>
    20a6:	69 2d       	mov	r22, r9
    20a8:	70 e0       	ldi	r23, 0x00	; 0
    20aa:	02 c0       	rjmp	.+4      	; 0x20b0 <vfprintf+0x14a>
    20ac:	6f ef       	ldi	r22, 0xFF	; 255
    20ae:	7f ef       	ldi	r23, 0xFF	; 255
    20b0:	c5 01       	movw	r24, r10
    20b2:	0e 94 9f 11 	call	0x233e	; 0x233e <strnlen>
    20b6:	4c 01       	movw	r8, r24
    20b8:	82 01       	movw	r16, r4
    20ba:	f3 2d       	mov	r31, r3
    20bc:	ff 77       	andi	r31, 0x7F	; 127
    20be:	3f 2e       	mov	r3, r31
    20c0:	16 c0       	rjmp	.+44     	; 0x20ee <vfprintf+0x188>
    20c2:	28 01       	movw	r4, r16
    20c4:	22 e0       	ldi	r18, 0x02	; 2
    20c6:	42 0e       	add	r4, r18
    20c8:	51 1c       	adc	r5, r1
    20ca:	f8 01       	movw	r30, r16
    20cc:	a0 80       	ld	r10, Z
    20ce:	b1 80       	ldd	r11, Z+1	; 0x01
    20d0:	36 fe       	sbrs	r3, 6
    20d2:	03 c0       	rjmp	.+6      	; 0x20da <vfprintf+0x174>
    20d4:	69 2d       	mov	r22, r9
    20d6:	70 e0       	ldi	r23, 0x00	; 0
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <vfprintf+0x178>
    20da:	6f ef       	ldi	r22, 0xFF	; 255
    20dc:	7f ef       	ldi	r23, 0xFF	; 255
    20de:	c5 01       	movw	r24, r10
    20e0:	0e 94 94 11 	call	0x2328	; 0x2328 <strnlen_P>
    20e4:	4c 01       	movw	r8, r24
    20e6:	f3 2d       	mov	r31, r3
    20e8:	f0 68       	ori	r31, 0x80	; 128
    20ea:	3f 2e       	mov	r3, r31
    20ec:	82 01       	movw	r16, r4
    20ee:	33 fc       	sbrc	r3, 3
    20f0:	1b c0       	rjmp	.+54     	; 0x2128 <vfprintf+0x1c2>
    20f2:	82 2d       	mov	r24, r2
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	88 16       	cp	r8, r24
    20f8:	99 06       	cpc	r9, r25
    20fa:	b0 f4       	brcc	.+44     	; 0x2128 <vfprintf+0x1c2>
    20fc:	b6 01       	movw	r22, r12
    20fe:	80 e2       	ldi	r24, 0x20	; 32
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	0e 94 aa 11 	call	0x2354	; 0x2354 <fputc>
    2106:	2a 94       	dec	r2
    2108:	f4 cf       	rjmp	.-24     	; 0x20f2 <vfprintf+0x18c>
    210a:	f5 01       	movw	r30, r10
    210c:	37 fc       	sbrc	r3, 7
    210e:	85 91       	lpm	r24, Z+
    2110:	37 fe       	sbrs	r3, 7
    2112:	81 91       	ld	r24, Z+
    2114:	5f 01       	movw	r10, r30
    2116:	b6 01       	movw	r22, r12
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	0e 94 aa 11 	call	0x2354	; 0x2354 <fputc>
    211e:	21 10       	cpse	r2, r1
    2120:	2a 94       	dec	r2
    2122:	21 e0       	ldi	r18, 0x01	; 1
    2124:	82 1a       	sub	r8, r18
    2126:	91 08       	sbc	r9, r1
    2128:	81 14       	cp	r8, r1
    212a:	91 04       	cpc	r9, r1
    212c:	71 f7       	brne	.-36     	; 0x210a <vfprintf+0x1a4>
    212e:	e8 c0       	rjmp	.+464    	; 0x2300 <vfprintf+0x39a>
    2130:	84 36       	cpi	r24, 0x64	; 100
    2132:	11 f0       	breq	.+4      	; 0x2138 <vfprintf+0x1d2>
    2134:	89 36       	cpi	r24, 0x69	; 105
    2136:	41 f5       	brne	.+80     	; 0x2188 <vfprintf+0x222>
    2138:	f8 01       	movw	r30, r16
    213a:	37 fe       	sbrs	r3, 7
    213c:	07 c0       	rjmp	.+14     	; 0x214c <vfprintf+0x1e6>
    213e:	60 81       	ld	r22, Z
    2140:	71 81       	ldd	r23, Z+1	; 0x01
    2142:	82 81       	ldd	r24, Z+2	; 0x02
    2144:	93 81       	ldd	r25, Z+3	; 0x03
    2146:	0c 5f       	subi	r16, 0xFC	; 252
    2148:	1f 4f       	sbci	r17, 0xFF	; 255
    214a:	08 c0       	rjmp	.+16     	; 0x215c <vfprintf+0x1f6>
    214c:	60 81       	ld	r22, Z
    214e:	71 81       	ldd	r23, Z+1	; 0x01
    2150:	07 2e       	mov	r0, r23
    2152:	00 0c       	add	r0, r0
    2154:	88 0b       	sbc	r24, r24
    2156:	99 0b       	sbc	r25, r25
    2158:	0e 5f       	subi	r16, 0xFE	; 254
    215a:	1f 4f       	sbci	r17, 0xFF	; 255
    215c:	f3 2d       	mov	r31, r3
    215e:	ff 76       	andi	r31, 0x6F	; 111
    2160:	3f 2e       	mov	r3, r31
    2162:	97 ff       	sbrs	r25, 7
    2164:	09 c0       	rjmp	.+18     	; 0x2178 <vfprintf+0x212>
    2166:	90 95       	com	r25
    2168:	80 95       	com	r24
    216a:	70 95       	com	r23
    216c:	61 95       	neg	r22
    216e:	7f 4f       	sbci	r23, 0xFF	; 255
    2170:	8f 4f       	sbci	r24, 0xFF	; 255
    2172:	9f 4f       	sbci	r25, 0xFF	; 255
    2174:	f0 68       	ori	r31, 0x80	; 128
    2176:	3f 2e       	mov	r3, r31
    2178:	2a e0       	ldi	r18, 0x0A	; 10
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	a3 01       	movw	r20, r6
    217e:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__ultoa_invert>
    2182:	88 2e       	mov	r8, r24
    2184:	86 18       	sub	r8, r6
    2186:	45 c0       	rjmp	.+138    	; 0x2212 <vfprintf+0x2ac>
    2188:	85 37       	cpi	r24, 0x75	; 117
    218a:	31 f4       	brne	.+12     	; 0x2198 <vfprintf+0x232>
    218c:	23 2d       	mov	r18, r3
    218e:	2f 7e       	andi	r18, 0xEF	; 239
    2190:	b2 2e       	mov	r11, r18
    2192:	2a e0       	ldi	r18, 0x0A	; 10
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	25 c0       	rjmp	.+74     	; 0x21e2 <vfprintf+0x27c>
    2198:	93 2d       	mov	r25, r3
    219a:	99 7f       	andi	r25, 0xF9	; 249
    219c:	b9 2e       	mov	r11, r25
    219e:	8f 36       	cpi	r24, 0x6F	; 111
    21a0:	c1 f0       	breq	.+48     	; 0x21d2 <vfprintf+0x26c>
    21a2:	18 f4       	brcc	.+6      	; 0x21aa <vfprintf+0x244>
    21a4:	88 35       	cpi	r24, 0x58	; 88
    21a6:	79 f0       	breq	.+30     	; 0x21c6 <vfprintf+0x260>
    21a8:	b5 c0       	rjmp	.+362    	; 0x2314 <vfprintf+0x3ae>
    21aa:	80 37       	cpi	r24, 0x70	; 112
    21ac:	19 f0       	breq	.+6      	; 0x21b4 <vfprintf+0x24e>
    21ae:	88 37       	cpi	r24, 0x78	; 120
    21b0:	21 f0       	breq	.+8      	; 0x21ba <vfprintf+0x254>
    21b2:	b0 c0       	rjmp	.+352    	; 0x2314 <vfprintf+0x3ae>
    21b4:	e9 2f       	mov	r30, r25
    21b6:	e0 61       	ori	r30, 0x10	; 16
    21b8:	be 2e       	mov	r11, r30
    21ba:	b4 fe       	sbrs	r11, 4
    21bc:	0d c0       	rjmp	.+26     	; 0x21d8 <vfprintf+0x272>
    21be:	fb 2d       	mov	r31, r11
    21c0:	f4 60       	ori	r31, 0x04	; 4
    21c2:	bf 2e       	mov	r11, r31
    21c4:	09 c0       	rjmp	.+18     	; 0x21d8 <vfprintf+0x272>
    21c6:	34 fe       	sbrs	r3, 4
    21c8:	0a c0       	rjmp	.+20     	; 0x21de <vfprintf+0x278>
    21ca:	29 2f       	mov	r18, r25
    21cc:	26 60       	ori	r18, 0x06	; 6
    21ce:	b2 2e       	mov	r11, r18
    21d0:	06 c0       	rjmp	.+12     	; 0x21de <vfprintf+0x278>
    21d2:	28 e0       	ldi	r18, 0x08	; 8
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	05 c0       	rjmp	.+10     	; 0x21e2 <vfprintf+0x27c>
    21d8:	20 e1       	ldi	r18, 0x10	; 16
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	02 c0       	rjmp	.+4      	; 0x21e2 <vfprintf+0x27c>
    21de:	20 e1       	ldi	r18, 0x10	; 16
    21e0:	32 e0       	ldi	r19, 0x02	; 2
    21e2:	f8 01       	movw	r30, r16
    21e4:	b7 fe       	sbrs	r11, 7
    21e6:	07 c0       	rjmp	.+14     	; 0x21f6 <vfprintf+0x290>
    21e8:	60 81       	ld	r22, Z
    21ea:	71 81       	ldd	r23, Z+1	; 0x01
    21ec:	82 81       	ldd	r24, Z+2	; 0x02
    21ee:	93 81       	ldd	r25, Z+3	; 0x03
    21f0:	0c 5f       	subi	r16, 0xFC	; 252
    21f2:	1f 4f       	sbci	r17, 0xFF	; 255
    21f4:	06 c0       	rjmp	.+12     	; 0x2202 <vfprintf+0x29c>
    21f6:	60 81       	ld	r22, Z
    21f8:	71 81       	ldd	r23, Z+1	; 0x01
    21fa:	80 e0       	ldi	r24, 0x00	; 0
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	0e 5f       	subi	r16, 0xFE	; 254
    2200:	1f 4f       	sbci	r17, 0xFF	; 255
    2202:	a3 01       	movw	r20, r6
    2204:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__ultoa_invert>
    2208:	88 2e       	mov	r8, r24
    220a:	86 18       	sub	r8, r6
    220c:	fb 2d       	mov	r31, r11
    220e:	ff 77       	andi	r31, 0x7F	; 127
    2210:	3f 2e       	mov	r3, r31
    2212:	36 fe       	sbrs	r3, 6
    2214:	0d c0       	rjmp	.+26     	; 0x2230 <vfprintf+0x2ca>
    2216:	23 2d       	mov	r18, r3
    2218:	2e 7f       	andi	r18, 0xFE	; 254
    221a:	a2 2e       	mov	r10, r18
    221c:	89 14       	cp	r8, r9
    221e:	58 f4       	brcc	.+22     	; 0x2236 <vfprintf+0x2d0>
    2220:	34 fe       	sbrs	r3, 4
    2222:	0b c0       	rjmp	.+22     	; 0x223a <vfprintf+0x2d4>
    2224:	32 fc       	sbrc	r3, 2
    2226:	09 c0       	rjmp	.+18     	; 0x223a <vfprintf+0x2d4>
    2228:	83 2d       	mov	r24, r3
    222a:	8e 7e       	andi	r24, 0xEE	; 238
    222c:	a8 2e       	mov	r10, r24
    222e:	05 c0       	rjmp	.+10     	; 0x223a <vfprintf+0x2d4>
    2230:	b8 2c       	mov	r11, r8
    2232:	a3 2c       	mov	r10, r3
    2234:	03 c0       	rjmp	.+6      	; 0x223c <vfprintf+0x2d6>
    2236:	b8 2c       	mov	r11, r8
    2238:	01 c0       	rjmp	.+2      	; 0x223c <vfprintf+0x2d6>
    223a:	b9 2c       	mov	r11, r9
    223c:	a4 fe       	sbrs	r10, 4
    223e:	0f c0       	rjmp	.+30     	; 0x225e <vfprintf+0x2f8>
    2240:	fe 01       	movw	r30, r28
    2242:	e8 0d       	add	r30, r8
    2244:	f1 1d       	adc	r31, r1
    2246:	80 81       	ld	r24, Z
    2248:	80 33       	cpi	r24, 0x30	; 48
    224a:	21 f4       	brne	.+8      	; 0x2254 <vfprintf+0x2ee>
    224c:	9a 2d       	mov	r25, r10
    224e:	99 7e       	andi	r25, 0xE9	; 233
    2250:	a9 2e       	mov	r10, r25
    2252:	09 c0       	rjmp	.+18     	; 0x2266 <vfprintf+0x300>
    2254:	a2 fe       	sbrs	r10, 2
    2256:	06 c0       	rjmp	.+12     	; 0x2264 <vfprintf+0x2fe>
    2258:	b3 94       	inc	r11
    225a:	b3 94       	inc	r11
    225c:	04 c0       	rjmp	.+8      	; 0x2266 <vfprintf+0x300>
    225e:	8a 2d       	mov	r24, r10
    2260:	86 78       	andi	r24, 0x86	; 134
    2262:	09 f0       	breq	.+2      	; 0x2266 <vfprintf+0x300>
    2264:	b3 94       	inc	r11
    2266:	a3 fc       	sbrc	r10, 3
    2268:	11 c0       	rjmp	.+34     	; 0x228c <vfprintf+0x326>
    226a:	a0 fe       	sbrs	r10, 0
    226c:	06 c0       	rjmp	.+12     	; 0x227a <vfprintf+0x314>
    226e:	b2 14       	cp	r11, r2
    2270:	88 f4       	brcc	.+34     	; 0x2294 <vfprintf+0x32e>
    2272:	28 0c       	add	r2, r8
    2274:	92 2c       	mov	r9, r2
    2276:	9b 18       	sub	r9, r11
    2278:	0e c0       	rjmp	.+28     	; 0x2296 <vfprintf+0x330>
    227a:	b2 14       	cp	r11, r2
    227c:	60 f4       	brcc	.+24     	; 0x2296 <vfprintf+0x330>
    227e:	b6 01       	movw	r22, r12
    2280:	80 e2       	ldi	r24, 0x20	; 32
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	0e 94 aa 11 	call	0x2354	; 0x2354 <fputc>
    2288:	b3 94       	inc	r11
    228a:	f7 cf       	rjmp	.-18     	; 0x227a <vfprintf+0x314>
    228c:	b2 14       	cp	r11, r2
    228e:	18 f4       	brcc	.+6      	; 0x2296 <vfprintf+0x330>
    2290:	2b 18       	sub	r2, r11
    2292:	02 c0       	rjmp	.+4      	; 0x2298 <vfprintf+0x332>
    2294:	98 2c       	mov	r9, r8
    2296:	21 2c       	mov	r2, r1
    2298:	a4 fe       	sbrs	r10, 4
    229a:	10 c0       	rjmp	.+32     	; 0x22bc <vfprintf+0x356>
    229c:	b6 01       	movw	r22, r12
    229e:	80 e3       	ldi	r24, 0x30	; 48
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	0e 94 aa 11 	call	0x2354	; 0x2354 <fputc>
    22a6:	a2 fe       	sbrs	r10, 2
    22a8:	17 c0       	rjmp	.+46     	; 0x22d8 <vfprintf+0x372>
    22aa:	a1 fc       	sbrc	r10, 1
    22ac:	03 c0       	rjmp	.+6      	; 0x22b4 <vfprintf+0x34e>
    22ae:	88 e7       	ldi	r24, 0x78	; 120
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	02 c0       	rjmp	.+4      	; 0x22b8 <vfprintf+0x352>
    22b4:	88 e5       	ldi	r24, 0x58	; 88
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	b6 01       	movw	r22, r12
    22ba:	0c c0       	rjmp	.+24     	; 0x22d4 <vfprintf+0x36e>
    22bc:	8a 2d       	mov	r24, r10
    22be:	86 78       	andi	r24, 0x86	; 134
    22c0:	59 f0       	breq	.+22     	; 0x22d8 <vfprintf+0x372>
    22c2:	a1 fe       	sbrs	r10, 1
    22c4:	02 c0       	rjmp	.+4      	; 0x22ca <vfprintf+0x364>
    22c6:	8b e2       	ldi	r24, 0x2B	; 43
    22c8:	01 c0       	rjmp	.+2      	; 0x22cc <vfprintf+0x366>
    22ca:	80 e2       	ldi	r24, 0x20	; 32
    22cc:	a7 fc       	sbrc	r10, 7
    22ce:	8d e2       	ldi	r24, 0x2D	; 45
    22d0:	b6 01       	movw	r22, r12
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	0e 94 aa 11 	call	0x2354	; 0x2354 <fputc>
    22d8:	89 14       	cp	r8, r9
    22da:	38 f4       	brcc	.+14     	; 0x22ea <vfprintf+0x384>
    22dc:	b6 01       	movw	r22, r12
    22de:	80 e3       	ldi	r24, 0x30	; 48
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	0e 94 aa 11 	call	0x2354	; 0x2354 <fputc>
    22e6:	9a 94       	dec	r9
    22e8:	f7 cf       	rjmp	.-18     	; 0x22d8 <vfprintf+0x372>
    22ea:	8a 94       	dec	r8
    22ec:	f3 01       	movw	r30, r6
    22ee:	e8 0d       	add	r30, r8
    22f0:	f1 1d       	adc	r31, r1
    22f2:	80 81       	ld	r24, Z
    22f4:	b6 01       	movw	r22, r12
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	0e 94 aa 11 	call	0x2354	; 0x2354 <fputc>
    22fc:	81 10       	cpse	r8, r1
    22fe:	f5 cf       	rjmp	.-22     	; 0x22ea <vfprintf+0x384>
    2300:	22 20       	and	r2, r2
    2302:	09 f4       	brne	.+2      	; 0x2306 <vfprintf+0x3a0>
    2304:	42 ce       	rjmp	.-892    	; 0x1f8a <vfprintf+0x24>
    2306:	b6 01       	movw	r22, r12
    2308:	80 e2       	ldi	r24, 0x20	; 32
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	0e 94 aa 11 	call	0x2354	; 0x2354 <fputc>
    2310:	2a 94       	dec	r2
    2312:	f6 cf       	rjmp	.-20     	; 0x2300 <vfprintf+0x39a>
    2314:	f6 01       	movw	r30, r12
    2316:	86 81       	ldd	r24, Z+6	; 0x06
    2318:	97 81       	ldd	r25, Z+7	; 0x07
    231a:	02 c0       	rjmp	.+4      	; 0x2320 <vfprintf+0x3ba>
    231c:	8f ef       	ldi	r24, 0xFF	; 255
    231e:	9f ef       	ldi	r25, 0xFF	; 255
    2320:	2b 96       	adiw	r28, 0x0b	; 11
    2322:	e2 e1       	ldi	r30, 0x12	; 18
    2324:	0c 94 88 12 	jmp	0x2510	; 0x2510 <__epilogue_restores__>

00002328 <strnlen_P>:
    2328:	fc 01       	movw	r30, r24
    232a:	05 90       	lpm	r0, Z+
    232c:	61 50       	subi	r22, 0x01	; 1
    232e:	70 40       	sbci	r23, 0x00	; 0
    2330:	01 10       	cpse	r0, r1
    2332:	d8 f7       	brcc	.-10     	; 0x232a <strnlen_P+0x2>
    2334:	80 95       	com	r24
    2336:	90 95       	com	r25
    2338:	8e 0f       	add	r24, r30
    233a:	9f 1f       	adc	r25, r31
    233c:	08 95       	ret

0000233e <strnlen>:
    233e:	fc 01       	movw	r30, r24
    2340:	61 50       	subi	r22, 0x01	; 1
    2342:	70 40       	sbci	r23, 0x00	; 0
    2344:	01 90       	ld	r0, Z+
    2346:	01 10       	cpse	r0, r1
    2348:	d8 f7       	brcc	.-10     	; 0x2340 <strnlen+0x2>
    234a:	80 95       	com	r24
    234c:	90 95       	com	r25
    234e:	8e 0f       	add	r24, r30
    2350:	9f 1f       	adc	r25, r31
    2352:	08 95       	ret

00002354 <fputc>:
    2354:	0f 93       	push	r16
    2356:	1f 93       	push	r17
    2358:	cf 93       	push	r28
    235a:	df 93       	push	r29
    235c:	fb 01       	movw	r30, r22
    235e:	23 81       	ldd	r18, Z+3	; 0x03
    2360:	21 fd       	sbrc	r18, 1
    2362:	03 c0       	rjmp	.+6      	; 0x236a <fputc+0x16>
    2364:	8f ef       	ldi	r24, 0xFF	; 255
    2366:	9f ef       	ldi	r25, 0xFF	; 255
    2368:	2c c0       	rjmp	.+88     	; 0x23c2 <fputc+0x6e>
    236a:	22 ff       	sbrs	r18, 2
    236c:	16 c0       	rjmp	.+44     	; 0x239a <fputc+0x46>
    236e:	46 81       	ldd	r20, Z+6	; 0x06
    2370:	57 81       	ldd	r21, Z+7	; 0x07
    2372:	24 81       	ldd	r18, Z+4	; 0x04
    2374:	35 81       	ldd	r19, Z+5	; 0x05
    2376:	42 17       	cp	r20, r18
    2378:	53 07       	cpc	r21, r19
    237a:	44 f4       	brge	.+16     	; 0x238c <fputc+0x38>
    237c:	a0 81       	ld	r26, Z
    237e:	b1 81       	ldd	r27, Z+1	; 0x01
    2380:	9d 01       	movw	r18, r26
    2382:	2f 5f       	subi	r18, 0xFF	; 255
    2384:	3f 4f       	sbci	r19, 0xFF	; 255
    2386:	31 83       	std	Z+1, r19	; 0x01
    2388:	20 83       	st	Z, r18
    238a:	8c 93       	st	X, r24
    238c:	26 81       	ldd	r18, Z+6	; 0x06
    238e:	37 81       	ldd	r19, Z+7	; 0x07
    2390:	2f 5f       	subi	r18, 0xFF	; 255
    2392:	3f 4f       	sbci	r19, 0xFF	; 255
    2394:	37 83       	std	Z+7, r19	; 0x07
    2396:	26 83       	std	Z+6, r18	; 0x06
    2398:	14 c0       	rjmp	.+40     	; 0x23c2 <fputc+0x6e>
    239a:	8b 01       	movw	r16, r22
    239c:	ec 01       	movw	r28, r24
    239e:	fb 01       	movw	r30, r22
    23a0:	00 84       	ldd	r0, Z+8	; 0x08
    23a2:	f1 85       	ldd	r31, Z+9	; 0x09
    23a4:	e0 2d       	mov	r30, r0
    23a6:	09 95       	icall
    23a8:	89 2b       	or	r24, r25
    23aa:	e1 f6       	brne	.-72     	; 0x2364 <fputc+0x10>
    23ac:	d8 01       	movw	r26, r16
    23ae:	16 96       	adiw	r26, 0x06	; 6
    23b0:	8d 91       	ld	r24, X+
    23b2:	9c 91       	ld	r25, X
    23b4:	17 97       	sbiw	r26, 0x07	; 7
    23b6:	01 96       	adiw	r24, 0x01	; 1
    23b8:	17 96       	adiw	r26, 0x07	; 7
    23ba:	9c 93       	st	X, r25
    23bc:	8e 93       	st	-X, r24
    23be:	16 97       	sbiw	r26, 0x06	; 6
    23c0:	ce 01       	movw	r24, r28
    23c2:	df 91       	pop	r29
    23c4:	cf 91       	pop	r28
    23c6:	1f 91       	pop	r17
    23c8:	0f 91       	pop	r16
    23ca:	08 95       	ret

000023cc <__ultoa_invert>:
    23cc:	fa 01       	movw	r30, r20
    23ce:	aa 27       	eor	r26, r26
    23d0:	28 30       	cpi	r18, 0x08	; 8
    23d2:	51 f1       	breq	.+84     	; 0x2428 <__ultoa_invert+0x5c>
    23d4:	20 31       	cpi	r18, 0x10	; 16
    23d6:	81 f1       	breq	.+96     	; 0x2438 <__ultoa_invert+0x6c>
    23d8:	e8 94       	clt
    23da:	6f 93       	push	r22
    23dc:	6e 7f       	andi	r22, 0xFE	; 254
    23de:	6e 5f       	subi	r22, 0xFE	; 254
    23e0:	7f 4f       	sbci	r23, 0xFF	; 255
    23e2:	8f 4f       	sbci	r24, 0xFF	; 255
    23e4:	9f 4f       	sbci	r25, 0xFF	; 255
    23e6:	af 4f       	sbci	r26, 0xFF	; 255
    23e8:	b1 e0       	ldi	r27, 0x01	; 1
    23ea:	3e d0       	rcall	.+124    	; 0x2468 <__ultoa_invert+0x9c>
    23ec:	b4 e0       	ldi	r27, 0x04	; 4
    23ee:	3c d0       	rcall	.+120    	; 0x2468 <__ultoa_invert+0x9c>
    23f0:	67 0f       	add	r22, r23
    23f2:	78 1f       	adc	r23, r24
    23f4:	89 1f       	adc	r24, r25
    23f6:	9a 1f       	adc	r25, r26
    23f8:	a1 1d       	adc	r26, r1
    23fa:	68 0f       	add	r22, r24
    23fc:	79 1f       	adc	r23, r25
    23fe:	8a 1f       	adc	r24, r26
    2400:	91 1d       	adc	r25, r1
    2402:	a1 1d       	adc	r26, r1
    2404:	6a 0f       	add	r22, r26
    2406:	71 1d       	adc	r23, r1
    2408:	81 1d       	adc	r24, r1
    240a:	91 1d       	adc	r25, r1
    240c:	a1 1d       	adc	r26, r1
    240e:	20 d0       	rcall	.+64     	; 0x2450 <__ultoa_invert+0x84>
    2410:	09 f4       	brne	.+2      	; 0x2414 <__ultoa_invert+0x48>
    2412:	68 94       	set
    2414:	3f 91       	pop	r19
    2416:	2a e0       	ldi	r18, 0x0A	; 10
    2418:	26 9f       	mul	r18, r22
    241a:	11 24       	eor	r1, r1
    241c:	30 19       	sub	r19, r0
    241e:	30 5d       	subi	r19, 0xD0	; 208
    2420:	31 93       	st	Z+, r19
    2422:	de f6       	brtc	.-74     	; 0x23da <__ultoa_invert+0xe>
    2424:	cf 01       	movw	r24, r30
    2426:	08 95       	ret
    2428:	46 2f       	mov	r20, r22
    242a:	47 70       	andi	r20, 0x07	; 7
    242c:	40 5d       	subi	r20, 0xD0	; 208
    242e:	41 93       	st	Z+, r20
    2430:	b3 e0       	ldi	r27, 0x03	; 3
    2432:	0f d0       	rcall	.+30     	; 0x2452 <__ultoa_invert+0x86>
    2434:	c9 f7       	brne	.-14     	; 0x2428 <__ultoa_invert+0x5c>
    2436:	f6 cf       	rjmp	.-20     	; 0x2424 <__ultoa_invert+0x58>
    2438:	46 2f       	mov	r20, r22
    243a:	4f 70       	andi	r20, 0x0F	; 15
    243c:	40 5d       	subi	r20, 0xD0	; 208
    243e:	4a 33       	cpi	r20, 0x3A	; 58
    2440:	18 f0       	brcs	.+6      	; 0x2448 <__ultoa_invert+0x7c>
    2442:	49 5d       	subi	r20, 0xD9	; 217
    2444:	31 fd       	sbrc	r19, 1
    2446:	40 52       	subi	r20, 0x20	; 32
    2448:	41 93       	st	Z+, r20
    244a:	02 d0       	rcall	.+4      	; 0x2450 <__ultoa_invert+0x84>
    244c:	a9 f7       	brne	.-22     	; 0x2438 <__ultoa_invert+0x6c>
    244e:	ea cf       	rjmp	.-44     	; 0x2424 <__ultoa_invert+0x58>
    2450:	b4 e0       	ldi	r27, 0x04	; 4
    2452:	a6 95       	lsr	r26
    2454:	97 95       	ror	r25
    2456:	87 95       	ror	r24
    2458:	77 95       	ror	r23
    245a:	67 95       	ror	r22
    245c:	ba 95       	dec	r27
    245e:	c9 f7       	brne	.-14     	; 0x2452 <__ultoa_invert+0x86>
    2460:	00 97       	sbiw	r24, 0x00	; 0
    2462:	61 05       	cpc	r22, r1
    2464:	71 05       	cpc	r23, r1
    2466:	08 95       	ret
    2468:	9b 01       	movw	r18, r22
    246a:	ac 01       	movw	r20, r24
    246c:	0a 2e       	mov	r0, r26
    246e:	06 94       	lsr	r0
    2470:	57 95       	ror	r21
    2472:	47 95       	ror	r20
    2474:	37 95       	ror	r19
    2476:	27 95       	ror	r18
    2478:	ba 95       	dec	r27
    247a:	c9 f7       	brne	.-14     	; 0x246e <__ultoa_invert+0xa2>
    247c:	62 0f       	add	r22, r18
    247e:	73 1f       	adc	r23, r19
    2480:	84 1f       	adc	r24, r20
    2482:	95 1f       	adc	r25, r21
    2484:	a0 1d       	adc	r26, r0
    2486:	08 95       	ret

00002488 <eeprom_read_word>:
    2488:	a8 e1       	ldi	r26, 0x18	; 24
    248a:	b0 e0       	ldi	r27, 0x00	; 0
    248c:	42 e0       	ldi	r20, 0x02	; 2
    248e:	50 e0       	ldi	r21, 0x00	; 0
    2490:	0c 94 51 12 	jmp	0x24a2	; 0x24a2 <eeprom_read_blraw>

00002494 <eeprom_write_word>:
    2494:	0e 94 5f 12 	call	0x24be	; 0x24be <eeprom_write_byte>
    2498:	27 2f       	mov	r18, r23
    249a:	0c 94 60 12 	jmp	0x24c0	; 0x24c0 <eeprom_write_r18>

0000249e <eeprom_read_block>:
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22

000024a2 <eeprom_read_blraw>:
    24a2:	fc 01       	movw	r30, r24
    24a4:	e1 99       	sbic	0x1c, 1	; 28
    24a6:	fe cf       	rjmp	.-4      	; 0x24a4 <eeprom_read_blraw+0x2>
    24a8:	06 c0       	rjmp	.+12     	; 0x24b6 <eeprom_read_blraw+0x14>
    24aa:	ff bb       	out	0x1f, r31	; 31
    24ac:	ee bb       	out	0x1e, r30	; 30
    24ae:	e0 9a       	sbi	0x1c, 0	; 28
    24b0:	31 96       	adiw	r30, 0x01	; 1
    24b2:	0d b2       	in	r0, 0x1d	; 29
    24b4:	0d 92       	st	X+, r0
    24b6:	41 50       	subi	r20, 0x01	; 1
    24b8:	50 40       	sbci	r21, 0x00	; 0
    24ba:	b8 f7       	brcc	.-18     	; 0x24aa <eeprom_read_blraw+0x8>
    24bc:	08 95       	ret

000024be <eeprom_write_byte>:
    24be:	26 2f       	mov	r18, r22

000024c0 <eeprom_write_r18>:
    24c0:	e1 99       	sbic	0x1c, 1	; 28
    24c2:	fe cf       	rjmp	.-4      	; 0x24c0 <eeprom_write_r18>
    24c4:	9f bb       	out	0x1f, r25	; 31
    24c6:	8e bb       	out	0x1e, r24	; 30
    24c8:	2d bb       	out	0x1d, r18	; 29
    24ca:	0f b6       	in	r0, 0x3f	; 63
    24cc:	f8 94       	cli
    24ce:	e2 9a       	sbi	0x1c, 2	; 28
    24d0:	e1 9a       	sbi	0x1c, 1	; 28
    24d2:	0f be       	out	0x3f, r0	; 63
    24d4:	01 96       	adiw	r24, 0x01	; 1
    24d6:	08 95       	ret

000024d8 <__prologue_saves__>:
    24d8:	2f 92       	push	r2
    24da:	3f 92       	push	r3
    24dc:	4f 92       	push	r4
    24de:	5f 92       	push	r5
    24e0:	6f 92       	push	r6
    24e2:	7f 92       	push	r7
    24e4:	8f 92       	push	r8
    24e6:	9f 92       	push	r9
    24e8:	af 92       	push	r10
    24ea:	bf 92       	push	r11
    24ec:	cf 92       	push	r12
    24ee:	df 92       	push	r13
    24f0:	ef 92       	push	r14
    24f2:	ff 92       	push	r15
    24f4:	0f 93       	push	r16
    24f6:	1f 93       	push	r17
    24f8:	cf 93       	push	r28
    24fa:	df 93       	push	r29
    24fc:	cd b7       	in	r28, 0x3d	; 61
    24fe:	de b7       	in	r29, 0x3e	; 62
    2500:	ca 1b       	sub	r28, r26
    2502:	db 0b       	sbc	r29, r27
    2504:	0f b6       	in	r0, 0x3f	; 63
    2506:	f8 94       	cli
    2508:	de bf       	out	0x3e, r29	; 62
    250a:	0f be       	out	0x3f, r0	; 63
    250c:	cd bf       	out	0x3d, r28	; 61
    250e:	09 94       	ijmp

00002510 <__epilogue_restores__>:
    2510:	2a 88       	ldd	r2, Y+18	; 0x12
    2512:	39 88       	ldd	r3, Y+17	; 0x11
    2514:	48 88       	ldd	r4, Y+16	; 0x10
    2516:	5f 84       	ldd	r5, Y+15	; 0x0f
    2518:	6e 84       	ldd	r6, Y+14	; 0x0e
    251a:	7d 84       	ldd	r7, Y+13	; 0x0d
    251c:	8c 84       	ldd	r8, Y+12	; 0x0c
    251e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2520:	aa 84       	ldd	r10, Y+10	; 0x0a
    2522:	b9 84       	ldd	r11, Y+9	; 0x09
    2524:	c8 84       	ldd	r12, Y+8	; 0x08
    2526:	df 80       	ldd	r13, Y+7	; 0x07
    2528:	ee 80       	ldd	r14, Y+6	; 0x06
    252a:	fd 80       	ldd	r15, Y+5	; 0x05
    252c:	0c 81       	ldd	r16, Y+4	; 0x04
    252e:	1b 81       	ldd	r17, Y+3	; 0x03
    2530:	aa 81       	ldd	r26, Y+2	; 0x02
    2532:	b9 81       	ldd	r27, Y+1	; 0x01
    2534:	ce 0f       	add	r28, r30
    2536:	d1 1d       	adc	r29, r1
    2538:	0f b6       	in	r0, 0x3f	; 63
    253a:	f8 94       	cli
    253c:	de bf       	out	0x3e, r29	; 62
    253e:	0f be       	out	0x3f, r0	; 63
    2540:	cd bf       	out	0x3d, r28	; 61
    2542:	ed 01       	movw	r28, r26
    2544:	08 95       	ret

00002546 <_exit>:
    2546:	f8 94       	cli

00002548 <__stop_program>:
    2548:	ff cf       	rjmp	.-2      	; 0x2548 <__stop_program>
